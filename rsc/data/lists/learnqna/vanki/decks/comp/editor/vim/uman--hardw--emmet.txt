
 _vim2021_1_
set foldmethod=marker

___zzzz

@n: 3yyp}ddzc3-			#copy last q&a-post + bump i-number 1
@s: o----yypO				#split (=put ---- + blank line + ----)
 @p: {eg. 'svb-p' (for 'svb-webapp')}
-- -- --

	----
1
{{{
	
	--
	-p
	}}}
2
{{{
	
	--
	-p
	}}}


        Blender 1x3(!!)
	Emacs 1-list
	Emacs Org-list

 ___vimscrhardw
 __vim_netrw

___dlangali_1
	@e: -$a  @@
		
___Dlangali_2		#continue inputting (+testing) 2/3 (****(!!))
  ___Dlangali_3

    ___cpptut1
    ___Freec01_h5c3 **
    ___JDir14
    __R
   __haskly
   __haskmueut
___lpy3_1condens
___LPY3
 ___arlang_bzmini_1
	___svg_svbwebapp1 *
	___FreecStart
	 ___jsEloq
 ___Philto  (+cont. w. Verktl. (etc) )
	__shotwell
	__thunar
	__dolphin
	__EmmetVim
     __Ffox
     __websearch *
     __evince
     __Okular
    __ed
  __csound_Introd *

   __julia
   ___niminaction
    ___lilypond_01
    ___lilypond_02

   __guile
   __mscore3

    
VimUmandef1of2
	__vuman_last

	----
([start vim w. specific rc-file || w.out reading an init-file ***(!!)])
{{{
	 vim -u alt/rcfile
	vim -u NONE
	--
	vuman-p8
	}}}
	----
[check if cert. option (eg. nocompat.) set || check val. of option ((**!!)) ]
{{{
	:set compatible?
	--
	:set filetype
		# not set if echoes 'filetype='
	--
	vuman-p7,p45
	}}}
jump in/back via documentation(etc) hyperlink  (eg. |link|)
{{{
	c-] (csg-o) / c-o | c-t
	--
	  'jump to tag'  p15
		 'jump to older pos'
		 'pop tag'
      +c-i + Tab-Trick ****
	--
	vuman-p6,p15
	}}}
[see|copy ex. vimrc-file]
{{{
	unix | win:
	  :!cp -i $VIMRUNTIME/vimrc_example.vim ~/.vimrc
	  :!copy $VIMRUNTIME/vimrc_example.vim $VIM/_vimrc
	--
	vuman-p6
	}}}
[[list all scripts loaded at startup of vim (**!(!)) ]]
{{{
	:scriptnames
	--
	vuman-p7
	}}}
[[tut: no rc|init + copy example tut.file via "hidden(!)" session **(!!) ]]
{{{
	vim -u NONE -c 'e $VIMRUNTIME/tutor/tutor' -c 'w! TUTORCOPY' -c 'q'
	--
	vuman-p7
	}}}

[[Notat. used by the help-system to define a 'tag(=hyperlink) destination']] **(*)
{{{
	*  *
	--
	eg. *destin*
	--
	vuman-p15
	}}}
	----
	----
append 5 times '!' (**!)
{{{
	5a!<Esc>
	--
	vuman-p14
	}}}
((display the general help-win (**) ))
{{{
	:h
	--
	vuman-p14
	}}}

the Help-system ****!!(!)

	----
	----
Get help on deleting text (**)
{{{
	:h deleting
	--
	vuman-p15
	}}}
[reference-table w. all(!) mode-prefixes (=like i_ for insert-mode)]
{{{
	|help-context|
	--
	vuman-p15
	}}}
Spec.keys-notation (=like for up-arrow) **(*)
{{{
	:h i_<Up>
	--
	vuman-p15
	}}}

show toc for the uman ***(*)
{{{
	:h user-toc.txt
	--
	vuman-p16
	}}}
	----
	----
show/see locally added help-files (**)
{{{
	:h  (=the general|overview-page  + scroll down)
	--
	vuman-p16
	}}}
Show help on the help-system (******!!!!)
{{{
	:h :help
	--
	vuman-p16
	}}}
help on compile-time feature 'name'
{{{
	:h +name
	--
	vuman-p16
	}}}

" 'quickreview' (=view next a. directly)
nnoremap Q zmzj--ztzjzo
	" NEXT Q:
nnoremap P zmzj--ztzj

Help on AuCmd Event 'EventName' *****
{{{
	:h EventName
	--
	vuman-p16
	}}}
Find a help-tag starting w. "pattern" **** !! @@(@)
{{{
	:h pattern<Tab>  #+cont. for cycling through alt.s
	:h pattern<C-D>  #(=list all matches)  **
	--
	vuman-p16
	}}}
Search Regex-patt. in all(!!) Help-files (*****)!! @@(@)
{{{
	:helpg(rep) /pattern/
	--
	 :cn  |  :cN
	 :cfirst  |  :clast
	   --
	 :copen  |  :cclose  (??)
		(+:clist ??)  p90
	--
	vuman-p16
	}}}
Open Quickfix-win w. hgrep-matches (**)*  #+jump to match (in help) w. Enter (*) @@
{{{
	:copen  |  :cclose
	--
	vuman-p16
	}}}
	----
	----
Go to Top of Helpfile (eg. 'digraphs') *
{{{
	:h digraphs.txt
	--
	vuman-p16
	}}}
ref.s in uman: |Q_lr|
{{{
	(=someth. like quick|overview-lists ??(*))
		+ |Q_wi|
	--
	vuman-p17,p57
	}}}


Ch. 3 - Movement

Change wh. vim considers to be word-char.s (=affects movement|completion)  (eg. add '-') ****(!!!!) @@(@@)
{{{
	:set iskeyword+=-
		(eg. adding/removing spec.chars like '~', '_' etc)
	--
	vuman-p17,p43(*)
	  # 'all alphas, 0-9, _, printable latin char.s'  (etc)
	}}}
Set to include [, {, (etc??) in 'moving betw. brackets' **(**) @
{{{
	inspect + set 'matchpairs' **(!*)
	  (eg. include <-pairs (??))
	--
	vuman-p19
	}}}
Move to(!) paren.s|brackets // betw. matching paren.s|brackets  *(!)
{{{
	%
	--
	vuman-p19
	}}}
	----
	----
search third 'x' on line  **(!)
{{{
	3fx
	--
	vuman-p18
	}}}
move to line N in file  (eg. 33) @
{{{
	33G  //  :33
	--
	vuman-p19
	}}}
(go to first / last line in file)
{{{
	gg  /  1G  /  :1
	G  /  :$
	--
	vuman-p19
	}}}
Show file info (specif. which line you're on) @
{{{
	c-g
		.
	:set nu
		.
	:set ruler
	--
	vuman-p20
	}}}

[Char.s w. spec. meaning in /-searches (**(!)) ]  #=have to be escaped
{{{
	%
	~
	.
	*
	[  ]
	^  $
	/  \  ?
	--
	vuman-p21
	}}}
find 3rd(!!) next search-match(**!)
{{{
	3n
	--
	vuman-p21
	}}}
Star|Hash-search(=search word under cursor)  (incl: 'search no 3 next cursor-word' (***(*)) @
{{{
	*  #   3*
	\v<word>
	--
	vuman-p22
	}}}
	----
	----
c-g: 'Column + Screen column' @T
{{{
	eg. "col 2-9" as output fr. c-g
	 --
	col. (eg. 2)			char.num. for cursor-pos.
	screen-col. (eg. 9)		'absol. char.num.'(=including leading spaces) for cursor-pos.
	--
	vuman-p20
	}}}
[[alw. keep a few lines of context ar. cursor]]
{{{
	'scrolloff' (*)
		# ie. "scroll-offset"
	--
	vuman-p21
	}}}
'search partial word (under cursor)'  (ie. 'star-word as whole or partial of words')
{{{
	g*  g#
	--
	vuman-p22
	}}}

Settings: Find where y. vimrc file is (=incl. where vim expects to find it) [****]
{{{
	:scriptnames		#=which scripts are read at startup
	:version
		:edit $VIMRC   p35
	--
	vuman-p23,p35
	}}}
mark-list auto-marks: cursor pos. bef. last jump || cursor pas. wh. last editing the file (**!) @
{{{
	`
	"
	--
	vuman-p26
	}}}
	----
	----
List all Jumps (*!)
{{{
	:jumps
	--
	vuman-p25
	}}}
jump-list notation: mark in list for last used place/entry (**) @T
{{{
	'>'
	--
	vuman-p25
	}}}


Ch. 4 - Making small changes (in Vim)

	----
	----
Op.+motion--example
{{{
	dw  =2j  d4w  d$
	  #='type an operator, type a motion-command'
	--
	vuman-p27
	}}}
'change whole line' (**)
{{{
	cc  S
	  #uman says cc should keep leading indent of line (=??)
	--
	vuman-p28
	}}}
((replace 'word' w. x:es || replace 'word' w. a newline (*!) ))
{{{
	4rx
	4r<Enter>
	--
	vuman-p28
	}}}

[swapping two words]
{{{
	dwwP
	daw + f p
	--
	 ..
	}}}
	----
	----
'the '.'-repeat does not work w. ___'
{{{
	u   c-r   :-cmds
	--
	vuman-p29
	}}}
(change one line into 5 exact copies)
{{{
	yy + 4p
	dd + 5P  #advantage: 
	--
	vuman-p31
	}}}
gp vs gP (????) @@ @@
{{{
	(=appears to be contextual in some way(??))
	  (=cursor sometimes lands on paste-line, sometimes after (!!))
	}}}

Example of Modeline Syntax (***!!) @@
{{{
	vim:tw=78:ts=8:ft=help:norl:
	  # =can put text bef. and after
	    +all options are set betw. ':'
			--
	# vim: syntax=make
	--
	vuman-p34,p45
	}}}
	----
	----
Activate v-mode + Increm. include more T-Objects (=sentences / paragraphs etc) ****(**!!) @@(@)
{{{
	v + as, as ....
	v + ap, ap ....
	 ****
	--
	vuman-p33
	}}}
extensive/list of all t-objects [**(**)!!]
{{{
	|text-objects|
	--
	vuman-p33
	}}}
List of Operators (d, c, > etc) ***(*) @(@)
{{{
	:h operator
	--
	vuman-p33
	}}}


Ch. 5 - Settings

[Names of the Helpfiles:  Chapter 5 (='settings')  ||  Table of Contents]  ****(!) @@(@)
{{{
	usr_05.txt
	usr_toc.txt
	--
	vuman-p35
	}}}
make vim indent based on prev. line's indent **
{{{
	:set autoindent  (+smartindent ??)
	--
	vuman-p36
	}}}
___vimscript  'if has vms'... @@@(!!)
{{{
	if has("vms")
	  set nobackup
	else
	  set backup
	endif
	--
	vuman-p36
	}}}
set vim to keep 50 command (lines?) and 50 search patt.s in history
{{{
	:set history=50
	--
	vuman-p36
	}}}
	----
	----
vim settings concerns ___
{{{
	settings +
	 options
	 plugins
	 mappings
	 define y. own macros
	--
	vuman-p35
	}}}
(set so curr. cursor-pos. is showed in lower right corner)
{{{
	:set ruler
	--
	vuman-p36
	}}}
[set so vim echoes cmd-char.s, until input is complete] **
{{{
	:set showcmd
	--
	vuman-p36
	}}}

___vimscript  mapping = search v-text (=like visualstar) in c-files (*!)  #includes :exe, functions (etc) ** @@
{{{
	vnoremap _g y:exe "grep /" . escape(@", '\\/') . "/ *.c *.h"<CR>
	--
	vuman-p37
	}}}
___vimscript  vimscr. 'or' (**)
{{{
	if &t_Co > 2 || has("gui_running")
	  syntax on
	  set hlsearch
	endif
	--
		+see usr_41.txt
	vuman-p37
	}}}
'minimal vimrc-file' @
{{{
	set nocompatible
	  .
	filetype plugin indent on
	  ='switches on three clever mechanisms'
		- filetype detection
		- using filetype plugin files
		- using indent files
		   (+see 'indentexpr')
	--
	syntax enable   p44
	--
	vuman-p37,p39
	}}}
___vimscript  aucmd(tw=78) for txt-files (****!!(!))
{{{
	autocmd FileType text setlocal textwidth=78
	--
	vuman-p37
	}}}
	----
	----
___vimscript  vimscr. lines  =line continuations (***(!!))  #+AuCmd: Read file +(!!) Jump to '"-mark (if defined) (******(!!!!))
{{{
	autocmd BufReadPost *
		\ if line("'\"") > 1 && line("'\"") <= line("$") |
		\   exe "normal! g`\"" |
		\ endif
	--
	+ |line-continuation|
	--
	vuman-p37
	}}}

adding a plugin to vim (=the 'classic' lowtech way)
{{{
	dropping the file in the plugin-dir.
	 (+(!!) vim has to have been compiled w. +eval-flag)
			|add-global-plugin|
	--
	vuman-p38,p39
	}}}
Getting a global plugin  (=visualstar, manpages(??), etc)  **(!)
{{{
	$VIMRUNTIME/macros
	Github(!)
	vim.org
		|write-plugin|
	( |maillist|
	  |vimball|
	  |getscript|  #=older: 'some plugins can be updated automatically' )
	--
	vuman-p39
	}}}
adding a global plugin 'classicly' (eg. visualstar)  #+tip: organizing the directory
{{{
	mkdir -p ~/.vim/plugin
	cp macros/justify.vim
		.
	  = cp /usr/local/share/vim/vim80/macros/justify.vim ~/.vim/plugin
	--
	.vim/plugin/perl/   #='for all your perl-plugins'
	--
	vuman-p39
	}}}
	----
	----
simple mappings(*): {-surround word w. f5
{{{
	:map <F5> i{<Esc>ea}<Esc>  #=if starts w. cursor at start of word
	--
	vuman-p38
	}}}
List y. curr. mappings (*!)  (='at least for n-mode')
{{{
	:map
	--
	vuman-p38
	}}}
"What is a plugin?"
{{{
	= a vimscript file that is loaded autom. wh. vim starts
	--
	vuman-p38
	}}}
(( pieces of vim standard functionality provided by plugins (=not compiled into vim) +=loaded on startup ))
{{{
	|standard-plugin-list|
		|load-plugins|
	--
	vuman-p39
	}}}
((setting needed to start using the standard filetype plugins in vim))
{{{
	:filetype plugin on
		|vimrc-filetype|
	--
	vuman-p39
	}}}

Dir. in Vims std-dirs that holds global and ftplugins (**)
{{{
	$VIMRUNTIME/macros
	$VIMRUNTIME/ftplugin
	  .vim/ftplugin/
	--
	vuman-p40
	}}}
Add help-file for custom plugin ** (eg.(??) for matchit.vim [=makes '%' jump to matching html-tags(**)])  (****(!))
{{{
	- ~/.vim/doc
	- cp macros/matchit.txt ~/.vim/doc
	- :helptags ~/.vim/doc
	--
	 (+then can use commands like:   :h g%  )
	--
	vuman-p41
	}}}
tips on writing a (local|custom) help file (**)
{{{
	|write-local-help|
	--
	vuman-p41
	}}}
setting / unsetting options in/from the :options window
{{{
	for bool. options:		 enter  (=setting/unsetting)
	for options w. values    Edit opt.val + Enter  (**)
	--
	vuman-p41,p42
	}}}
	----
	----
(the 'stuff_too' example)  (eg. /perl_morefunctions ((or add subdirs)) )
{{{
	stuff_too.vim
	--
	'The underscore is used to separ. the name of the filetype from the rest (which can be anything'
	--
	stuff.vim
	perl.vim
	perl_def.vim		#=can be used to have sever. files for the same filetype (!!)
	perl/header.vim
	--
	vuman-p40
	}}}
More ab.//further reading: (=on filetype plugins etc)  (####)
{{{
	filetype-plugins		=docs for the ftplugins + info on avoiding that mappings cause problems
	load-plugins			=when during startup global plugins are loaded
	ftplugin-overrule		=overruling the settings fr. global plugins
	(write-plugin			how to write a plugin script)
	plugin-details			=more info ab. using plugins, or wh. y. plugins doesn't work
	new-filetype(!)			=how to detect a new filetype
	--
	vuman-p40
	}}}
Finding (+setting) an option (**!)
{{{
	:options		|options|
	  'Move the cursor to a subject and press Enter to jump there'
	  +'press Enter again to jump back(??)'
	--
	vuman-p41
	}}}
Jump to full doc for an option (=fr. the :options win)
{{{
	cursor on brief summary for an option (=above the line with the actual setting)  + Enter
	--
	vuman-p41,p42
	}}}

(some common + useful options etc)

tip: Reset Option you have Messed Up (****(!!))
{{{
	:set iskeyword&
	--
	vuman-p42
	}}}
	----
	----
set|decide which keys can move past the end of a line (*)
{{{
	:set whichwrap=b,s,<,>,[,]
		:h 'whichwrap'
	--
	vuman-p42
	}}}
opt: make tabs visible (**)
{{{
	'list' *
		# shown as '^I'
		 + line end as '$'
	--
	vuman-p42
	}}}
(opt: show spaces and tabs as highlighted char.s (=in col.terminals))
{{{
	'listchars'
	--
	vuman-p43
	}}}
[set larger cmdline-win height] (*)
{{{
	:set cmdheight=3
	--
	vuman-p43
	}}}
    ----

    ----
10
hhjjjkkn

(chapter 6 - syntax highlighting)

( ___vimscript  =syntax highl. on, only if on col.terminal)  #+'conditional' (**)
{{{
	if &t_Co > 1
		syntax enable
	endif
	--
	(or if want to use synt.highl. only in gvim
		=put the 'syntax enable'-line in your gvimrc
	--
	vuman-p44
	}}}
Check/List what lang.s/syntaxes are avail.(***!!)
{{{
	=filenames in VRUNTIME/syntax/ (****)
	(+also in the syntax menu)
	--
	vuman-p45
	}}}
set ftype (eg. for makefile) via modeline (****)
{{{
	# vim: syntax=make
		(=near beg./end of the file)
	--
	vuman-p45
	}}}
(see more: how to tell vim to detect a cert. file type)
{{{
	|new-filetype|
	--
	vuman-p45
	}}}
fix probl: =no detection for cert. file type (*)
{{{
	test setting similar ftype
	or check |mysyntaxfile|
	--
	vuman-p45
	}}}
(syntax coloring =if does not update properly wh. scrolling)
{{{
	c-l  (or for a real fix:)
	:syn-sync
		(+maybe see help for specif. syntax file  eg. tex.vim for TeX)
	(+= :h python.vim  (etc)?)
	--
	vuman-p45
	}}}
	----
	----
(no or wrong colors?  +good terminal)  + ___unix  = setenv, export (****!!)
{{{
	xfree-xterm
	 (+some tips for checking)
	+
	 setenv TERM xterm-color
	 TERM=xterm-color; export TERM
	--
	vuman-p44
	}}}
tip: hard to read coloring (=for syntax coloring **)
{{{
	:set background=dark (/ light)
	 --
	+tip: ='Make sure you put this before the :syntax enable command'
	 (=or the col.s will already have been set)
	--
	vuman-p45
	}}}
('make vim reset the default col.s again')
{{{
	(eg. after (wrongly?) having set bg-col.s)
	--
	 :syntax reset  (!!)
	--
	vuman-p45
	}}}

show what most often used col.combin.s look like  ((***(*)))
{{{
	:runtime (!!) syntax/colortest.vim
	--
	vuman-p46
	}}}
(Turn on syntax coloring for only certain buffers (!) )
{{{
	:syntax manual  #=syntax on, but have to set manually for each buffer
	  +
	:set syntax=ON
	--
	vuman-p46
	}}}
print file (**)
{{{
	:ha
	  (+options  =  'printdevice' (+ 3 more))
	--
	vuman-p47
	}}}
Print only certain lines (**!!)
{{{
	v-mark + :ha
	--
	vuman-p47
	}}}
Convert txt-file to html (**!!)
{{{
	:TOhtml
	:so $VIMRUNTIME/syntax/2html.vim
	  +save w.  :w main.c.html  (or the like)
	(+del html-file (=local) wh. done)
	--
		|2html.vim|
	--
	vuman-p47
	}}}
	----
	----
Edit/Write own Col.scheme  (**)
{{{
	- sel. a pre-existing match + copy it
	- edit the col. scheme file
	--
	'For example, to make comments green:
	  :highlight Comment ctermfg=green guifg=green
	--
	vuman-p46
	}}}
(('disable syntax coloring for a moment (=until rereads a file))
{{{
	:syntax clear
	 ( or :syntax off )  #=turn off completely
							+removes for all buffers
	--
	vuman-p46
	}}}


Ch. 7 - Edit sever. files (**)

Hide (=put away) active file w. changes +/so can edit other file (**)
{{{
	:hide edit foo.txt
	--
	vuman-p48
	}}}
Going forwards/backwards in the Buf.list (+even if curr. file has changes) (**)
{{{
	:n  :prev
	:n!		#even if curr. file has changes
	--
	:wn  :wprev   (**)
	--
	vuman-p49
	}}}
see list of files you are editing **(**)
{{{
	:args
	--
	vuman-p49
	}}}
Set files to write autom. as changing buffers (**(!!))
{{{
	:set autowrite
	--
	vuman-p50
	}}}
	----
	----
discard changes in active file || re-read the open file fr. disk
{{{
	:e! file.txt
	--
	vuman-p48
	}}}
go to ends of buf.list (**)
{{{
	:last   :first
	  #= no :wlast / :wfirst   cmds
	--
	vuman-p49
	}}}

Define/redefine args-list **!!
{{{
	:args f3.txt f4.txt f5.txt
	:args *.txt   (etc)
	--
	vuman-p50
	}}}
How long does "-mark persist ***(**!!)
{{{
	=until leaving the file   ******
	--
	vuman-p51
	}}}
keep|produce an orig-file ****(!!)  #=so don't get overwritten contin. (=until does it manually)
{{{
	:set patchmode=.orig
	--
	vuman-p52
	}}}
	----
"change name of file, but don't write yet" (**(/??))
{{{
	:file move.c
	--
	vuman-p54
	}}}
	----
Quickly jump betw. curr. and the alt(ernate)-file **!(!)
{{{
	c-^
		[+note: does not change position =the notion of where you are in the list]
	--
	vuman-p50
	}}}
tip: Go back to Exact Pos. of cursor (=when opening a file again) ****(!!)
{{{
	`"
	--
	vuman-p50
	}}}
back to exact pos. of last change (!!)
{{{
	`.
	--
	vuman-p51
	}}}
make vim produce backup files  (+set extension to eg. '.bak)  =not '~' as def.)
{{{
	:set backup
		(=will also be produced wh. 'writebackup' is set
		 but only transiently)
	:set backupext=.bak
		(eg. produces file.txt.bak for file.txt)
	--
	vuman-p51
	}}}
specify in which dir to write backup-files (eg. if don't want same dir as the file, as usual) (***(!!))
{{{
	:set backupdir=dir/subdir/
	--
	vuman-p51
	}}}
open file as view only (*)
{{{
	vim -R file    view file
	:w!  to write anyway
	--
	if really want to forbid editing of file
		vim -M file
	(+remove protection for even these files
		:set modifiable
		:set write
	--
	vuman-p53
	}}}


Ch. 8 - Splitting Win.s

leave only one(=the active) split|win  (**!!)
{{{
	:only
	  # (+other changed win.s will not be closed)
	--
	vuman-p56
	}}}
open new empty split  (***(*))
{{{
	:new
	:vertical new
	 --
	:vsplit
	:vertical split
	--
	vuman-p56
	}}}
make split-win size 3  =exactly 3 lines high (**!!)
{{{
	:3split file2
	--
	vuman-p56
	}}}
set split-win to exactly 4 lines height (****)
{{{
	4 c-w _
	--
	vuman-p56
	}}}
maximize a split-win (****!)
{{{
	c-w _
	--
	vuman-p56
	}}}
vert. split size-commands (****!)
{{{
	c-w _ == c-w |
    --
	c-w > / c-w <
	decrease by 4 width     4 c-w <
	--
	vuman-p56
	}}}
	----
	----
splitting  closing a win  (=ex-mode)
{{{
	:split
	:close
	--
	vuman-p55
	}}}
increase / decrease height of split-win  (******)
{{{
	c-w + / c-w -
	decrease by 4 lines     4 c-w -
	--
	vuman-p56
	}}}

set minim. desired / hard minim.(??) height for new split-win.s  (etc)
{{{
	'winheight', 'winminheight'
	--
	 = +
	'winwidth'  'winminwidth'
	--
	vuman-p57
	}}}
set so vim autom. equalizes winsizes wh. opening new split-win.s (*****)
{{{
	'equalalways'
	--
	vuman-p57
	}}}
moving betw. win.s  (****)
{{{
	=usual  (c-w  + h j k l)
	--
	Move to Top / Bot. Win ****
		c-w t / c-w b
	--
	vuman-p57
	}}}
List: More commands to move betw. splits etc. ***(*)
{{{
	|Q_wi|
	--
	vuman-p57
	}}}
What happens wh. using c-w K/J on v-split win.s? *****
{{{
	=moves to top / bot. of win-scheme  +  fills up entire width (**!!)
	--
	vuman-p58
	}}}
'commands for all windows' (=quit, write, write + quit)  **
{{{
	:qall
	:wall
	:wqall
	--
	vuman-p58,p59
	}}}
	----
	----
(splitting vertically)  +'can be done|applied to other commands'
{{{
	:vsplit
	:vsplit two.c
		# 'the vertical separator'
	:vnew
	  --
	='the :vert command can be inserted before another cmd(!!) that splits a win'
	--
	vuman-p57
	}}}
(quit all win.s + throw away changes)
{{{
	:qall!
	--
	vuman-p59
	}}}

make vim open one split / vsplit for all files  =For files alr. Open(!) in Vim (*****)
{{{
	:all  //  :verticall all
	--
	vuman-p59
	}}}
start vimdiff on file and its backup (**)
{{{
	gvimdiff main.c{~,}
	   # =scrollbind is usually set by default
	--
	vuman-p59
	}}}
start diff. wh. already inside vim +(!!) apply a patchfile (**(**)) (w. one(!) patch)
{{{
	:e main.c
	:vert diffpatch main.c.diff
	  =applies the patch to the copy of the file open in vim(!!)
	--
	= :w to write out  if looks ok
	--
	vuman-p60
	}}}
	----
	----

Jump to next/prev change ('=if has disabled folding'(=??))   (******)
{{{
	]c  [c
	--
	vuman-p61
	}}}
paste | pull missing lines fr. either file  (**)
{{{
	cursor on missing / other line
		do
		dp		=puts line onto same line missing line in other win.
			='puts this (cursor) line into other win
	--
	vuman-p61
	}}}
split-variants of commands (*******)
{{{
	:tag  =  :stag
	c-^   =  c-w c-^
	--
	vuman-p61
	}}}
options to make new(=split)win.s appear below/to the right (**!)
{{{
	'splitbelow'  'splitright'
	--
	vuman-p61
	}}}
Wh. splitting: =prepend modifier to specif. where win. should appear (****!)
{{{
	:leftabove cmd
	 (+aboveleft, rightbelow, belowright, topleft, botright)
	--
	vuman-p62
	}}}
Tip: 'You can put ":tab" before any Ex-command that opens a win'  (*****!!)
{{{
	:tab help gt
	--
	vuman-p63
	}}}
close all tabs except current ***(**)
{{{
	:tabonly
	--
	vuman-p63
	}}}
	----
	----
update view/files open  =after having put or obtained changes
{{{
	:diffupdate
	--
	vuman-p61
	}}}
edit file2 in tab ***(*)
{{{
	:tabedit file2
	:tab split file 2   #=same thing
	--
	vuman-p62
	}}}

ch. 9 - the gui

set toolbar to never (=fr. the vimrc file)
{{{
	:set guioptions-=T
		(:h 'guioptions')
	--
	vuman-p65
	}}}
	----
	----
Titlebar char.s indicating file status (***(!!))
{{{
	-		cannot be modified
	+
	=		read-only
	=+
	--
	vuman-p64
	}}}
((add left scrollbar (=for vsplits)))
{{{
	:set guioptions+=l
	--
	vuman-p65
	}}}
'curr. sel.' vs "real clipboard"  ((+(!) klipper))
{{{
	"*
	"+
	--
	vuman-p66
	}}}
('sel.mode')
{{{
	=like v-mode + goes to ins.mode wh. one starts writing
		( :set selectmode+=mouse
		( + 'has to use s-right etc for selection )
	--
	vuman-p67
	}}}


Ch. 10 - Making Big Changes (**)
(eg. changes that can be repeated / can affect large portions of the text (+using external programs to do really complicated changes))

Tip: Yanking many(!) lines into a register (****(!!))
{{{
	- "ayy
	- "Ayy
	 (etc) **(**)
	--
	vuman-p70
	}}}
	----
	----

Substitute **!!

:s only on one line, eg. line 54(**)  (=can be run w. cursor on other lines)
{{{
	:54s/ ....
	--
	vuman-p71
	}}}
:s on specif. range (=of lines) **
{{{
	:.,$s/ ....
	:1,5s/ ....
	--
	vuman-p71
	}}}
Scroll viewport up/down while in ':s///gc'-mode (***(*))
{{{
	c-y / c-e  **
	--
	vuman-p71
	}}}
[Concerning Ranges and 'default ranges' **]
{{{
	if cmd works on 1 line by def.  #eg. :subst, ed
	 =give range(etc) to expand affected area
			  :1,5s/this/that/g
			..
	if cmd works on whole file by def.  #eg. :write, :global, sed
	 =give range/line address to restrict(!) affected area
			  eg. :.w file2
	--
	vuman-p72
	}}}
write all exc. line 1 to a file (**!)
{{{
	:2,$w file2
	--
	vuman-p72
	}}}
	----
	----
:s only on curr. line (***(*))  (+only first occurance)
{{{
	:s/ ....
	--
	vuman-p71
	}}}
(:s on whole file (*))
{{{
	:%s/ ....
	:0,$s/ ....
	--
	vuman-p71
	}}}
:s/.../.../p  (***)
{{{
	=causes :s to echo last line it changes (**)
	--
	vuman-p71
	}}}
((tip: search-patterns w. slashes || global-command w. subst.part as sec. part)) ****
{{{
	:s:/::
	:s+/++
	 --
	:s+one/two+one or two+
	   (or search w. '?' (=backwards))
	 --
	:g+//+s///gc	#and the like
	--
	vuman-p72
	}}}

Tut: Replace 'grey' w. 'gray' "only in this book-Chapter"  (****!!)
{{{
	:?^Chapter?, ....
		.
	+ /Chapter/-1
	  /Chapter/+1
	--
	vuman-p72
	}}}
Specifying range (=including adding/subtracting (**!!)) ****
{{{
	:.+3,$-5s/ ....
	--
	vuman-p73
	}}}
Specif. Range: curr. line +4  =5 lines (*****)  @@!!
{{{
	5:
	  (=gives :.,+4)
	--
	vuman-p73
	}}}
	----
	----
range:  fr. mark t  to mark b
{{{
	:'t,'b
	--
	vuman-p73
	}}}
(((note about v / c-v--marking  (=parts of lines) + range-commands )))
{{{
	=still applies to whole lines, but that may change in later versions of vim
	--
	vuman-p73
	}}}
range: fr. (=inclusive) end of last v-mark, to end of file  (**!)
{{{
	:'>,$
	--
	vuman-p73
	}}}

Global **(!!)

	----
	----
The Superb Global-Command (****)
{{{
	:range g//cmd  *****
		#the command run by global
		 has to be an ex-command
		 (=run n-mode commands w. :normal abc) ****
	--
	vuman-p73,p74
	}}}
Make edits at End(!) of all v-marked Lines (**(***!))
{{{
	c-v--mark strip (eg. in mid of all lines)
	 + $
	((+note: remains active until moves horiz.
	   =j/k keeps the mode, but h stops it (!!) ))
	--
	vuman-p74,75
	}}}
the '~' short lines--examples + c-v--mode I / A  (=see more)
{{{
	test / see more
	--
	vuman-p74
	}}}
(include char.s beyond end of line in v-blocks) (**(*))
{{{
	'virtualedit'  (ch. 25 etc)
	--
	vuman-p76
	}}}

Shift right part of lines =Form a into a 'Column 2' (*****!)
{{{
	c-v--mark + >
	--
	vuman-p76
	}}}
set indent-shifting of blocks to 4 spaces (**** (!!!!))
{{{
	:set shiftwidth=4
	--
	vuman-p76
	}}}
Joining lines (=basic, fixed, num. of spaces at 'joint') (***(*))
{{{
	J
	 'joinspaces'
	v-mark lines + J
	 join lines w.out affecting wh.space
			gJ
	--
	vuman-p76
	}}}
read in extern. file to below line 1 (****)
{{{
	:1r patch
	--
	vuman-p77
	}}}
read in extern. file to above line 1 / below last line (****)
{{{
	:0r patch
	:$r patch
	--
	vuman-p77
	}}}
:1,10r patch  =where in file does text get inserted?  (***)
{{{
	=puts text below line 10
	--
	vuman-p77
	}}}
write from curr. line to end  out to file2
{{{
	:.,$w file2
	:.,$w! file2  #=if file alr. exists
		(note!! not  :.,$w !cmd )
	--
	vuman-p77
	}}}
Tut: collecting =writing lines out into file  (=collecting incrementally)
{{{
	:.w collection		#write out first line
	:.w >> collection   #write out next line (=appending instead of clobbering)
	--
	vuman-p77
	}}}
	----
	----
pulling in content fr. another file (**!!)
{{{
	:read patch
	--
	vuman-p76
	}}}
(write all lines of buf. to file)(*)
{{{
	:w file
	--
	vuman-p77
	}}}

formatting text (**!!)  (=line length etc)

specify max. length of lines (=longer gets wrapped, or reformatted to fit  if using gq(**))  (*****)
{{{
	:set textwidth=72
		(=vim does not recalculate lines autom.  =have to be reformatted w. gq if changed, or if changing the val. for tw again)
	  gqap
	  gqj
	  gggqG
	  V + gq  (etc)
	--
	vuman-p77,p78
	}}}
(recap: check curr val. for the option textwidth (!!)  (***(*)) )
{{{
	:set textwidth
	--
	vuman-p77
	}}}
[some commands for changing case etc. (****)]
{{{
	gUw  guw
	guu (=short for gugu) **
	gUU  g~~
	--
	vuman-p78
	}}}
	----
	----


using external programs to filter text (etc) ***(*)

Filtering/Processing text w. an External Command (****(**))
{{{
	(='vim can do just ab. anything, but sometimes it's easier to use an external command')
	--
	!{motion}{program}
	   # 'filter' text  (=process specified block + replace w. processed version)
	--
	vuman-p78
	}}}
Sort line 1 through 5 (=cursor on line 1) ****(**)  #+relative version ='fr. cursor line +4 lines'  (******)  @@!!
{{{
	!5Gsort<Enter>
	5!!
	--
	vuman-p79
	}}}
replace curr. line w. output fr. the cmd 'date' (**(**))
{{{
	!!date<Enter>
	--
	vuman-p79
	}}}
Insert utc-formatted string fr. date(=curr. date and time) as First Line (of buffer)  *****(!!)
{{{
	:0r !date -u
	--
	vuman-p79
	}}}
using the date -u example: Replace lines vs Output filtered lines as 'report' (****(!!)**)
{{{
	:.!date -u		=  !!date -u
	:.r !date -u
	--
	vuman-p80
	}}}
Count words in the curr. file (=using the external utility 'wc') (*****)
{{{
	:w !wc
		# +watch out:  :w! wc   (=forcibly writing file 'wc' into curr. dir(!!))
	--
	vuman-p80
	}}}
	----
	----
read list of contents of curr. dir into the file (**) (=unix | win)
{{{
	:r !ls
	:r !dir
	--
	vuman-p79
	}}}


recover files (=after crash etc) **

recover not named file from a vim-crash (**(**))
{{{
	vim -r ""
	  #=must be positioned in the right dir.
	--
	vuman-p82
	}}}
find a file's swap-file (**(!!))
{{{
	(=normally stored in same dir as the file)
	 (+in that case)
		..
	go to the orig-file's dir  +
		vim -r
	(+will prob. look down through dir-tree if cant find it in curr. dir)
	--
	vuman-p82
	}}}
start recovery of file.txt fr. its swapfile (**(!))  (+'can also be handy when ...')
{{{
	vim -r .file.txt.swo
	--
		=can also be handy wh. file is not in the same directory as its swap-file **(**)
	--
	vuman-p82
	}}}
[name-pattern vim recogn.s as a swap-file (**(*))]
{{{
	*.s[uvw][a-z]
	--
	vuman-p82
	}}}
'Vim tries to find the swap file by searching ___'
{{{
	= searching the dir.s in the 'dir' option
	(looking for files matching the "filename.sw?"
	--
	vuman-p82
	}}}
['the recover-menu']
{{{
	o pen readonly
	e dit the file anyway
	r ecover the file
	q uit
	a bort  (=like quit but also aborts further commands)
	d elete the swap file
		(or if dont get that menu
		  = have to run  :recover  manually )
	--
	vuman-p84
	}}}
if sure don't want to see the 'recov'-menu (!!)
{{{
	add the 'A' flag to the 'shortmess' option
	--
	vuman-p84
	}}}
some see more:s (ab. recovery)
{{{
	|swap-file|
	|:preserve|		(=manually flushing the swapfile to disk)
	|:swapname|		=see the name of the swapfile of curr. file
	  ...
	  ...
	'swapsync'
	'directory'		=list of dir.s (where y. want to store y. sw-files)
	'maxmem'
	'maxmemtot'
	--
	vuman-p85
	}}}
	----
	----
basic recovery (**)
{{{
	vim -r help.txt
	  ..
	:w file.txt.recov
	:e #
	:diffsplit file.txt
		#+'watch out for': =for orig. file
		 to contain a more recent version' (etc)
	--
	vuman-p81
	}}}
((checking the pid of a file (eg. 12559)))
{{{
	(=see if another vim instance is editing the file etc) (??/(*))
	--
	vuman-p83
	}}}
'If the date of the file is newer than the date of the swap file'
{{{
	=was changed after the crash, or  saved bef. the crash but after last write of the swp-file  (=can del. the swp-file)
	--
	vuman-p83
	}}}
('the 0 bytes case')
{{{
	(=maybe see more)
	--
	vuman-p84
	}}}


Ch. 12 - Clever Tricks **(*)

Replacing a Word in several Files ****(*) @@(!)
{{{
	- start file-list
	- record the wanted substitution (= w. eg. g-flag at end)
	- :wnext
	- stop macro + play back w. @q  (=to test and verify that doesn't produce err.mess.s etc)
	- run w. 99@q  (or the like)
	--
	vuman-p86,p87
	}}}
Substitute in Several files (=w. a macro): Make sure 'No matches found' is not an Error (*****)
{{{
	:%s/\<GetResp\>/GetAnswer/ge
	  # =the e-flag to :s (****)
	--
	vuman-p87
	}}}
the \0 backreference
{{{
	=stands for 'the whole(!)' matched pattern
	--
	vuman-p87
	}}}
+Info on more Special Items in a substitute command (**)
{{{
	|sub-replace-special|
	--
	vuman-p87
	}}}
The 'sort block until next blank line, w. external sort'-example (****)
{{{
	/^OBJS   #=matching pattern on + going to first line of block
	j
	:.,/^$/-1!sort
		(or simply sel. w. v-mode + :!sort)
	--
	vuman-p88
	}}}
Reverse lines in a Block (***(*)) @@(@!)
{{{
	mark above first line w. mt
	 + move to last line and type:
			:'t+1,.g/^/m 't
	--
	vuman-p88
	}}}
count words in file
{{{
	g c-g
		(+see |count-items|)
	--
	vuman-p88,p89
	}}}
	----
	----
Change Doe, John--namelines to John Doe etc *****(**)
{{{
	- match anything but a comma (+rec 1)
	- match a comma
	- match rest (+rec 2)
	     :%s/......./\2 \1/
				 ='backreferences'
	--
	vuman-p87
	}}}
(reverse line order)
{{{
	:g/^/m 0
	--
	vuman-p88
	}}}

Show manpage for cmd-word under cursor
{{{
	K
	--
	+trick to make the m-page appear in a vim-win  (otherwise  =cannot see both the m-page and(!) the text you're writing)
	   ..
	- load the man filetype-plugin
		:runtime! ftplugin/man.vim
		  #+put in your vimrc if will use it often
	example use
		:Man csh
		:Man 3 echo  #=search in specific sections(!)
	--
	vuman-p89
	}}}
Man: jump to manpage-ref in text (à la "word(1)")
{{{
	follow the hyperlink    = c-]
	--
	vuman-p89
	}}}
display manpage for word (in text) under cursor
{{{
	\K  (=leader K)
			(eg. the strstr(1) example)
	--
	vuman-p89
	}}}
Edit all files Containing Cert. Word|String (eg. a variable) ****(*!!)
{{{
	vim `grep -l frame_counter *.c`
	--
	vuman-p90
	}}}
Search set of files for Cert. String  (=fr. within vim) **(**) @@(!)
{{{
	:grep error_string *.c
		#+ set the program (=grep, ag etc)
		  by setting 'grepprg'
	   ..
	+uses the qf-win
		=can use
	:cn / :cN
	--
	see all matches and where they are
		:clist
	--
	+fr. the hgrep examples at top:
	 :cfirst  |  :clast
	 :copen  |  :cclose  (??)
	--
	vuman-p90
	}}}
	----
	----


Ch. 20 - Typing Cmdline commands Quickly
	( - short cmd-names  - q:  - @:  - tab(etc) completion )

run a cmd-line  =wh. cursor not at end of line (!!)
{{{
	just press enter / c-m
	--
	vuman-p92
	}}}
(navigating in the basic cmd-lines)
{{{
	c/s-arrows
	to beg. / to end    c-b / c-e  (**)
	  (+using mouse)
	--
	vuman-p92
	}}}
[[ex-cmdname abbrev.s tips / best practices]]
{{{
	- :function can be shortened to :fu
	  but :fun is better (or :func)
	- write full/long names in vim scripts
		(except for some very common abbrev.s
			=:w, :r, :s, :g
	- a potent. confusing one:
		:end (=can stand for
			:endif, :endwhile, :endfunction
		=therefore, use the full name(!!)
	--
	vuman-p93
	}}}
	----
	----
editing cmd-line/in insert-mode: del a word / to beg. of line **(!!)
{{{
	c-w // c-u
	--
	vuman-p92
	}}}
(ins-mode/cmd-line: toggle overstrike mode (**))
{{{
	ins
	--
	vuman-p93
	}}}
([ vi compat. + 'cpoptions' ])
{{{
	=in classic vi: esc executes cmd-line
	(tip: but(!) c-c always works)
	--
	vuman-p93
	}}}

short option names (eg. for 'autoindent')
{{{
	one canonical abbrev.
		(=every one only has one short version that works)
	:set autoindent
	:set ai
	--
	vuman-p94
	}}}
Cmdline Completion (***!!)
{{{
	=use Tab (+cycles through alternatives)
	  // c-p (=go back) ****
	--
	vuman-p94
	}}}
Edit / Inspect val. for an Option (eg. iskeyword) (****) @
{{{
	=complete w. Tab after '='
    :set iskeyword?
    :set iskeyword
	--
	vuman-p95
	}}}
Complete word to Longest Unambig. String (**(***))
{{{
	c-l
	--
	vuman-p95
	}}}
Change Which Completion (=list, longest, cycle (etc)) ***(*!) @(@) @@
{{{
	'wildmode'  (+'wildmenu')
	--
	vuman-p95
	}}}
completion =specify less important files (=will appear at end of completion-lists) || files not to list at all (!!) @@
{{{
	'suffixes'
	 'wildignore'
	+read more  |cmdline-completion|
	--
	vuman-p95
	}}}
	----
	----
List matches of (eg. Option) completion **(!!)  #=instead of completing/cycling through
{{{
	c-d
	--
	vuman-p95
	}}}

Histories (=besides ':' and '/' | '?'
{{{
	expressions(??/**) +
	input-lines for the input()-function
		(see also  |cmdline-history| )
	--
	vuman-p96
	}}}
display | list :-history (**(**))
{{{
	:history
	--
	vuman-p96
	}}}
	----
	----
display | list /-history (**(**))
{{{
	:history /
	--
	vuman-p96
	}}}


Ch. 21 - Go away + come back
	( - suspend  - shell  - viminfo  - sessions  - views  - modelines )

recap: execute external program + read its output **(*)
{{{
	:r !{program}
	--
	vuman-p98
	}}}
recap: execute ext. progr. +(!!) send text to its input (***(*))
{{{
	:w !{progr.}
	--
	vuman-p98
	}}}
(recap: filter text through ext. progr.) @(@)
{{{
	:[range]!{progr.}
    (=SUMMARIZE/COLLECT ALL WAYS TO SPECIFY THE RANGE(****))
	--
	vuman-p98
	}}}
	----
	----
suspend + resume (vim)
{{{
	c-z  +  fg
	 :suspend   #=if c-z does not work, etc
	--
	vuman-p98
	}}}
+(!) (diff. betw. executing ext. progr. // filtering text w. ext. progr.) @@(@)
{{{
	:!progr
		vs
	:[range]!progr
	--
	vuman-p98
	}}}
(tip: executing several ext. progr.s in a row)
{{{
	=start shell w.
	:shell
	--
	vuman-p99
	}}}

Setting a Custom viminfo(=option) string (=how many files to save marks for, etc etc) ****
{{{
	:set viminfo='1000,f1,<500
		..
	  how many files to save marks for
	  whether to save global marks
	  how many lines are saved for each of the reg.s
	    ..
	  :		num. of lines fr. cmdline hist
	  @		num. of lines fr. input-line hist
	  /		num. of lines fr. search hist
	  !		'global var.s that start w. uppercase letter + dont contain lcase letters' (??)
	  h		disabled hlsearch
	  %		the buf.list
	  c		convert the text using 'encoding'
	  n		name used for the viminfo file (=last option)
	--
	  :h 'viminfo'    |viminfo-file|
	--
	vuman-p99,p100
	}}}
Restore directly last edited buffer (***(**))  #or other recently edited buf.s
{{{
	'0
	  (+ '1 -- '9)
	(see :marks for the list)
	--
	vuman-p100
	}}}
List of recently edited files (=beyond the marks list (which lists files exited(!) by vim =last edited in a session))  ***(**)
{{{
	:oldfiles
		+  :e #<2   =for file w. no 2
	--
	:split #<3
	:tabedit #<3  ****
	--
	vuman-p100
	}}}
Alt. version for oldfiles (**)
{{{
	:browse oldfiles
	  ..
	q + num. (eg. 2) + Ent.
	--
	vuman-p100
	}}}
[more info ab. :oldfiles **(***)]
{{{
	 :h oldfiles    |v:oldfiles|   |c_#<|
	--
	vuman-p100
	}}}
	----
	----
Storing history etc info betw. Sessions in Vim (= 2 main histories, text in registers, marks for various files, the buflist, global var.s) ****(**!)
{{{
	= save (+recall) viminfo file
	--
	vuman-p99
	}}}

save + restore  =eg. for exchanging register contents betw. two instances of vim @
{{{
	:wviminfo! ~/tmp/viminfo
	+ use  :rviminfo! ~/tmp/viminfo  to restore
	--
	vuman-p101
	}}}
Tip: wviminfo and rviminfo can be used to ____ (****)
{{{
	='make a directory full of viminfo files, each containing info for a different purpose.'
	--
	vuman-p101
	}}}
create a session (named vimbook.vim) + restore it  (**)
{{{
	:mksession vimbook.vim
      .
	vim -S vimbook.vim
	:source vimbook.vim
	--
	vuman-p101
	}}}
what is restored for sessions [**(*)]   # +add to restore size of the vim-win (**(!)) @
{{{
	- the win.s (+positions and sizes)
	- mappings
	- option values
		+what is set in 'sessionoptions'
	--
	def. is  "blank,buffers,curdir,folds,help,options,winsize"
		blank		keep empty wins
		buffers		all buf.s (=not just ones in win)
		curdir		the curr. dir
		folds		folds (=also manually created ones)
		help		the h-window
		options		all options and mappings
		winsize		=win-sizes
	--
	  :set sessionoptions+=resize
	--
	vuman-p101
	}}}
tips (=what to use sessions for)
{{{
	- when working on (+easily returning to) diff. projects
	- saving a window setup|layout you like
	--
	vuman-p102
	}}}
Tut: Save a session as Secret + Reopen the Boring-session  (****) (@@)
{{{
	:wall
	:mksession! ~/.vim/secret.vim    #=overwrites prev. session
	:source ~/.vim/boring.vim
	--
	vuman-p102
	}}}
tut: save nice window setup (=help, netrw etc)  #+netrw: open file in the other (=blank already open) win
{{{
	:help
	CTRL-W w
	:vertical split ~/
		.
	:mksession ~/.vim/mine.vim
		.
	vim -S ~/.vim/mine.vim
	--
	  netrw 'open in other win'   O // dclick
	--
	vuman-p102
	}}}
	----
	----
if no ! given to :wviminfo (**)
{{{
	info is merged into old file
	 (=only not already set information is saved)
	--
	vuman-p101
	}}}
using Sessions (*):  option controlling what is remembered
{{{
	'sessionoptions'
		= file list, win. layout, global var.s, options (etc)
	--
	vuman-p101
	}}}
(Able to use session-files on both unix/windows **)
{{{
	consider adding "slash" and "unix" to 'sessionoptions'. The session files will then be written in a format that can be used on both systems.
		.
	This is the command to put in your vimrc file:
		.
	:set sessionoptions+=unix,slash
		(=unix can't read ms-win format session files)
	--
	vuman-p102,p103
	}}}

sessions +(!(!)) viminfo () @@
{{{
	keeping separ.
	=switch sessions  but keep cmdline-history, text in registers (etc)
	--
		+if(!!) want to keep together(**)  =store together
	:mksession! ~/.vim/secret.vim
	:wviminfo! ~/.vim/secret.viminfo
		..
	:source ~/.vim/secret.vim
	:rviminfo! ~/.vim/secret.viminfo
	--
	vuman-p103
	}}}
Views (=unnamed  +advantage with) ** @
{{{
	=store :number set, some defined folds, etc  (for a certain win/buf)
	--
	:mkview   (=the unnamed one)
	:loadview
	   .
	:mkview 1   (=1-9)
	:loadview 1
	--
	 advant:  is stored with its file (=dont have to keep separ. file  **)
	--
	vuman-p103
	}}}
named View (+advantage with)  **
{{{
	:mkview ~/.vim/main.vim(info)
    +  :so ~/.vim/main.vim(info)
	--
	  adv: =loading the view autom. loads its associated file (**)
	--
	vuman-p104
	}}}
Keeping specific options (eg. shiftwidth etc) w. the file **(**) @@(!) @
{{{
	=Modeline (****) [=often commented]
	/* vim:set shiftwidth=4: */  (':' betw. posts)
	   [first/last five] (+tip (=header or bot. for txt-files) ]
	--
	  format:  any-text vim:set {option}={value} ... : any-text
	--
		|modeline|
	--
	vuman-p104
	}}}
string|part that makes modeline recognizable to vim (**(*)) @@
{{{
	'vim:'
	'^vim'    =at beg. of line
	--
	vuman-p104
	}}}
	----
	----
specif. num. of modelines (=in how many lines at top/bot to look for m.lines) @
{{{
	:se modelines=10
	--
	vuman-p104
	}}}
(tip: turning off modeline + when to use)
{{{
	:se nomodeline
	  #when working as root on unix / admin on win
	--
	vuman-p104
	}}}
including ':' in modeline-string
{{{
	\:
	--
	  // vim:set textwidth=72 dir=c\:\tmp:  use c:\tmp here
	--
	vuman-p104
	}}}

netrw help (=f1) shows:  (****)
{{{
	=list of commands
	+ show list w. :h netrw-browse-maps  (****)
	--
	vuman-p107
	}}}
Open files (from netrw) **(**) @
{{{
	Ent		open file in curr. win
	o		hsplit win + open file
	v		vsplit --"--
	p		use the |preview-win|
	P		edit in the -"-
	t		open file in new tab
	--
	vuman-p107
	}}}
controlling netrw browsing display (=way of showing the file names)  ** @@
{{{
	i (listing style (ie, thin, long, wide, tree****)
	s (Sorting**)
	r(everse sorting)
	--
	vuman-p107
	}}}
more commands: change curr.dir to browsing-dir, rename file*, del. file|dir *, make/goto bookmark * @@(@) @
{{{
	c(urr dir =browse dir)    +see g:netrw_keepdir  (!!)
	R(ename)
	D(el)
	mb gb **
	--
	vuman-p107
	}}}
comprehensive list of curr netrw-settings  (**(*))
{{{
	:NetrwSettings
	--
	vuman-p107
	}}}
	----
	----
+explore via ftp, scp etc (*)
{{{
	:Explore ftp://somehost/path/to/dir/
	:e scp://somehost/path/to/dir/
	--
	vuman-p108
	}}}
[[netrw top info]]
{{{
	- name of browsing tool + version
	- name of browsing-dir
	 - method of sorting (= name, time, size)
	- name sorting (= dirs first, then *.h files ......)
	- getting help (eg. f1)  + abbrev.d list of avail. commands
	- '..'
	--
	vuman-p106
	}}}

Change dir. for only one win|buf. (**(*)) @
{{{
	:lcd dir  (**)
	--
	vuman-p108
	}}}
using normal :cd for a win using a diff. (=winlocal) dir @
{{{
	= goes back to shared dir (?))
	--
	vuman-p108
	}}}
The 'path' Option **(!): Absolute, relative (@) @@(@) @
{{{
	:se path+=c:/prog/include
		# searches in spec.d dir
		 fr. any locat.
		.
	:se path+=./proto   (=subdir to file's dir(!!))
		# search in dir 'proto'
		 below curr. file's dir (****)
		.
	:se path+=proto   (=subdir to file's dir(!!))
		# =dir 'proto' below curr.dir
		 (=not(!) below curr. file's dir (*))
	--
	vuman-p109
	}}}
more info|help on what can be done w. path (='allows specifying the dir.s where to search for files in many more ways') @(@) @
{{{
	:h 'path'
	--
	vuman-p109
	}}}
[used to decide which char.s are included in file names (=wh. searching w. 'path' etc) =most often '"']
{{{
	'isfname'
	--
	vuman-p109
	}}}
Open file (like w. :e), if know f-name but name not in the dok (=can't use gf etc) ****(**) @@
{{{
	:find inits.h
	  (=uses 'path')
	--
	vuman-p109
	}}}
Using easy 'Fuzzy-Find' w. :find in vim ****(**!!) @@(@) @@(@) @@(@)
{{{
	set path+=**
	 (+can use '*', eg. *.txt)
		.
	+(!) set wildmenu
		  (=display + cycle all matches when tab|s-tab-completing(!))
	--
	  '90%wjustvim': 00:09:00-00:10:00
	}}}
start vim w. a file in the path **(*)  #=w.out having to specif. whole filename @@
{{{
	vim -c 'find stdio.h'
	  vim '+find stdio.h'
	--
	vuman-p109
	}}}
	----
	----
open file in (normal) split (*) @(@)
{{{
	c-w f
	--
	vuman-p109
	}}}
Open file w. :find in split / vsplit (**!!) @@
{{{
	:sfind file
	:vert sfind file
	--
	vuman-p109
	}}}

edit file 'two.txt', if has changes in curr. file  (+don't want to save yet(!!))  (**) @
{{{
	:hide edit two.txt
		#+'careful!' (=don't exit vim w.out having inspected your buf.list, if y. have any hidden buffers (in y. b.list))
	--
	vuman-p110
	}}}
'active/hidden/inactive' buffers' @
{{{
	active		normal (=appears in win, text loaded)
	hidden		(not in win + text loaded)
	inactive	(neither in win, nor text loaded)
	--
	vuman-p110
	}}}
buflist--marks//flags: a, h, u  (+previous list above (+, -, =))  **(*) @
{{{
	%	current
	#	alt (*)
	 --
	a		active
	h		hidden
	u		unlisted   |unilsted-buffer|
	--
	vuman-p110
	}}}
Edit buffer X in buf.list (****(!!)):  buffer nr 2  ||  buf. w. string 'help' in name  **** @
{{{
	:b2   :b help
	  # +completion w. tab and :set wildmenu(*)****
	  #  (=see '90 % w.out plugins')
	--
	vuman-p110,p111
	}}}
edit buffer 3 in split-win (***!!)
{{{
	:sbuf 3
	:vert b 3  (??/**)
	--
	vuman-p111
	}}}
	----
	----
show the buffer list (**!)
{{{
	:buffers || :ls
	--
	vuman-p110
	}}}
go forward/backward etc in buf.list (**)
{{{
	:bn  :bp  :bf(irst)  :blast
	--
	vuman-p111
	}}}
delete buf. x (eg. 3) fr. buffer-list (*****)
{{{
	:bd 3   (or name)
	--
	vuman-p111
	}}}

Listing all =Including unlisted buffers **(**!!) @@
{{{
	:buffers!  (***)
	:b!
	--
	vuman-p111
	}}}
fileformats (=unix, win, mac):  (tell vim to) try unix, then win (**)  #=wh. opening a file @@
{{{
	:set fileformats=unix,dos
	--
	vuman-p112
	}}}
see|echo fileformat (=unix, win or mac)  for a textfile (**!) @@
{{{
	:set fileformats?
	--
	vuman-p112
	}}}
explicitly set fformat for a textfile (=the 'vi trick' etc)  ** @@(@) @
{{{
	:edit ++ff=dos file.txt    (++enc)
	--
	vuman-p113
	}}}
Convert (**) txt-file's fileformat ****(**) @@(@)
{{{
	:se fileformat=unix | write
	:se fileformat=dos | write
		..
	  (=set fileformat + write the file)
		eg. content hasn't changed, just the fileformat
	--
	vuman-p113
	}}}
'Files on the internet' (=open file someone refers|links to, à la ftp://ftp.vim.org/pub/vim/README)  (**) @
{{{
	place cursor on link-address (=inside vim) + gf  (****)
	--
	vuman-p113
	}}}
	----
	----
really(!) delete buffer fr. buf.list (**)
{{{
	:bwipe  (+maybe see more ab. the 'buflisted' option)
	--
	vuman-p111
	}}}
adding mac to txt-fileformats to check (*)
{{{
	:set fileformats+=mac
	  # has a somewhat spec. format =vim wont necess. assume you're looking for it
	--
	vuman-p113
	}}}
[tools|protocols used by vim to open remote-links (**)]  (*****)
{{{
	ftp://		(same)
	rcp://		(same)
	scp://		(same)
	http://		wget (+=reading only)
	--
	can also use :split etc (as usual)
	  +more info (including concerning passwords(!)   |netrw|)
	--
	vuman-p113,p114
	}}}

(editing binary files **) @
{{{
	vim -b datafile
	--
	+tip: usage
		change a message in a program
	see unprintable char.s in file (=see in hex format)
		:set display=uhex
	see val. of char. under cursor
		ga
	get better overview (=if not many linebreaks in the file **)
		:set nowrap
	see which byte you're on
		g c-g
	Move to specific byte in the file (**)
		2345go
	--
	edit converted w. xxd **
		:%!xxd
		(=can now be edited like ordinary text)  (+convert back w:)
		:%!xxd -r		(man xxd)
	   [=only changes in the hex part is used, =not changes in the printable part at right side)
	--
	vuman-p115,p116
	}}}
	----
	----
[vim file editing + encryption (=not too strong)]
{{{
	vim -x exam.txt
	:X
	--
	 disable encryption    :set key=  (+ :w)
	 avoid swapfile (=or encr. file can be read by others logged in)
		vim -x -n file.txt
	 --"--, if already editing a file
		:setlocal noswapfile
	--
	vuman-p114,p115
	}}}
editing compressed files (*)
{{{
	= Z, gz, bz2
	--
	vuman-p116
	}}}


Ch. 24 - Inserting Quickly  (completion, repeating inserts, registers, abbrevs *, spec.char entering, digraphs)

spec.keys for moving around in ins-mode (='These special keys are most useful when ____')
{{{
	=wrting a mapping that doesn't leave ins-mode
		c-home, pgup, s/c-left, end, c-end
	|ins-special-special|
	--
	vuman-p118
	}}}
[Def.places where Vim looks for matches for Completion (**(*))] (@)
{{{
	- curr. file
	- o. wins
	- other loaded (=hid)
	- inact
        --
	- tag-files
	- #includes etc
	--
	vuman-p119
	}}}
CUSTOMIZE COMPLETION SEARCH-ORDER (**!!) (=see more) @@ @ @@ @
{{{
	= use the 'complete' option (!!)
	--
	vuman-p119
	}}}
Ignoring + Matching case for completion (****) @@
{{{
	=uses ic if set (=not by def.(??))
		.
	'infercase' (=if ic is set)
		=matches 'For' in 'Fortunately' if searching w. "For"
	--
	vuman-p119
	}}}
Omni Completion **(!) @@
{{{
	=for source code		c-x c-o
	--
		example (=for c code):  |ft-c-omni|
			|compl-omni-filetypes|
	- vimrc std (=minimal modern, w. filetype and plugins switched on)
	- create tags-file
	- set the 'tags'-option
	--
			(+see more: compl-omni-filetypes  etc)    +check 'omnifunc'
	 seeing if it would work (=for curr. filetype)
		check value of 'omnifunc' option
	--
	vuman-p120
	}}}
inserting fr. last insert **(!)
{{{
	c-a**, c-r .  , c-@[=cg-q]
	--
	vuman-p121
	}}}
	----
	----
Avail. ins-completion modes (***) @@(@)
{{{
	- file
	- line
	- Incremental(**)
	 - MacroDef			xd
	- curr. + included files
						xi
	 - Dict(K)			xk  **
	 - Thes(T)			xt
	 - Tags(])***		x]
	 - V.CmdLine(V)		xv
	--
	 |ins-completion|
	--
	vuman-p119
	}}}
[ set show match for ')' etc ] ***
{{{
	:se showmatch
	:se matchtime=15	#1,5s
	--
	vuman-p118
	}}}

ABBREV.S *****

set (=ins)abbrev 'ad' =expands to 'advertisement'  (****) @@(@)
{{{
	:iabbrev ad advertisement
		# = +put some in your vimrc (**)
	--
	vuman-p122
	}}}
make abbrev.s that includes spaces (***(**))  #=normally gets stripped @
{{{
	:iabbrev #b /****************************************
	:iabbrev #e <Space>****************************************/
	--
	vuman-p122
	}}}
List Abbrev.s (***), Del. an / all(!) abbrev.s (*(*)) @
{{{
	List abbrevs
		:abbrev
	remove abbreviation
		:unabbrev @f
	remove all(!) abbrev.s
		:abclear  :iabclear  :cabclear  :!abclear
	--
	vuman-p123
	}}}
NON RE-REMAPPING ABBREV.S (***************) @@
{{{
	:inoreabbrev @d trulystrange@gmail.com
	 :cnoreabbrev
	 :!noreabbrev
	--
	vuman-p123
	}}}
	----
	----
Tip =What to use Abbrev.s for *****
{{{
	- Snippets
	- fixing typos
		(= etc (??))
	  :iab teh the   (=maybe add common ones, as you discover them)
	--
	vuman-p122
	}}}
make abbrev. that expands to more than one(!) word (****): JB =Jack Benny
{{{
	:iab(brev) JB Jack Benny
	--
	vuman-p122
	}}}
Modes/Variants for Abbreviations (**(**)) @
{{{
	=insmode (of course)
	:cabbrev  (=for commandline mode)
	:!abbrev  (=for both(!) ins- and cline mode) *****(???)
	--
	vuman-p123
	}}}


NOTE !!!(!)  When done: Go back and replace '−' in notes w. '-'

'90 % w.out plugins'
 - command! MakeTags !ctags -R .  (&t=995 (=16:35))
	(generates a text-file named 'tags' in the (project's) root-dir)
	 jump to tag  c-]
	 jump to 'ambiguous tags  g c-]
	  jump back w.  c-t
 - echo current file-name (etc) *****
	:echo expand("%")
 - Autocompletion  (+:h ins-completion)
	 c-x c-x(????)  (='just from this file')
	   ++only from last match (=incremental **************)
	 c-x c-]  (=tags only)
	 c-n  =anything specified by the complete-option

     Extras:
     - Read val. in var 'i' (fr. insert-mode) **(*) ; ^R =i<Ent>
     - Read fr. register in a substitution (etc?) ** ; \=@r
     - Echo var. i **(*) ; :echo expand(i)

	evince -p 24 ~/Dropbox/rsc/aubooks/comp/vimuserman.pdf &
	~/gdrive/Doks/vimumandefnotes-1of2.pdf


	__vuman_last

Inserting Special Char.s (=c-v, c-v u|U, c-k Co  ******

	----
Inserting Special Char.s ******
{{{
	
	--
	vuman-p123,p124
	}}}
2
{{{
	
	--
	vuman-p124
	}}}
3
{{{
	
	--
	vuman-p124
	}}}


 ___vimscrhardw

	----
1.1 Persistent Echoing
{{{
    :echom "Hello again, world!"
	--
	vimscrhardw-p20
	}}}
reshow prev. persistent echoes (*)
{{{
    :messages
	--
	-p
	}}}
tip: When you're writing more complicated Vimscript *
{{{
    Use :echom for debugging (=so messages persist) *
	--
	-p
	}}}
main kinds of options in vim (!!)
{{{
    boolean options (either “on" or “off")
    options that take a value.
	--
	-p
	}}}
ex. of a Boolean Option (+some standard option tools) (!)
{{{
	:set nu
    no_
    _!
    --
    _&
    _
    _?
    _=
	--
	-p
	}}}
2.5 Setting Multiple Options at Once *
{{{
    :set number numberwidth=6
	--
	-p
	}}}
4.3 Exercise: Set <c-u> to convert current word to uppercase when you're in insert mode.
{{{
	=see more
	--
	-p
	}}}
Setting Localleader (=to '\') **
{{{
    :let maplocalleader = "\\"
	--
	-p
	}}}
,ev opens vimrc in a split ,, ,sv sources vimrc (*)
{{{
    :nnoremap <leader>ev :vsplit $MYVIMRC<cr>
    :nnoremap <leader>sv :source $MYVIMRC<cr>
	--
	-p
	}}}
    ----

    ----
8 Abbreviations are meant for use in **
{{{
    insert, replace, and command modes.
	--
	-p
	}}}
Check the iskeyword option (+adding/removing char.s) *
{{{
    :set iskeyword?
	--
	-p
	}}}
Check help on keyword characters
{{{
    :help isfname
	--
	-p
	}}}
Mail-Abbrev.s *(*)
{{{
    :iabbrev ®@ steve@stevelosh.com
    :iabbrev ccopy Copyright 2013 Steve Losh, all rights reserved.
	--
	-p
	}}}
problem w. mappings like :inoremap ssig -- <cr>Steve Losh<cr>steve@stevelosh.com  (+the corresponding imap) **
{{{
    will expand 'ssig' in eg. 'Lessig' too  (##)
    :iabbrev ssig -- <cr>Steve Losh<cr>steve@stevelosh.com
    --
    -p }}}
remove an imap (*)
{{{
    :iunmap ssig
	--
	-p
	}}}
idea: surround word in double quotes
{{{
	,"
	--
	-p
	}}}
Special mappings, abbreviations, and options, per filetypes **(*)
{{{
    mappings, abbreviations, and options,
    =11 Buffer-Local Options and Mappings
      :nnoremap <buffer> <localleader>x dd
      .
    The <buffer> in the second nnoremap command told Vim to only consider that mapping when we're in the buffer where we defined it.
	--
	-p
	}}}
setting option (eg. wrap) for one buffer (*)
{{{
    :setlocal wrap
	--
	-p
	}}}
    ----

    ----
To see if you can set a particular option locally, *
{{{
    read its help.
	--
	-p
	}}}
both general and local mapping exists. which gets run? *(*)
{{{
    :nnoremap <buffer> Q x
    :nnoremap Q dd
      .
    =the local (because it is more specific)
	--
	-p
	}}}
make vim create file on disc when opening a new file **!!
{{{
    :autocmd BufNewFile * :write
      (= event (filetype)pattern command)
	--
	-p
	}}}
remove an autocommand
{{{
	- close vim, or
    - 
	--
	-p
	}}}
Vim offers many events to watch. Some of them include:
{{{
	sée more
	--
	-p
	}}}
special about the final part (=the command we want to run when the event fires) (**(*!))
{{{
    you can't use special characters like <cr> in the command
	--
	-p
	}}}
aucmd: correct indentation for HTML files befor writing them **(!)
{{{
    :autocmd BufWritePre *.html :normal gg=G
	--
	-p
	}}}
create a single autocommand bound to multiple events *
{{{
    :autocmd BufWritePre,BufRead *.html :normal gg=G
	--
	-p
	}}}
aucmd: A common idiom in Vim scripting is to
{{{
    pair the BufRead and BufNewFile events together to run a command whenever you open a certain kind of file, regardless of whether it happens to exist already or not.
      .
    :autocmd BufNewFile,BufRead *.html setlocal nowrap
	--
	-p
	}}}
    ----

    ----
ONE OF THE MOST USEFUL EVENTS **
{{{
    the FileType event.
      .
    :autocmd FileType javascript nnoremap <buffer> <localleader>c I//<esc>
    :autocmd FileType python nnoremap <buffer> <localleader>c I#<esc>
	--
	-p
	}}}
List AuCmd-Events (**)
{{{
    :help autocmd-events
	--
	-p
	}}}
tip: Create a few FileType autocommands that use setlocal to set options for your favorite filetypes
{{{
	(see more)
    (like
     wrap, list, spell, and number)
	--
	-p
	}}}
13 Buffer-Local Abbreviations (eg. inputting long dashes (for certain file types)) *
{{{
    :iabbrev <buffer> --- &mdash;
	--
	-p
	}}}
The Filetypes “Snippet" System ***(*) (eg. iff = if() for js, etc) ***
{{{
    :autocmd FileType python :iabbrev <buffer> iff if:<left>
    :autocmd FileType javascript :iabbrev <buffer> iff if ()<left>
      .
    +tips:
    return for most languages, function for javascript, and things like &ldquo; and &rdquo; for HTML files.
	--
	-p
	}}}
    ----

14 Autocommand Groups ****(!)
    :help autocmd-groups
15 Operator-Pending Mappings

    ----
aucmd echo 'writing buffer' when saving (+Create AuGroups!!(****))
{{{
    (stop vim from re-reading and duplicating Auto commands every time the vimrc source is sourced)
      .
    :autocmd BufWrite * :echom "Writing buffer!"
    --
    - group related autocommands into named groups.
      .
:augroup testgroup
:  autocmd BufWrite * :echom "Foo"
:  autocmd BufWrite * :echom "Bar"
:augroup END
    (+indentation is optional)
      .
    - clear aucmd groups (=so they don't get repeated)
      .
:augroup testgroup
:  autocmd!
:  autocmd BufWrite * :echom "Cats"
:augroup END
	--
	-p
	}}}
Short checklist building a filetype aucmd-group (**(*!!))
{{{
    - enter the group (eg. filetype_html)
    - immediately clear it
    - define an autocommand
    - leave the group
        .
augroup filetype_html
   autocmd!
   autocmd FileType html nnoremap <buffer> <localleader>f Vatzf
augroup END
        .
Go through your ~/.vimrc file and
wrap every autocommand you have in
groups like this. You can put
multiple autocommands in the same
group if it makes sense to you.
        .
	--
	-p
	}}}
3
{{{
	
	--
	-p
	}}}
4
{{{
	
	--
	-p
	}}}

op-pending mappings
   +changing the start
     +'general rules'
  the Markdown case
           status lines
  coding tips
     short names
VARS, SPECIAL VAR.S, OPTS ETC **(**)
    conditionals
    comparisons
    Functions *
   string functions
    Execute *
    normal | normal!
    execute + normal!
     regex
   Grep Op 1 + 2 + 3 **
35 Lists **(*)
  looping
  Dicts
  opt-toggle plugin
     functional progr.
  file paths
The Potion Plugin *
  (old) plugin architecture
  pathogen | plug
  potion highlighting *
  expr folding (**)
   folding theory *
       +foldlevels
     +comparing indent levels
 Code Movement Commands **  [[
     (+custom section movements)
    <script>, <SID>
     +compilation
  52 external commands
  Autoloading *
Documentation **
  distribution
  colorschemes, commands, runtimepath
  omnicomplete, compiling, other langs for writing plugins [[py, lua]]

 __vim_netrw

	----
tip: marking files
{{{
    =execute any system command on them!
	--
	-p
	}}}
like to avoid entering the password repeatedly for remote directory listings with ssh or scp,
{{{
    see |netrw-ssh-hack|.
	--
	-p
	}}}
To change the listing style,
{{{
    press the "i" key (|netrw-i|).
      =thin, long, wide, and tree.
	--
	-p
	}}}
search :h for 'change listing style' (=netrw)
{{{
    (|netrw-i|).
	--
	-p
	}}}
sort files by name, time, or size.
{{{
    Press s
	--
	-p
	}}}
Reverse sorting order
{{{
    |netrw-r|
	--
	-p
	}}}
To use Netrw's remote directory browser, eg. for ftp(!)
{{{
    vim ftp://ftp.home.vim.org/pub/vim/
	--
	-p
	}}}
To avoid password entry with ftp,
{{{
    see |netrw-netrc|
	--
	-p
	}}}
make listing-style change "permanent",
{{{
    see |g:netrw_liststyle|.
	--
	-p
	}}}
hide files (=don't want to see files anymore)
{{{
    see |netrw-ctrl-h|.
	--
	-p
	}}}
    ----

    ----
List all the things you can do with netrw! (eg. browsing etc) **
{{{
    |netrw-browse-cmds|
	--
	-p
	}}}
nw quick help
{{{
    *netrw-quickhelp*
	--
	-p
	}}}
select a topic (eg. in quick help) (!)
{{{
    Use ctrl-]
	--
	-p
	}}}
    ----


    
    ----
Netrw help (=fr. w.in nw)
{{{
    <F1>
	--
	-p
	}}}
enter the directory or read file
{{{
    |netrw-cr|
    <leftmouse> (gvim only)
	--
	-p
	}}}
remove the file/directory
{{{
    |netrw-del|
    <rightmouse>    (gvim only)
	--
	-p
	}}}
Edit file hiding list (!!)
{{{
    |netrw-ctrl-h|
	--
	-p
	}}}
Toggle marked file suffixes presence on hiding list *
{{{
    |netrw-mh|
	--
	-p
	}}}
refresh the directory listing
{{{
    |netrw-ctrl-l|
	--
	-p
	}}}
Browse using a gvim server (??(?))
{{{
    |netrw-ctrl-r|
    One may keep a browsing gvim separate from the gvim being used to edit.
    (see |g:netrw_servername|).
	--
	-p
	}}}
Shrink/expand a netrw/explore window
{{{
    |netrw-c-tab|
	--
	-p
	}}}
go up one directory
{{{
    |netrw--|
	--
	-p
	}}}
Cycles between normal display, hiding and showing
{{{
    |netrw-a|  =normal, hiding (suppress display of files matching g:netrw_list_hide) and showing (display only files which match g:netrw_list_hide)
	--
	-p
	}}}
    ----

    ----
Make browsing directory the current directory
{{{
    |netrw-c|
	--
	-p
	}}}
Setting the editing window (??)
{{{
    |netrw-C|
	--
	-p
	}}}
Make a directory *
{{{
    |netrw-d|
	--
	-p
	}}}
Attempt to remove file(s)/directory(ies)
{{{
    |netrw-D|
	--
	-p
	}}}
Go to previous bookmarked directory *(*)
{{{
    |netrw-gb|
	--
	-p
	}}}
Force treatment as directory / file
{{{
    gd  gf
	--
	-p
	}}}
Quick hide/unhide of dot-files *
{{{
    |netrw-gh|
	--
	-p
	}}}
Make top of tree the directory below the cursor (?)
{{{
    |netrw-gn|
	--
	-p
	}}}
Toggle the displaying of the netrw banner
{{{
    |netrw-I|
	--
	-p
	}}}
    ----

    ----
Bookmark current directory (or file?) **
{{{
    |netrw-mb|
    :NetrwMB[!] [files/directories]
	--
	-p
	}}}
Copy marked files to marked-file target directory *
{{{
    |netrw-mc|
	--
	-p
	}}}
Apply diff to marked files (up to 3) (*)
{{{
    |netrw-md|
	--
	-p
	}}}
Place marked files on arg list and edit them *
{{{
    |netrw-me|
	--
	-p
	}}}
Mark a file // Unmark files *(*)
{{{
    mf 
    <s-leftmouse>   (gvim only)
     --
    mF
	--
	-p
	}}}
Tip: Mark Several Files (*)
{{{
    Dragging the shifted leftmouse will mark multiple files.
	--
	-p
	}}}
Apply vimgrep to marked files *
{{{
    |netrw-mg|
	--
	-p
	}}}
Move marked files to marked-file target directory *
{{{
    |netrw-mm|
	--
	-p
	}}}
Print marked files ()
{{{
    |netrw-mp|
	--
	-p
	}}}
Mark files using a shell-style |regexp|
{{{
    |netrw-mr|
	--
	-p
	}}}
    ----

    ----
Current browsing directory becomes markfile target *
{{{
    |netrw-mt|
	--
	-p
	}}}
Apply ctags to marked files
{{{
    |netrw-mT|
	--
	-p
	}}}
Unmark all marked files *
{{{
    |netrw-mu|
	--
	-p
	}}}
Apply arbitrary vim command to marked files **
{{{
    |netrw-mv|
	--
	-p
	}}}
Apply arbitrary shell command to marked files ** // to marked files en bloc
{{{
    |netrw-mx|
        |netrw-mX|
	--
	-p
	}}}
Compress/decompress marked files
{{{
    |netrw-mz|
	--
	-p
	}}}
    ----

    ----
Enter the file/directory under the cursor in a new split // same win
{{{
    o  O
	--
	-p
	}}}
Enter the file/directory under the cursor in a new tab // v-split **(*)
{{{
    |netrw-t|  v
	--
	-p
	}}}
Preview the file
{{{
    |netrw-p|
	--
	-p
	}}}
Browse in the previously used window (??)
{{{
    |netrw-P|
      =open file in alr. open split|win (**)
      .
    (+see more:
    'One typical way to use the netrw tree display is to:'
	--
	-p
	}}}
List bookmarked directories and history *
{{{
    |netrw-qb|
	--
	-p
	}}}
Display information on file (*)
{{{
    |netrw-qf|
	--
	-p
	}}}
Mark files using a quickfix // location-list **(*)
{{{
    qF  qL
	--
	-p
	}}}
Rename the designated file(s)/directory(ies)
{{{
    |netrw-R|
	--
	-p
	}}}
Specify suffix priority for name-sorting ((**))
{{{
    |netrw-S|
	--
	-p
	}}}
    ----

    ----
Change to recently-visited // subsequently-visited directory *(*)
{{{
    u  U
	--
	-p
	}}}
View file with an associated program (**)
{{{
    |netrw-x|
	--
	-p
	}}}
Create a new file in netrw's current directory *
{{{
    %
	--
	-p
	}}}
(disable mouse buttons while browsing)
{{{
    |g:netrw_mousemaps|)
	--
	-p
	}}}
:NetrwClean[!]
{{{
    =??
	--
	-p
	}}}
set netrw settings(!)
{{{
    :NetrwSettings
	--
	-p
	}}}
explore as a tree (??)
{{{
    :Ntree
	--
	-p
	}}}
Explorer (=explore dir of curr. file, etc) (**)
{{{
    :Explore[!]  [dir] Explore directory of current file......|netrw-explore|
    :Lex  =left expl. (?)
    :Rex   =Return to Explorer
    :Sex
      :Hex
    :Tex  **
    --
    :Vex
      :Nex
      :Pex
	--
	-p
	}}}
    ----

  (note: :NetrwMB is avail. outside nw-buffer, as soon as nw has been invoked once)

    ----
persistance of netrw bookmarks (+diff. betw. marking and adding bookmarks)
{{{
    Bookmarks are retained in between sessions of vim in a file called .netrwbook as a |List|, which is typically stored in the first directory on the user's 'runtimepath';
    entries are kept in sorted order.
    --
    -p
	}}}
Add already marked files to bookmarks(=the bm-file)
{{{
    If there are marked files and/or directories, mb will add them to the bookmark list.
    :NetrwMB[!]
    --
    -p
	}}}
bookm. curr. open file
{{{
    :NetrwMB[!]
	--
	-p
	}}}
Del. bookmarks
{{{
    (mb again?)  =  {N}mB
    :NetrwMB! (+maybe args(!))
	--
	-p
	}}}
add bm.s fr. cmdline (*)
{{{
    :NetrwMB f|dirnames
	--
	-p
	}}}
list bookmarks *
{{{
    qb
	--
	-p
	}}}
____ controls where .netrwbook (=the bm-file) is kept
{{{
    |g:netrw_home|
	--
	-p
	}}}
format for the long and wide listing formats
{{{
    Netrw assumes that two or more spaces delimit filenames and directory names for the long and wide listing formats.
    (=if your filename or directory name has two or more sequential spaces embedded in it, or any trailing spaces, then you'll need to use the "thin" format to select it.)
	--
	-p
	}}}
|g:netrw_browse_split| (***)
{{{
    =see more
      .
    When the option is one or two, the splitting will be taken horizontally or vertically, respectively.
    When the option is set to three, a <cr> will cause the file to appear in a new tab.
	--
	-p
	}}}
    ----

    ----
(doubly-clicked leftmouse button will return to the netrw browser window.)
{{{
    (see more)
	--
	-p
	}}}
|g:netrw_fastbrowse|
{{{
    one may have slow browsing (no buffer re-use), medium speed browsing (re-use directory buffer listings only for remote directories), and fast browsing (re-use directory buffer listings as often as possible).
      .
    +refresh directory listing buffers by pressing ctrl-L
	--
	-p
	}}}
tree-listing style: squeeze (close) the directory currently containing the cursor. *(*)
{{{
    <s-cr> mapping may be used
      .
    or put:
    nmap <buffer> <silent> <nowait> YOURKEYCOMBO <Plug>NetrwTreeSqueeze
    Put this line in $HOME/ftplugin/netrw/netrw.vim
    it needs to be generated for netrw buffers only.
	--
	-p
	}}}
control above/below splitting || control initial sizing
{{{
    |g:netrw_alto|
    |g:netrw_winsize|
	--
	-p
	}}}
If you'd like to have the new listing in a background tab, (*)
{{{
    use |gT|.
	--
	-p
	}}}
the thin, long, wide, and tree listing formats.
{{{
    files' and directories' names.
    filename, file size (in bytes), and the time and date of last modification for local directories.
    uses two or more contiguous spaces to delineate filenames;
	--
	-p
	}}}
open and close directories (=in tree listing) 
{{{
    pressing <cr>
	--
	-p
	}}}
make a preferred listing style your default *
{{{
    |g:netrw_liststyle|.
    eg. let g:netrw_liststyle= 3 for  tree style
	--
	-p
	}}}
change permission for the file named under the cursor *
{{{
    gp
	--
	-p
	}}}
    ----

    ----
go to bookm. nr N  (=check num.s etc w. qb)
{{{
    {N}gb
	--
	-p
	}}}
go back / forw. in dir-browsing history (!)
{{{
    u  U(=successor)
      (or eg. 3u)
    (+hist. is also checked w. qb)
     +by default this his. holds ten entries).
	--
	-p
	}}}
specify a new tree top for tree listings
{{{
    :Ntree [dirname]
    Without a "dirname", the current line is used (and any leading depth information is elided).
	--
	-p
	}}}
map will take the word below the cursor and use that for changing the top of the tree listing. *
{{{
    gn
	--
	-p
	}}}
:NetrwClean!
{{{
    =??
	--
	-p
	}}}
open file (eg. html, gif, jpeg, (word/office) doc, etc) files with a special handler *
{{{
    when netrw-Exploring // Editing
        x  gx
	--
	-p
	}}}
Examples of useful settings (place into your <.vimrc>):
{{{
    see more
        including code like:
    netrwFileHandlers#Invoke()
	--
	-p
	}}}
programs that handle opening special files (**)
{{{
    xdg-open
      (+on gnome, win etc)
	--
	-p
	}}}
One may also use visual mode (see |visual-start|) to select the text that the special handler will use
{{{
    =  gx
	--
	-p
	}}}
Users may write their own netrw File Handler functions to support more suffixes with special handling.
{{{
    See <autoload/netrwFileHandlers.vim> for examples on how to make file handler functions.
    =see more
	--
	-p
	}}}
    ----

    ----
Deleting/removing files and directories ** (+deleting several 'adjacent' files
{{{
    - D
    - select a range of lines with the "V" command (visual selection), and then pressing "D"
    - mark files w. mf + D
    - A further approach is to delete files which match a pattern   :MF patt  mr
	--
	-p
	}}}
Tip/See more: Explorer (+Fuzzy)
{{{
    (=concerning Rex??)
    Used with :Explore **/pattern : (also see |netrw-starstar|)
    :Pex / :Nex
	--
	-p
	}}}
:Exp | :Exp! opens in ___
{{{
    local dir, or spec.d dir
    if splitting: =hsplit / vsplit 
	--
	-p
	}}}
Hexplore // :Hexplore!
{{{
    =w. botright  topleft
	--
	-p
	}}}
N wide Exp-win on left | right (**)
{{{
    :[N]Lexplore [dir]
    :[N]Lexplore! [dir]
	--
	-p
	}}}
:Exp w. hor. or vert. Split
{{{
    :[N]Sexplore  [dir]
    :[N]Sexplore!  [dir]
	--
	-p
	}}}
:[N]Vexplore [dir] // :[N]Vexplore!
{{{
    = with
    |:leftabove| vertical splitting.  //  |:rightbelow| vertical splitting.
    + winsize N
	--
	-p
	}}}
Set default num. of rows and/or columns new explorer windows should have. **
{{{
    |g:netrw_winsize|
	--
	-p
	}}}
Return the display to that of the last netrw browser // file display in that window.
{{{
    :Rex
    The <2-leftmouse> map
        (=dclick)
	--
	-p
	}}}
    ----

    ----
Explore, Sexplore, Hexplore, or Vexplore: normal glob, Glob in Subdir(!!**), VIMGREP REGEX PATT. IN CURR. DIR // BELOW CURR. DIR (****(**!))
{{{
    */
    **/
        --
    *//
    **//
	--
    go to subsequent files on that list via |:Nexplore| or to preceding files on that list with |:Pexplore|.
      or(!)  s-up//s-down
	--
	-p
	}}}
clear the explore list.
{{{
    A plain  :Explore
	--
	-p
	}}}
reveal the file's size and last modification timestamp.
{{{
    qb
	--
	-p
	}}}
The "<ctrl-h>" map brings up a requestor allowing the user to change the file/directory hiding list contained in |g:netrw_list_hide|.
{{{
    The hiding list consists of one or more patterns delimited by commas.
    Files and/or directories satisfying these patterns will either be hidden (ie. not shown) or be the only ones displayed (see |netrw-a|).
      .
    As an example,  let g:netrw_list_hide= '\(^\|\s\s\)\zs\.\S\+'
	--
	-p
	}}}
   ___zzzz
   [=for moment: Quicklisten Rest + Tag(!!) (=as prepar. for input of rest)]
5
{{{
    
	--
	-p
	}}}


___dlangali_1

		___SEEMORE (eg. PRACTICE)
			___HMMM
		___SLICESYNTAX
		 ___Tutorial
		 ___Exercise

-- Programming in D (Ali Cehreli) --

	----
Hello World (=the first program)  @@
{{{

	import std.stdio;

	void main() {
		writeln("Hello, World!");
	}

	}}}
compile program (eg. 'hello world')  @@
{{{
	dmd hello.d  //  ldc2 hello.d
	  # =generates  hello.o  hello
							  (=the exec-file(**))
	 --
	http://ddili.org/ders/d.en/hello_world.html
	dprograli-p21
	}}}
run program generated by compiling hello.d (**!)  @@
{{{
	$ ./hello
	  # or simply  hello
	   (=if program (or link to progr)
	    is in path) ****
	dprograli-p22
	}}}
compile-flags: deprec. features are errors, compile in unittest(***!!), warnings are errors(*)  @@
{{{
	dmd hello.d -de -w -unittest
	 --
	dprograli-p22
	}}}
Compile +(!!) Run Program ***(!!)  @@
{{{
	dmd -run hello.d
	 --
	dmd -de -w -unittest -run hello.d
	--
	dprograli-p23
	}}}
	----

	----
'user-def. types/functions/libraries' vs 'the core features' ((**))
{{{
	'the core features defines only
	 the structure of the lang'
	--
	='they are used for defining
	 - functions
	 - user types
	+'those in turn are used for
	 building libraries
	 (=of reusable functions) **
	}}}
"what is a library?" (*)
{{{
	='Collections of reusable
	 program parts
	that get linked w. your program
	(to help the achieve their purposes)
	 --
	dprograli-p23
	}}}
	----

Ch. 2
http://ddili.org/ders/d.en/writeln.html

	teterm: param.s vs argum.s

	----
'The parts of programs that actually do work' (**)  @@
{{{
	functions (*)
	 --
	dprograli-p25
	}}}
Comment Code (*)  @@
{{{
	//
	/* */
	/+ +/  #='nested comments' (?/**)
	 --
	https://wiki.dlang.org/Commenting_out_code
	}}}
	----

http://ddili.org/ders/d.en/types.html

	----
List of D's Fundam. Data Types ****(!)  +  Initial Values **!
{{{
	(+pickout:
	bool
	byte
	short
	int					0
	long
	float
	double
	ireal  (!!)
	 real
	cfloat
	char, wchar, dchar		0xFF (etc)
	 --
	dprograli-p28
	http://ddili.org/ders/d.en/types.html
	}}}
recommended basic data types (**)  @@
{{{
	int  (unless o.wise needed)
	double   #for floating point val.s
	}}}
the val(or type??) 'not a number'  @@
{{{
	nan
	}}}
Type Properties ****  @@
{{{
	eg:
	- name of type
	- length of type, in bytes
	- max / min
	- init(default)val  etc   **
	 --
	int.stringof
	.sizeof
	.min/.max
	int.init
	dprograli-p29
	}}}
test/print initial val. for the int. type (**!!)  @@
{{{
	writeln("Initial value  : ", int.init);
	 --
	dprograli-p29  **
	}}}
('size of an unsigned type on your system' (??(?)/(***(*))  @@
{{{
	size_t
	 --
	='the most suitable type to represent concepts like
	 size or count'
	--
	alias for an unsigned int
	 - uint  #32-bit system
	 - ulong  #64-bit system
	--
	writeln(size_t.stringof);
	 --
	dprograli-p30
	}}}
	----

Ch. 5
http://ddili.org/ders/d.en/assignment.html
Ch. 6
http://ddili.org/ders/d.en/variables.html
Ch. 7
 http://ddili.org/ders/d.en/io.html

	----
'swap var.s a and c'  @@
{{{
	c = a;
	a = b;
	b = c;
	 --
	dprograli-p31
	}}}
(Declare + Assign Var. (**))  @@
{{{
	int studentCount = 100;
	 --
	dprograli-p33
	}}}
defin: stdout streams (!)  @@
{{{
	the objects that can
	accept output (=char-based)
	}}}
stdout is character-based (=explain + give example)  **
{{{
	=ev.thing to be printed
	 is first converted to characters
	+then sent to output as char.s
	 --
	eg:
	int value 100
	  =is sent to outp. as
	  three characters  (=1, 0, and 0)
	}}}
	----

	----
'Target(!)' for writef and readf()  (**)
{{{
	writef target
	   (commonly) the terminal window
	readf target (!!(**))
	   &var   #=address of var 'var'
	--
	(eg. &studentCount)
	--
	dprograli-p35
	}}}
basic Arguments and Format of readf(**)  @@
{{{
	readf("%s", studentCount);	 #cleaner + safer
	readf("%s", &studentCount);  #for point of address
	--
	"%s"   =the data should autom. be converted
			in a way suitable (=to the type
			of the var.)
	 --
	(eg. 'wh. 4 and 2 (char.s) are read
	 to a var. of type int  =converted
	 to int-value 42 (**!))
	--
	dprograli-p36
	}}}
'Flushing'/Skipping the Whitespace-char (=wh. reading w. readf()) ****(*!)  @@
{{{
	// ...
		readf(" %s", &studentCount);
	// ...
		readf(" %s", &teacherCount);
	// ...
	--
	dprograli-p37
		****(**!)
	}}}
Comments ***(*)  @@
{{{
	/+
	 //    single line comment

	 /*
	   Comment spans
	   multiple lines
	  */
	 
	  Comment block that includes
	  other comments
	 +/

	# and /+-comments can include
	  nested /+ comments +/
	--
	dprograli-p37 ****
	}}}
	----

Ch. 9
http://ddili.org/ders/d.en/logical_expressions.html

	----
'EXPRESSION' as defined in D  + complex expr.s  ***(*)
{{{
	'Any part of the program
	   that produces:
	 - a value
	 - a side effect
	    (=printing to screen etc)
			--
	="the actual work
	 performed in a program"  dprograli-p44
	--
	(eg. 42 and "hello" are expressions
	 =since they echo (=produces themselves))
	--
	a = 10  #=assignment expression
			--
			--  complex/compound expr(*):
	 writeln("It's ", currentTemperature(),
			 " degrees at the moment.");
	--
	dprograli-p38
	}}}
log.expr.s testing: Equals  +  truth/falseness (*!)  @@
{{{
	daysInWeek == 7		  // true
	monthsInYear == 11	  // false
	}}}
Logical Or / And  (+short-circuiting (**))  @@
{{{
	Or **    ||
	 --  ('coffee =false', 'tea =true')
	writeln("There is warm drink: ",
			existsCoffee || existsTea);
	 = returns true(!!)
	--
	And *   &&
	 --
	writeln("I will drink coffee: ",
			wantToDrinkCoffee && existsCoffee);
	 --
	 --
	Short-circ.ing
	   ='right side is not eval.d
	    if truth-val. can be established
		 just by eval.ing left side'
				--
	 - true || ...
	 - false && ...
	 --
	+ See Truth-Tables ***(*!)
	dprograli-p39,40
	}}}
Log. iff ('if and only if') + Chess-example ***(*)  @@
{{{
	'I will play chess, if one (but not both)
	 of Jim/Bob shows up'
	--
	If, and only If    ^
	 --
	writeln("I will play chess: ", jimShowedUp ^ bobShowedUp);
	--
	dprograli-p40 **
	}}}
Log. 'Not'  (="I will walk, if there is not a/no Bicycle"(**!))  @@
{{{
	writeln("I will walk: ", !existsBicycle);
	 --
	dprograli-p41
	}}}
Log.testing: +Grouping Log.expr.s w. Parentheses (*!)  [I am happy:  if exists coffee or tea  + also  cookies or scones]  **
{{{
	writeln("I am happy: ",
	(existsCoffee || existsTea) && (existsCookie || existsScone));
	 --
	dprograli-p41
	}}}
'Reading bool input'  (+=autom. (type) conversion)
{{{
	=bool val.s true and false
	 are autom. printed as "true" and "false"
	  -- +backwards:
	 readf() autom. converts strings "true" / "false"
	 to the bool val.s false and true  (**)
	--
	dprograli-p41
	}}}
	----

Ch. 10
http://ddili.org/ders/d.en/if.html

	----
'STATEMENTS' as defined in D  ***(*)
{{{
	[unlike expr.s  don't (in themselves) produce values/side effects
	but are: 'features that affect the execution of expressions'
	 --
	(+= determines whether, and in what order the program/(=)expressions
	are executed)
	--
	dprograli-p44
	}}}
if  + block and scope  @@
{{{
	if (  ) {     #=logical expr./test in parentheses
	 --
	the code to be run + enclosing braces    =a 'scope'
	 --
	the code within a scope    =a 'block of code'
	 --
	dprograli-p44
	}}}
recommended style for braces in D (=concerning blocks**)  @@
{{{
	line of its own (=as opposed to inline) **
	 --
	https://dlang.org/dstyle.html
	 --
	dprograli-p45
	}}}
braces for single statem. after an if  @@
{{{
	used most of the time, even when not necessary
	 --
	dprograli-p45
	}}}
One situation for 'naked if:s' (**!!)  @@
{{{
	if, else if, else--chains (**!)
		--
	if (existsCoffee) {
		writeln("Drink coffee at home");
	} else if (existsBicycle) {
		writeln("Ride to the good place");
	} else if (neighborIsHome) {
		writeln("Have coffee at neighbor's");
	} else {
		writeln("Walk to the bad place");
	}
	    --
	dprograli-p46,47
	}}}
((the bool type))
{{{
	bool existsLemonade {
	  --
	dprograli-p47
	}}}
	----

	----
while + testing a num. from a user (=0 or greater)  @@
{{{
	import std.stdio;
	  .
	void main() {
		int number;
		   .
		while (number >= 0) {
			write("Please enter a number: ");
			readf(" %s", &number);
			   .
			writeln("Thank you for ", number);
		}
		    .
		writeln("Exited the loop");
	}
	    --
	dprograli-p48
	}}}
the continue-statement (+all statements it works with)  @@
{{{
	  if (number == 13) {
	  	writeln("Sorry, not accepting that one...");
	  	continue;
	  }
	  --
	while, do-while, for, foreach
	  --
	dprograli-p49
	}}}
break-statement (*)  @@
{{{
	  if (number == 42) {
	  	writeln("FOUND IT!");
	  	break;
	  }
	  --
	dprograli-p49
	}}}
teterm: important concepts for a programmer to know ab. integer types + int-operations (!!)  @@
{{{
	- the 'bit length of a type'
	- overflow (=wrap-around)  **(*)
	- truncation  (=cutting decimals/fractional parts from float values (*!))
	  --
	dprograli-p51
	}}}
two to the power of 4   ,   power + assign  (**)  @@
{{{
	2 ^^ 4
		  = (2 * 2 * 2 * 2)
		  .
	^^=
	  --
	dprograli-p51;p57(*)
	}}}
(knowl. ab. integers/nums and programmers (!!(*)))  @@
{{{
	'Programmers must understand how integers are stored in computers'  (=how 3 milj. + 3 milj. can give wrong results--example)*!
	  --
	dprograli-p52
	}}}
Int-types + num. of bits, init-val.s (**/!)  @@
{{{
	byte	8	   0
	ubyte	8	   0
	short	16	   0
	ushort	16	   0
	int		32	   0
	uint	32	   0
	long	64	   0L
	ulong	64	   0LU
	}}}
	----

	----
(explain the def.values 0L and 0LU for long/ulong ((!))  @@
{{{
	are so called 'manifest constants' (??)
	[manifest expression ='a programming language construct that a compiler can analyse to deduce which values it can take without having to execute the program']
	 --
	=are equal to 0   (+typed as long and ulong respectively)
	 --
	dprograli-p52
	}}}
Recommended int-Type to use (most of the time) (**!!)  @@
{{{
	'as long as there is no specific reason not to'
	   --
	use int (**)  #=for integer values
	  --
	dprograli-p53
	}}}
increment the var 'number'  (*)  @@
{{{
	++number;
	 --
	dprograli-p54
	}}}
show/produce maximum/minimum val. for certain (int-)type ****!!  @@
{{{
	writeln("maximum int value   : ", int.max);
	 --
	dprograli-p54
	}}}
	----

	----
the classic example of mod. (=odd/even)  (**!!)  @@
{{{
	if ((number % 2) == 0) {
		writeln("even number");
	} else {
		writeln("odd number");
	}
	  --
	dprograli-p56,57
	}}}
post-increment vs pre-increment
{{{
	pre-increment (=most common/regular use)
	writeln(++number);   #will have been incremented directly/before this print
	  --
	post-increment (=more rare)
	writeln(number++);   #will NOT have been incremented directly/before this print
	  = 1 will print as 2 only on next(!!) echo(*!)
	 --
	dprograli-p58
	}}}
ADDING ETC. W. PROTECTION FOR OVERFLOW**(*)  @@
{{{
	import core.checkedint;
	 ...
	 ...
	int result = adds(a, b, hasOverflowed);
	 ...
	  --
	(eg. detecting whether operation has overflowed)
	[+ std.experimental.checkedint w. the 'Checked template']
	  --
	dprograli-p59
	}}}
Some Remarks/Pecul.s of Float-types *  @@
{{{
	- adding 0.001 thous. times  is not same as adding 1 (!!)
	- using log.op.s == and != w. fl.point types  is erroneous (in most cases)
	- init-val. of fl.point types is .nan (not 0)  +.nan cannot be used in compar.operations
	- the two overflow val.s for fl.point types:  .infinity / -.infinity
	   (=because of this  'dont remain silent on overflow'(!))
	 --
	dprograli-p62
	}}}
	----

	----
D's Float-Types (***)  (+num of bits, init.val.s)
{{{
	float	  32	 float.nan
	double	  64	 double.nan
	real	  64	 real.nan
			  #(maybe even 80)
			  #  dep. on hardware
	 --
	dprograli-p62
	}}}
FLOATING-POINT TYPES--PROPERTIES (***!!)  #more than other types  @@
{{{
	name of the type    .stringof
	byte-length/size of type    .sizeof
	max val. of type    .max
	 --
	dprograli-p62
	}}}
fl.t.props:  smallest pos. val. type can represent  (=w. its normal precision) **(*)  @@
{{{
	.min_normal
	  #smaller can be represented, but not as precisely
	  --
	dprograli-p62
	}}}
fl.t.props:  precision of the type (=specif. as num. of digits) **!  @@
{{{
	.dig
	}}}
fl.t.props:  special val. used to denote overflow  @@
{{{
	.infinity
	}}}
when .nan can appear (aside fr. as def.val. for fl.type)  (!)  @@
{{{
	=may appear as result of meaningless fl.point expressions
	(+see table (!))
	#  eg. zero / zero   infin / infin   infin - infin
	 --
	dprograli-p63
	}}}
	----

	----
.nan is so useful because __  (**!!)  @@
{{{
	(- because indicates uninit. val.)
	- .nan propagates through computations =making it easier and earlier to detect errors
	***
	 --
	dprograli-p63
	}}}
 spec. syntax: 12300 | 0.00567  in exponential-form  (**)
{{{
	1.23e+4
	5.67e-3
	 --
	dprograli-p63,64
	}}}
writeln num digits of precision(!!)  (etc properties)
{{{
	import std.stdio;
	  .
	void main() {
		writeln("Type	      : ", float.stringof);
		writeln("Precision    : ", float.dig);
		 ...
		 ...
	 --
	dprograli-p64
	}}}
Int.Types-safety vs Fl.Types-safety (**!)  @@
{{{
	D's float-types are safer than its integer-types  because:
	 - they do not(!) ignore overflow  (=becomes .infinity / -.infinity)
	****
	 --
	dprograli-p65
	}}}
100 / 3  w. precision of 4
{{{
	(33.33 would have the precision of 4 digits)
	}}}
what affects precision of fl.point arithm.operations? (*)  @@
{{{
	=the num. of bits of fl.point-types used to hold num.s for the operation
	 --
	dprograli-p65
	}}}
division:  get  3 / 2 is 1.5 *(*)  @@
{{{
	double first = 3;
	double second = 2;
	writeln(first / second);
	 --
	 (=int.division cannot preserve the fractional part of a result)
	 --
	dprograli-p65
	}}}
Which fl.point-type to Choose/Use (**!!)  @@
{{{
	general use    double  **
	 --
	(very) limited memory    float
	very high-precision calculations    real
	  --
	dprograli-p66
	}}}
range of float precision types ((??)/!*)  @@
{{{
	"1/3 cannot be exactly repres. in the decimal number-system"
	 --
	'in binary, the floats represent halves, quarters, eights (etc.)'
	 (eg. only val.s that are exact comb.s of those digits can be repres. exactly)
	}}}
	----

	----
(the example using var 'number' as a loop counter  for a while-loop)  @@
{{{
	=not recommended
	"Use a foreach-loop instead"
	 --
	dprograli-p67
	}}}
Comparison for Fl.Point-Types (**!!)  @@
{{{
	special (!!)
	 --
	Uses ==, !=, >, >= (etc)
	 but:
	.nan represents invalid fl.p.values
	=comparing w. .nan is not meaningful
	 --
	 --
	'Unorderedness'
	='being unordered means at least one of the values is .nan
	****
	 --
	dprograli-p67
	}}}
only comparisons that are meaningful w. .nan (***)  @@
{{{
	== and !=
	 --
	dprograli-p67
	((concerning equals(==)
	  although meaningful to use w. .nan, always produces false, even for
	  double.nan == double.nan (!!(*))
	}}}
(Working) Comparison(=equality) w. .nan (****** !!!!!)  @@
{{{
	isNaN()
	 --
	(variable == double.nan)  // WRONG
		.
	import std.math;
	if (isNaN(variable)) {    // correct
	 --
	dprograli-p67,68
	}}}
Eq.Comparison: Val. is Not(!!) .nan  ******  @@
{{{
	use  !isNaN()
	(note: != would alw. produce true)
	 --
	dprograli-p68
	}}}
	----

Arrays **

	----
define an array (w. ten slots for int.vals // five slots for float-vals) ****!!!  @@
{{{
	int[10] arrayOfTenValues;
	double[5] values;
	 --
	dprograli-p69
	}}}
teterm: Vars which only store a Single Value  @@
{{{
	'scalar variables'
	 --
	dprograli-p69
	}}}
(general form of array-def +) Can use userdefined types (**)  @@
{{{
	nameofCustomtype(**)[valcount] varName;
	 -- eg.
	bool[cityCount] weatherConditions;
	StudentInformation[studentCount] studentInformation;
	 --
	dprograli-p69 ...
	}}}
teterm: 'the var.s of a container are called __'  @@
{{{
	'elements'
	 --
	dprograli-p70
	}}}
teterm: 'the number of elem.s of an array are called __'
{{{
	the 'length' of the array
	 --
	dprograli-p70
	}}}
first elem of array 'values' **(!!)  @@
{{{
	values[0]
	}}}
Set val of 12th month-elem  (to 31) ****  (+def / access array) *  @@
{{{
	int[12] monthDays;
	monthDays[11] = 31;  #(**!!)
	writeln("January has ", monthDays[0], " days.");
	 --
	dprograli-p70
	}}}
monthsarray-example: Print num of days for January (**)  #=use var-val as array-index(**)  @@
{{{
	writeln("This month has ", monthDays[monthIndex], " days.");
	 --
	dprograli-p71
	}}}
	----

	----
Defining a simple Dynamic Array (**!!)
{{{
	int[] dynamicArray;
	 --
	dprograli-p71
	}}}
Get num of Elem.s // Set num of Elem.s  (for Arrays // a Dynamic Array)  ****  @@
{{{
	Get length for Arrays (static and dynamic)
	     --
	.length
	writeln("The array has ", array.length, " elements.");
	 --
	 --
	Set length for Arrays (=dynamic)
	     --
	int[] array;         // initially empty
	array.length = 5;
	 --
	 --
	dprograli-p71,72
	}}}
readf(" %s", &values[counter]);  'also sets val for array'
{{{
	=????
	 --
	dprograli-p72,73
	}}}
set initvals of array directly (=at initialization) **!!  @
{{{
	int[12] monthDays =
		[ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];
	(+READ NUM. OF MONTH + ECHO NUM. OF DAYS ****)
	 --
	dprograli-p73
	}}}
init array-vals to same val ((**))
{{{
	int[10] allOnes = 1;
	 --
	dprograli-p73
	}}}
(copy 5-elem. array (named 'source') into empty 5 elem. array (named 'destin')) (**)
{{{
	int[5] source = [ 10, 20, 30, 40, 50 ];
	int[5] destin;
	destin = source;
	 --
	dprograli-p73
	}}}
	----

[add elem.s to dynam. arrays (!!/*)]

	----
Add Elem.s to End of Dynam. Array **(****!!)  @@
{{{
	~=  //combine two arrays + assign result back to lhs a.
	 --
	int[] array;
	array ~= 7;    // array is now equal to [7]
	array ~= 360;  // array is now equal to [7, 360]
	array ~= [ 30, 40 ];  // array is now equal to [7, 360, 30, 40]
	 --
	dprograli-p73
	 --
	 --
	++ (of course) the ~= operator cannot be used when lhs a. is fixed-length(!)
	int[20] result;
	// ...
	result ~= first;  // =compilation error
	 --
	dprograli-p74
	 --
	 --
	+Important(!)
	'result' (=target-array) must be same/exact size of
	arrays 'first' and 'second' combined (**/(!!!!))
	 --
	dprograli-p75
	}}}
REM. ELEM(S) FR. DYNAM. ARRAY **(**)  *****  @@
{{{
	Method 1.
		--
	// rem. elem. no 2
	array = array.remove(1);
	  # (has to be assigned back to the array to be 'recorded')
	--
	Method 2.
	// specify elem.s to remove w. a lambda function
	  (eg. remove elements equal to 42) ****(**) !!
	array = array.remove!(a => a == 42);
	  # (+also assigned back to array to be 'recorded')
	--
	dprograli-p74
	}}}
Combine (=Concat.) two Arrays (******(!!))  @@
{{{
	= the '~' operator
	 --
	// f./sec. =arrays w. length 10
	result = first ~ second;
	writeln(result.length);   // prints 20
	 --
	dprograli-p74
	}}}
Sorting Arrays (+many o. types of collections) (****!!(!))  @@
{{{
	std.algorithm.sort
	 --
	// of course, import std.algorithm first
	int[] array = [ 4, 3, 1, 5, 2 ];
	sort(array);
	 --
	dprograli-p75
	}}}
Reverse Array (in place(!))  #+for other collections(??/*)  @@
{{{
	std.algorithm.reverse
	 --
	reverse(array);  //array w. name 'array'
	 --
	dprograli-p75
	}}}
	----

(Characters - Ch. 15) (##)

(characteristics of the char type of other langs)
{{{
	='in many progr.langs':
	 - char.s are represented by the 'char'-type
	 - can hold only 256 distinct values
	}}}
Unicode (+the etymology of Unicode)(*)
{{{
	=each character has a unique code (**/!!)
	 --
	dprograli-p78 **
	}}}
'The way char.s are repres. in electr. mediums is called ___'  @
{{{
	their 'encoding'(!)
	}}}
	----
'three Unicode encodings that corresp. to D's char.types' ((!!)/*)  @@
{{{
	utf-8, utf-16, utf-32
	 --
	UTF-32
	 - uses for bytes (=32 bits)  for every u-code-char.
	 - order of bytes may be diff. on diff. comp.systems
	 (- uses 0:s for 'filler bytes')
	 - =wasteful format for mostly normal(!) ascii
	UTF-16 (+benefit/drawbacks)
	 - uses 2 bytes (=16 bits)  for most of the u-code-char.s
	 (- uses additional bytes to repres. the less common char.s)
	 - order of bytes may be diff. on diff. comp.systems
	 - Uses less mem. than U32 // But more complic. to process(!!)
	    (=because some(!) char.s repres. by more than 2 bytes)
	--
	UTF-8 (**)
	 - uses 1 byte for ascii-equiv. char.s (*)
	 - uses 2 bytes for most Eur.langs spec.char.s (**)
	 (- rest repres. by 2-4 bytes (!))
	--
	 - for most western-lang doks (eg. eng), utf-8 takes up least am. of space
	 - ascii can be opened directly (=w.out conversion) as utf-8 (**)
	 --
	 --
	dprograli-p78 // 79
	}}}
The Three Char-Types of D *****(!!)   (+definition  and  init-val)  @@
{{{
	char	 utf-8 code unit		  0xFF
	 --
	wchar	 utf-16 code unit		  0xFFFF
	 --
	dchar	 utf-8 code unit		  0x0000FFFF
			 # and u-code code-point
	 --
	dprograli-p79
	}}}
	----

15.4 char. literals

chars ('a')  (vs strings)
{{{
	char. literals
	='constant values written in the program as part of the source code'
	 --
	char letter_a = 'a';   //char.literals in D
						   // =spec.d w.in single quotes (!!)
	 --
	Note!! "-quotes are reserved for strings (!!)
	 --
	dprograli-p79
	}}}
What values can var.s of type 'char' hold? (**!)  @
{{{
	=only letters that are in the ASCII-table (**)
	 --
	dprograli-p79
	}}}
inputting characters as 'named characters' (**)  @@
{{{
	'\&euro'  etc
	 --  (eg.)
	wchar currencySymbol = '\&euro;';
	 --
	(=named character-entities)
	  https://dlang.org/spec/entity.html
	 --
	dprograli-p79
	}}}
ALL NUMERIC WAYS OF REPRES. CHAR.S (=incl. Unicode \uxxxx // \Uxxxxxxxx  @@
{{{
	// int. u-code value
	 char a = 97;
	// ascii-val. in octal/hex
	 char questionMarkOctal = '\77';
	 char questionMarkHexadecimal = '\x3f';
	// U-code-val. (=Hex)*(*)
	 wchar Ğ_w = '\u011e';
	 dchar Ğ_d = '\U0000011e';
	-- --
	(+the methods can be used w.in strings)
	 writeln("Résumé preparation: 10.25€");
	 writeln("\x52\&eacute;sum\u00e9 preparation: 10.25\&euro;");
	 --
	dprograli-p80
	}}}
Spec.methods for Repres. Spec.Chrs directly in Strings ******  @
{{{
	(+'the methods can be used w.in strings')
	--
	 writeln("Résumé preparation: 10.25€");
	 writeln("\x52\&eacute;sum\u00e9 preparation: 10.25\&euro;");
	 --
	dprograli-p80
	}}}
(Get/Print Several lines w. write() **(**))  @
{{{
	write("first line\nsecond line\nthird line\n");
	 --
	dprograli-p80
	}}}
	----
	----
(getting  single quote / backslash  as char(??/*))
{{{
	\'
	\\
	 --
	dprograli-p81
	}}}

Functions useful w. Unicode (**(**!))  @@
{{{
	std.uni
	}}}
predicate-functions for Unicode: l/ucase?, alpha/wh.space (etc)  @@
{{{
	isXxxx
	 --
	isLower
	isUpper
	isAlpha
	isWhite
	 --
	writeln("Is z alphanumeric? ",       isAlpha('z'));
	writeln("Is \&euro; alphanumeric? ", isAlpha('\&euro;'));
	 --
	dprograli-p81
	}}}
u-code for producing char.s  (=uppercase char.s (etc)) **  @@
{{{
	toXxxx
	 --
	toLower
	toUpper
	 --
	writeln("The lowercase of İ: ", toLower('İ'));
	  #+watch it with 'consistent' (etc) alphabets
	  #  eg. Turkish
	 --
	dprograli-p81
	}}}
## Problems w. reading char.s fr. i-stream  [because of D's power/flexib. unicode-char.s]  !!
{{{
	import std.stdio;
	   .
	void main() {
		char letter;
		write("Please enter a letter: ");
		readf(" %s", &letter);
		writeln("The letter that has been read: ", letter);
	}
	  .
	# only ascii--devices may handle correctly
	# but, unicode environments (like lin-term) will not
	## (=many 'higher' characters are repres. by two codes
	    but onle the first is read)
	# +due to the fact that i/o-streams are  char-streams
	 --
	((note/later: easier to read char.s as strings
	  rather than dealing w. UTF-codes individually))
	dprograli-p83
	}}}
teterm: code unit  @
{{{
	'the values that make up the UTF-encodings'
	 --
	=in UTF-8:
	   'a'   made up of one code unit
	   'ğ'   made up of two(!) code units(*)
	 --
	dprograli-p83
	}}}
teterm: code point (@)
{{{
	every letter, symbol etc that the u-code-standard defines
	 - eg. 'a' and 'ğ' are two distinct code points
	--
	dprograli-p83
	}}}
	----
Tip: When to use  dchar, char, wchar  (****(!!(!)))  @@
{{{
	char:
	 - for utf-8 encoding
	 - not suitable to repres. char.s in general, but supports the ascii-table
	wchar:
	 - for utf-16 encoding
	 - not suitable to repres. char.s in general, but supports multip. alphabets
	dchar:
	 - for utf-32 encoding
	 - can represent code points
	--
	dprograli-p84
	}}}
	----

Ch. 16 -  Slices + other Array Features

  @n: 3yyp}ddzc3-			#copy last q&a-post + bump i-number 1
  @s: o----yypO				#split (=put ---- + blank line + ----)

define 'static(|fixed) array'  = "Days of Months" (w. 12 elem.s) ****(*!)
{{{
	int[12] monthDays = [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];
	--
	dprograli-p85
	}}}
Define Slices (=the Number Range Syntax) ****(!!): slice "daysofmonths"-array (eg. "first quarter", etc) ****  @@
{{{
	use 'number range' syntax (**)
	--
	___ = monthDays[0 .. 3];  //0, 1, 2 are included
								(but not 3)
	 --
	int[] firstQuarter = monthDays[0 .. 3];
	int[] secondQuarter = monthDays[3 .. 6];
	int[] thirdQuarter  = monthDays[6 .. 9];
	int[] fourthQuarter = monthDays[9 .. 12];
	--
	dprograli-p85
	}}}
[Note: Number ranges  vs  Phobos ranges (**(!))]
{{{
	='Phobos ranges are about struct and class interfaces.'
	--
	dprograli-p85
	}}}
	----
[note: 'Modifying an element of a slice ...' (=causes what?)]  +  Modif. first val.s for each slice in '4 Quarters'-slices (**)
{{{
	='modifies the elem. of the actual array' (=that the changed slice elem. points to)
	--
	firstQuarter[0]  = 1;
	secondQuarter[0] = 2;
	thirdQuarter[0]  = 3;
	fourthQuarter[0] = 4;
		--
	writeln(monthDays);
	--
	dprograli-p85
	}}}
slice of all(!!) elem.s of a 3-elem. array  @@
{{{
	exArray[0..3]
	  // =for the last elem. to be included
	    the length of the array must be specified
	--
	dprograli-p86
	}}}
	----

	----
[ print|echo length of dyn.array named "slice" (**(!!)) ]  @@
{{{
	writeln("The length of the slice: ", slice.length);
	--
	dprograli-p86
	}}}
array-syntax: Length of the Array (=wh. indexing) ****(!!)  @@
{{{
	writeln(array[array.length - 1]);  // the last element
	writeln(array[$ - 1]);             // alternate (shorthand)
										    syntax (!!)
	--
	dprograli-p86
	}}}
Copying|Duplicating an Array (****(!))  @@
{{{
	using the .dup property (**!)
	on an existing array (**)
	--
	double[] array = [ 1.25, 3.75 ];
	double[] theCopy = array.dup;
	--
	--
	 (ex 2: create array for 'days of month'
	  for leap-years(!))
			--
	import std.stdio;
				.
	void main() {
    int[12] monthDays =
        [ 31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31 ];
				.
		int[] leapYear = monthDays.dup;
				.
		++leapYear[1];   // increments the days in February
				.
		writeln("Non-leap year: ", monthDays);
		writeln("Leap year    : ", leapYear);
	}
	--
	dprograli-p86
	}}}
("Assignment ('=') for  fixed-length arrays vs slices")  @
{{{
	for fixed-length arrays:
			=modifies values of elem.s in the array
			 (=just like w. variables(!) )
	for slices:
			=make (=set to) provide access to new elem.s
			 (=like in the ex, shifting betw. 'odds' and 'evens')
	.
	___SEEMORE=PRACTICE ___SLICESYNTAX (*****(**))
		slice = odds[2 .. $ - 2];	// fr. third -->third fr. end (*****)
		slice = evens[1 .. $ - 1];	// fr. second --> sec. to last (******)
	--
	dprograli-p87
	}}}
for the slice   int[] slice = [ 1, 3, 5, 7, 9, 11, 13, 15 ][sk]  =Make slice w. half / 25% of the elements (****(!!))  @@
{{{
	int[] half = slice[0 .. $ / 2];
	int[] quarter = slice[0 .. $ / 4];
	--
	dprograli-p87
	}}}
	----

slices, stomping etc (**)

(add one elem. w. value of 42  to slice|array 'quarter' (**(!)) )
{{{
	quarter ~= 42;
	--
	dprograli-p88
	}}}
(increase length of slice|array 'quarter' by: 1, 5 (**) )  @@
{{{
	++quarter.length;
	quarter.length += 5;
	--
	dprograli-p88
	}}}
case where adding elem.(s) to shared slice will not(!) terminate sharing  (*)  !
{{{
	=wh. adding the elem.(s) to the longest(!) slice
	 + 'there is room at the end of it'
	--
	dprograli-p89
	}}}
'Reserving room for elements' ((**)/????)  ___SEEMORE ___HMMM
{{{
	import std.stdio;
					.
	void main() {
		int[] slice;
					.
		slice.reserve(20);
		writeln(slice.capacity);
					.
		foreach (element; 0 .. 17) {
			slice ~= element; // ← these elements will not be moved
		}
	}
	--
	 (='capacity for at least(!) 20 elem.s'
	  + elements of slice would be moved only after there are more than 31 elements (=????) )
	--
	dprograli-p90
	}}}
	----
"Using the capacity-property ((actually a function(!))) to determ. whether sharing will be terminated  ((****(!!)))  @@
{{{
	if (slice.capacity == 0) {
		/* Its elements would be relocated if one more element
		 * is added to this slice. */
					.
		// ...
					.
	} else {
		/* This slice may have room for new elements before
		 * needing to be relocated. Let's calculate how many: */
					.
		auto howManyNewElements = slice.capacity - slice.length;
					.
		// ...
					.
	}
	--
	 when the val. of capacity is 0
	 = that is not the longest orig. slice
	 (=adding elem.s would relocate other
	  and therefore sharing will terminate)
	 --
	 when val. is nonzero, that is the longest orig.slice
	   --
	 then(**): capacity denotes total num. of elem.s this
	  slice can hold w.out needing to be copied(**!!)
	--
	 The calculation "capacity - length"
		=the num. of new elem.s that can be added (****(!!))
	--
	dprograli-p89
	}}}
	----

Operations on all(!) elements (**)

Carry out an operation (eg. addition) on All elem.s of an Array (=static or dynamic)  (****(!!))  @@
{{{
	import std.stdio;
			.
	void main() {
		double[3] a = [ 10, 20, 30 ];
		double[3] b = [ 2, 3, 4 ];
			.
		double[3] result = a[] + b[];
			// ='[]' means 'all(!) elements'
			.
		writeln(result);
	}
	--
	(  =>  [12, 23, 34]  )
	 --
	[ can use +, -, *, /, ^^, ^, &, |, -, ~  operators]
	[  also:  =, +=, -=, *=, /=, %=, ^^=, ^=, &=, |=  ]
	 --
	Of course(=for this example):
		length of the two arrays has to be equal(!!) (*)
	 --
	can be used w. two arrays (of course)
	 + can be used w. an array and a compatible expression
			--
	  double[3] a = [ 10, 20, 30 ];
	  a[] /= 4;
	--
	dprograli-p91
	}}}
('be careful' ( slice2 = slice1  vs  slice3[] = slice1 ))
{{{
	providing access to same elem.s as slice 1
		vs.
	changing the val.s of slice3
		..
		((see more))
		..
	[[ =linking to(!!)  vs  copying ]]   (( !!! (****) ))
	--
	 ( 'The danger here is that the potential bug may not be noticed until after the value of a shared element is changed.' )
	--
	dprograli-p91,p92
	}}}
	----
'Multi-dimensional Arrays' ((****(!!)))  @@
{{{
	the elem.type of array elements can be any other type
	 =including other arrays(!!)
	--
	int[] array = [
				  	10,
				  	20,
				  	30,
				  	40
				  ];
		--
	((+'making the code conform to the array defin. syntax' (####(/***)) ))
				.
	int[][] array = [
					  [ 10, 11, 12 ],
					  [ 20, 21, 22 ],
					  [ 30, 31, 32 ],
					  [ 40, 41, 42 ]
					];
	--  (+adding to the array etc)
	--
	array ~= [ 50, 51 ]; // adds a new element (i.e. a slice)
	array[0] ~= 13;		 // adds to the first elem.
	--
	dprograli-p92,p93
	}}}
Fixed-length multi-dim. Arrays (!!(**))  @@
{{{
	int[2][3][4] array; // 2 columns, 3 rows, 4 pages
	  // eg. '2x3 rooms in 4-storey building
		  of an adventure game(!!)
	--
	 ++itemCounts[1][0][0];
	--
	+'SLICE OF SLICES'(!!)
		eg. int[][] s = new int[][](2, 3);
	___SEEMORE ___SLICESYNTAX  ___HMMM
	--
	dprograli-p93
	}}}
Tut: Iterate over elem.s of array + halve ones greater than 10 (!!(**))   ___SEEMORE ___SLICESYNTAX  ___Exercise  (****(!!))  @@
{{{
	double[] array = [ 1, 20, 2, 30, 7, 11 ];  // =array to process
	  // suggested method of making solution (=for this exercise)
	 --
	(Eg. 'start w. slice providing access to all elem.s'
	 + 'shorten the slice from the beg. + always use the first elem.')
			slice = slice[1 .. $];
	--
	dprograli-p94
	}}}
	----
summary: concerning '$' and 'array-name.length'
{{{
	=are equvalent within the '[] operator' (!!)
	--
	dprograli-p94
	}}}




___Dlangali_2

  TODO: pick out and study all instances of four and especially foreach ****(*)
  TODO: pick out and study examples of static for each

Ch. 17 - Strings  (**)

Why use readln + strip instead of readf  [***]
{{{
	- readf reads until end of input, including(!) all control characters like Ent, etc
	- cannot tell readf() how many char.s to read
	--
	 + readln does not need to use
		- %s
		- &
	   when reading (**)
	--
	dprograli-p95
	}}}
combining strip and readline (**)  @@
{{{
	strip(readln())
	--
	dprograli-p96
	}}}
Parsing strings (=a bit like printf) **(**)  @@
{{{
	formattedRead()
	  # =in std.format
	--
	dprograli-p96,p97
	}}}
Checking num of items that could be parsed + converted successfully (=w. readf() / formattedRead())  **(*)  @
{{{
	uint items = formattedRead( ......
	--
	dprograli-p97
	}}}
The three string types (=corresp. to the three char-types) **  @@
{{{
	string[]
	wstring[]
	dstring[]
	--
	dprograli-p97
	}}}
	----
	----
'The three string aliases' (****)  @@
{{{
	string
	wstring
	dstring
		+are/gives immutable vars (****)
	--
	dprograli-p97
	}}}

produce an immut. string var (=fr. a mutable char var) **  @@
{{{
	used the .idup property (*)
	--
	dprograli-p98
	}}}
s ~ '.'   #+producing an immutable variant  @@
{{{
	=adding a '.' to the string s (?/**)
	 ..
	string result = (s ~ '.').idup;
	--
	dprograli-p98
	}}}
+for bad e to é (etc) replacements: (**)  @@
{{{
	=use dchar
	--
	dprograli-p98
	}}}
"résumé"d  (=is what? + d stands for __)  @@
{{{
	=an array of dchars
	--
	 +'To avoid dealing with this and many other Unicode issues, consider using a Unicode-aware text manipulation library in your programs.'
	--
	dprograli-p99
	}}}
'The optional char after string literals' (**)
{{{
	"string"c
	"string"w
	"string"d
	--
	dprograli-p99
	}}}
Example array operations on strings ***  @@
{{{
	~
	~=
	--
	dprograli-p99,p100
	}}}
Comparing string values *  (!!Tut)*  @
{{{
	w. '==', '<=' etc  *
	--
	dprograli-p100
	}}}
Compare strings ic (***)  @@
{{{
	icmp()
		(std.string)
	--
	dprograli-p101
	}}}
'strings are arrays, and therefore also ___'  ****  @
{{{
	'ranges' (= good to use
	  std.array / algorithm / range (****)
	--
	dprograli-p101
	}}}
ch. 18: redirecting stdin/out(**): [[taking stdin fr. a file (= + both stdin/out)]]  +piping  @
{{{
	./one_tenth < by_two_result.txt > one_tenth_result.txt
	--
	dprograli-p102,p103
	}}}
	----
	----
(Exercise: indexing for string) *  @
{{{
	=using indexOf(), lastIndexOf()
	 + "ptrdiff_t"
	--
	dprograli-p101
	}}}


Ch. 19 - Files (****)

Opening a file ****  @@
{{{
	File fname = File("student_records", "r");
	--
	dprograli-p104
	}}}
Closing a file **  @
{{{
	=checking w. an if
		(+often happens automatically
		 when File objects are terminated)
	--
	dprograli-p105
	}}}
concerning close and open--functions (**)  @
{{{
	In some cases a file object may need to be re-opened to access a different file or the same file with different access rights. In such cases the file must be closed and re-opened:
		..
	file.close();
	file.open("student_records", "r");
	--
	dprograli-p105
	}}}
determine the end of a file (**)  @
{{{
	the eof() member function (**)
	  ..
	while (!file.eof()) {
		// ...
	}
	--
	dprograli-p105
	}}}
std.file  (*** ****)
{{{
	=the module contains functions + types
	 useful wh. working w. contents of directories(!!)
	--
	eg. determine whether a file|dir exists on the system: ****
			.
			.
	import std.file;
			.
	// ...
			.
	if (exists(fileName)) {
		// there is a file or directory under that name
			.
	} else {
		// no file or directory under that name
	}
	--
	dprograli-p105
	}}}
	----
	----
Describe basic Usage of the File struct (****)  @
{{{
	(= included in the std.stdio module)
	--
	use by    specify the name of the file y. want to open
			  +desired access rights|mode
	(=uses same mode char.s as c's fopen
		r		read
		r+		read+write
		w		write
		w+		read+write
		a		append
		a+		read+append
	--
	dprograli-p106
	}}}

ZZZZ=next p106 'Writing to a file' (****)
[[NOTE: No PageNums Beyond this Point]]

	----
Writing to and reading from files *
{{{
    Since files are character streams, input and output functions writeln, readf, etc. are used exactly the same way with them.
      .
     stdout.writeln("hello");
    file.writeln("hello");
	--
	dprograli-p
	}}}
determine the end of a file
{{{
    The eof() member function determines whether the end of a file has been reached while reading from a file. It returns true if the end of the file has been reached.
      For example, the following loop will be active until the end of the file:
      .
    while (!file.eof()) {
	--
	dprograli-p
	}}}
module that contains functions and types that are useful when working with contents of directories. For exampledetermine whether a file or a directory exists on the file systems:
{{{
    import std.file;
      .
    // ...
      .
    if (exists(fileName)) {
        // there is a file or directory under that name
    } else {
        // no file or directory under that name
      --
    The std.file module contains functions and types that are useful when working with contents of directories. For example, exists
    --
    dprograli-p
    }}}
The File struct is included in the ____ module.
{{{
    in the std.stdio module.
	--
	dprograli-p
	}}}
Opening files w. the File struct **
{{{
    To use it you specify the name of the file you want to open and the desired access rights, or mode.
    It uses the same mode characters that are used by fopen of the C programming language:
	--
	dprograli-p
	}}}
A 'b' character may be added to the mode string, as in "rb".
{{{
    This may have an effect on platforms that support the binary mode, but it is ignored on all POSIX systems.
	--
	dprograli-p
	}}}
Open file in Write mode (=inside the main) *
{{{
    File file = File("student_records", "w");
    file.writeln("Name  : ", "Zafer");
     ...
	--
	dprograli-p
	}}}
'it is not possible to construct File objects by using mutable text to specify the file name (e.g. char[]).'
{{{
    =the type of literals like "student_records" is string, consisting of immutable characters.
    =When needed, call the .idup property of the mutable string to get an immutable copy.
	--
	dprograli-p
	}}}
read from a file *
{{{
    File file = File("student_records", "r");
      .
    while (!file.eof()) {
        string line = strip(file.readln());
        writeln("read line -> |", line);
	--
	dprograli-p
	}}}
          ----

auto  etc

          ----
Avoid repetition like in  File file = File("student_records", "w");
{{{
    auto var = VeryLongTypeName(/* ... */);
    =the compiler can infer the type of the left-hand side from the expression on the right-hand side.
	--
	dprograli-p
	}}}
"auto" does not come from automatic type inference.
{{{
    It comes from automatic storage class, which is a concept about the life times of variables.
	--
	dprograli-p
	}}}
"borrow"(?) the type fr. var or literal (*)
{{{
    typeof(value) value2;
    typeof(100) value3;
      .
    you would typically use it in more elaborate scenarios, where you want the type of your variables to be consistent with some other piece of code whose type can vary.
    This keyword is especially useful in templates and mixins, both of which will be covered in later chapters.
	--
	dprograli-p
	}}}
how far above its use recomm. to define a var? *
{{{
    it is accepted as good programming practice that variables be defined closest to where they are first used.
	--
	dprograli-p
	}}}
'Contrast the code above to the one below that defines the variables later, as each variable actually starts taking part in the program:'
{{{
	=see more
	--
	dprograli-p
	}}}
benefits of defining variables as late as possible: *(*)
{{{
    Speed:
    Risk of mistakes:
    Readability:
    Code maintenance:
	--
	dprograli-p
	}}}
about the for Loop
{{{
    for is used much less than foreach in practice, it is important to understand the for loop first.
	--
	dprograli-p
	}}}
____ can terminate the loop as well.
{{{
    A break statement or a thrown exception
	--
	dprograli-p
	}}}
An Example for-loop *
{{{
    for (int number = 1; number < 11; ++number) {
        writeln(number);
    }
	--
	dprograli-p
	}}}
    ----

    ----
the D for-loop syntax: 'It has two sections, the first of which consisting of the preparation and the loop condition.'
{{{
    here is how to define two variables of different types in the preparation section:
      .
    for ({ int i = 0; double d = 0.5; } i < 10; ++i) {
	--
	dprograli-p
	}}}
The name scope of the for-loop variable *
{{{
    In contrast, when using a while loop the variable is defined in the same name scope as that which contains the loop, and therefore the name is accessible even after the loop:
	--
	dprograli-p
	}}}
if vs ternary **
{{{
    if: being a statement, it does not have a value; if merely affects the execution of code blocks.
    On the other hand, the ?: operator is an expression. In addition to working similary to the if-else statement, it produces a value.
      .
    Because it uses three expressions, the ?: operator is called the ternary operator.
	--
	dprograli-p
	}}}
initialize a variable with 366 if it is leap year, 365 otherwise: **
{{{
    int days = isLeapYear ? 366 : 365;
      .
    With an if statement, one way to do this is to define the variable without an explicit initial value and then assign the intended value:
    -- Ex. 2
    writeln("The glass is half ", isOptimistic ? "full." : "empty.");
    -- Ex. 3
    score += isGammon ? 2 : 1;
	--
	dprograli-p
	}}}
The type of the ternary expression
{{{
    The types of these two expressions (eg. t or fy) need not be the same but they must have a common type.
	--
	dprograli-p
	}}}
simple way of determining the type of an expression is
{{{
    using typeof and then printing its .stringof property:
      .
    int i; double d;
    auto result = someCondition ? i : d;
    writeln(typeof(result).stringof);
	--
	dprograli-p
	}}}
A solution (=the num. and string example) is to first convert count to string. ** **
{{{
    =The function to!string from the std.conv module produces a string value from the specified parameter:
      .
    writeln((count == 12) ? "A dozen" : to!string(count), " items will be shipped.");
	--
	dprograli-p
	}}}
Integer literals can be written in one of four ways:
{{{
	dec, hex, bin, oct
    --
    0x12ab00fe
    0b01100011
	--
	dprograli-p
	}}}
make the code (eg. num literals) more readable, ** (!)
{{{
    1_234_567
      .
    separate the currency units from the cents, as in 
    199_99.
      .
      .
    1_000.5.
	--
	dprograli-p
	}}}
    ----

    ----
In the octal system: The literals are specified using (!)
{{{
    the octal template from the std.conv module
    as in octal!576.
	--
	dprograli-p
	}}}
'When the value happens to be too large to be represented by an int, the compiler uses the following logic to decide on the type of the literal:'
{{{
	see more
	--
	dprograli-p
	}}}
if a value ends with L or U, or both **
{{{
	L  long
	U  unsigned
	LU UL  ulong
	--
	dprograli-p
	}}}
hex floating point literals **
{{{
    0x9a.bc
	--
	dprograli-p
	}}}
exponent *
{{{
    3.4e5     340000
    7.8e-3
	--
	dprograli-p
	}}}
hexadecimal exponent (*)
{{{
    0xabc.defP4
    P4  =  "2 to the power of 4".
      (=not(!) 10 to the pow. of)
	--
	dprograli-p
	}}}
2e3
{{{
	=shorthand for 2.0e3
	--
	dprograli-p
	}}}
shorthand for 0.25
{{{
	.25
	--
	dprograli-p
	}}}
floating point (literal) specifiers *
{{{
    f and F specifiers mean float,
    and the L specifier means real. For example;
    1.2 is double,
    3.4f is float, and
    5.6L is real.
	--
	dprograli-p
	}}}
    ----

    ----
char. literal examples
{{{
    'a', '\n', '\x21'
	--
	dprograli-p
	}}}
the char. literals ___ and ___ are both the exclamation point.
{{{
    '\x21'
    '\41'
	--
	dprograli-p
	}}}
As the Unicode character code: When the literal is specified with u followed by 4 // U followed by 8 hexadecimal digits, then its type is ___ **
{{{
    wchar
    dchar   For example,
    '\u011e'
    '\U0000011e'
	--
	dprograli-p
	}}}
As named character entity: D supports all character entities from HTML 5. **
{{{
    For example,
    '\&euro;' is €,
    '\&hearts;' is ♥, and
    '\&copy;' is ©.
	--
	dprograli-p
	}}}
Wysiwyg string literals (*)
{{{
    `c:\nurten`
    r"c:\nurten"
       (=otherwise, \n  etc)
	--
	dprograli-p
	}}}
'Delimited' string literals (??)/(*)
{{{
    =the value of q".hello." is "hello";
      .
    As long as it ends with a new-line, the delimiter can have more than one character:
      .
    writeln(q"MY_DELIMITER
    first line
    second line
    MY_DELIMITER");
      .
      Such a multi-line string literal including all the indentation is called a heredoc.
	--
	dprograli-p
	}}}
Token string literals (!)
{{{
    =start with q and that use { and } as delimiters can contain only legal D source code:
      .
    auto str = q{int number = 42; ++number;};
    writeln(str);
      .
    tip: 'particularly useful to help text editors display the contents of the string as syntax highlighted D code.'
	--
	dprograli-p
	}}}
Types of string literals: the characters of "hello"d are of type
{{{
    immutable(dchar)
      .
    +possib.s are:
    (def. is immutable(char)[].)
    +An appended c, w, or d character specifies the type of the string explicitly as immutable(char)[], immutable(wchar)[], or immutable(dchar)[],
    (+ aliased as string, wstring, and dstring, respectively.)
	--
	dprograli-p
	}}}
It is possible to specify literals as expressions. *
{{{
    2_678_400 (=seconds)
      vs
    it is possible to specify it by the terms that make up that value, namely 60 * 60 * 24 * 31.
	--
	dprograli-p
	}}}
    ----

FORMATTED OUTPUT **  (=SEE MORE(!!))
  = features of the std.format module **

    ----
Flags and format specifiers (!(!))
{{{
    - + # 0
    s b d o
    x f e a g
      X F E A G
    , (  ) |
	--
	dprograli-p
	}}}
=The invoice example (*) (eg.  ensure that there always are two digits after the decimal mark)
{{{
    use writef() and writefln().
    writefln("Item %d:%9.02f", i + 1, items[i]);
      .
    associated with the respective parameter, usually in order of appearance.
    (Format specifiers may have parameter numbers as well.
      .
      .
    %  flags  width  separator  precision  format_character
      %%  = %
    %b o x X d
	--
	dprograli-p
	}}}
ex: write num. in hex format (**)
{{{
    writefln("Hexadecimal: %x", value);
      .
    s   e f g a (etc)
      (+bool  etc)
	--
	dprograli-p
	}}}
width: If the width is specified as the character *
{{{
    then the actual width value is read from the next argument (that argument must be an int).
	--
	dprograli-p
	}}}
format: The comma character specifies
{{{
    to separate digits of a number in groups (def. =3)
      .
    writefln("%,f", 1234.5678);        // Groups of 3
    writefln("%,s", 1000000);          // Groups of 3
    writefln("%,2s", 1000000);         // Groups of 2
      .
    writefln("%,*s", 1, 1000000);      // Groups of 1
	--
	dprograli-p
	}}}
specify the separator character
{{{
    by using a question mark after the comma
      .
    writefln("%,?s", '.', 1000000);    // The separator is '.'
	--
	dprograli-p
	}}}
Precision is specified
{{{
    after a dot in the format specifier.
        writefln("%.3g", value);
	--
	dprograli-p
	}}}
writefln("Left-aligned          :|%-10d|", value);
{{{
    see more
	--
	dprograli-p
	}}}
#: prints the value in an alternate form depending on the format_character
{{{
    ??  = see more
      (eg. %#x )
	--
	dprograli-p
	}}}
    ----

    ----
using position numbers within format specifiers (??/**(*))
{{{
    specified immediately after the % character, followed by a $:
      .
    good because:
    - being able to use the same argument in more than one place in the same format string:
      .
    writefln("%1$d %1$x %1$o %1$b", 42);
      .
    - supporting multiple natural languages.
    writefln("There are %s students in room %s.", count, room);
      .
    There are 20 students in room 1A.
      .
      .
    auto format = (language == "en"
           ? "There are %s students in room %s."
           : "%s sınıfında %s öğrenci var.");
      .
    writefln(format, count, room);
	--
	dprograli-p
	}}}
tip(!): avoid information appearing in reverse order (?)
{{{
    To avoid this, the arguments can be specified by numbers, such as 1$ and 2$, to associate each specifier with the exact argument:
	--
	dprograli-p
	}}}
Format specifiers between %( and %)
{{{
    are applied to every element of a container (e.g. an array or a range):
      .
    auto numbers = [ 1, 2, 3, 4 ];
    writefln("%(%s%)", numbers);
	--
	dprograli-p
	}}}
The regular characters before and after the element format are repeated for each element. For example, the {%s}, specifier would print each element between curly brackets separated by commas:
{{{
    The regular characters before and after the element format are repeated for each element.
      .
    writefln("%({%s},%)", numbers);
	--
	dprograli-p
	}}}
___ is used for specifying the characters that should be printed even for the last element. (+= 'useful tricks')
{{{
    %|
	--
	dprograli-p
	}}}
For example, the following format specifier would print the closing curly bracket after the last element but not the comma:
{{{
    writefln("%({%s}%|,%)", numbers);
	--
	dprograli-p
	}}}
strings that are printed as elements appear within double quotes:
{{{
    When the double quotes are not desired, the element format must be started with %-( instead of %(:
      .
    writefln("%-(%s, %)", vegetables);
	--
	dprograli-p
	}}}
There must be two format specifiers for associative arrays:
{{{
    = one for the keys and one for the values.
      .
    auto spelled = [ 1 : "one", 10 : "ten", 100 : "hundred" ];
    writefln("%-(%s (%s)%|, %)", spelled);
	--
	dprograli-p
	}}}
    ----

    ----
Formatted output is (=also) available through *
{{{
    the format() function of the std.string module
        .
    import std.stdio;
    import std.string;
        .
    void main() {
        write("What is your name? ");
        auto name = strip(readln());
            .
        auto result = format("Hello %s!", name);
    }
	--
	dprograli-p
	}}}
Checked format string (??/(****))
{{{
    There is an alternative syntax for functions like format in the standard library that take a format string (writef, writefln, formattedWrite, readf, formattedRead, etc.).
        (=??)
    It is possible to provide the format string as a template argument to these functions so that the validity of the format string and the arguments are checked at compile time:
    .
void main() {
    writefln!"%s %s"(1);       // ← compilation ERROR (extra %s)
    writefln!"%s"(1, 2);       // ← compilation ERROR (extra 2)
    writefln!"%s %d"(1, 2.5);  // ← compilation ERROR (mismatched %d and 2.5)
}
      .
    catches potential programmer errors at compile time,
	--
	dprograli-p
	}}}
The ! character above is(=means) **(*)
{{{
    the template instantiation operator,
	--
	dprograli-p
	}}}
Formatted Input: specifies both the data that is to be read and the characters that should be ignored.
{{{
    D's input format specifiers are similar to the ones present in the C language.
	--
	dprograli-p
	}}}
the format specifier " %s"
{{{
    reads the data according to the type of the variable.
      .
    double number;
    readf(" %s", &number);
      .
    The format string makes it possible to select specific information from the input and ignore the others.
	--
	dprograli-p
	}}}
Let's assume that the student number and the grade are expected to appear at the input in the following format: number:123 grade:90 (+the tags number: and grade: must be ignored) *
{{{
    int number;
    int grade;
    readf("number:%s grade:%s", &number, &grade);
      (plus more on the example)
	--
	dprograli-p
	}}}
Format specifier characters
(=The way the data should be read)
{{{
    d o x f s c
	--
	dprograli-p
	}}}
    ----

    ----
The do-while loop is very similar to the while loop(, but)
{{{
    the condition check is performed at the end of each iteration of the do-while loop, so that the actual work is performed at least once:
      .
    For example, do-while may be more natural in the following program where the user guesses a number, as the user must guess at least once so that the number can be compared:
    (( uniform(
	--
	dprograli-p
	}}}
The function uniform() that is used in the program
{{{
    is a part of the std.random module.
    It returns a random number in the specified range.
	--
	dprograli-p
	}}}
Associative Arrays **: Associative arrays are implemented in D using
{{{
    a hash table
	--
	dprograli-p
	}}}
te: sparse key values.
{{{
    ??
	--
	dprograli-p
	}}}
The syntax of associative arrays **
{{{
    value_type[key_type] associative_array_name;
    int[string] dayNumbers;
      .
    The keys of associative arrays can be of any type, including user-defined struct and class types.
	--
	dprograli-p
	}}}
Note: An associative array that is defined without any element is (='value')
{{{
    null, not empty
    (=important consequence when passing associative arrays to functions)
	--
	dprograli-p
	}}}
build the association between a key and a value (=assign it) (*)
{{{
    'normal assignment'
      .
    dayNumbers["Monday"] = 0;
	--
	dprograli-p
	}}}
printing an associative array with writeln yields ___
{{{
    ["Monday":0, "Tuesday":222]
	--
	dprograli-p
	}}}
Initialization directly with keys values (**)
{{{
    int[string] dayNumbers = [ "Monday"   : 0, "Tuesday" : 1, "Wednesday" : 2, ...
	--
	dprograli-p
	}}}
    ----

    ----
remove key and value Tuesday from the dayNumbers array (**)
{{{
    dayNumbers.remove("Tuesday");
	--
	dprograli-p
	}}}
removes all elements (from an assoc. array) (*)
{{{
    dayNumbers.clear;
	--
	dprograli-p
	}}}
determine whether a given key exists in an associative array **(*)
{{{
    if ("purple" in colorCodes) {
        // key "purple" exists in the table
        .
    } else {
        // key "purple" does not exist in the table
    }
	--
	dprograli-p
	}}}
use a default value if a key does not exist in the associative array **
{{{
    writeln(colorCodes.get("purple", -1));
	--
	dprograli-p
	}}}
Assoc. Array Properties **(!)
{{{
    .length
        returns the number of key-value pairs.
    .keys  *
        returns a copy of all keys as a dynamic array.
    .byKey  *
        provides access to the keys without copying them; we will see how .byKey is used in foreach loops in the next chapter.
    .values
        returns a copy of all values as a dynamic array.
    .byValue
        provides access to the values without copying them.
    .byKeyValue
        provides access to the key-value pairs without copying them.
    .rehash  (**)
        may make the array more efficient in some cases, such as after inserting a large number of key-value pairs.
    .sizeof  (??)
        is the size of the array reference (it has nothing to do with the number of key-value pairs in the table and is the same value for all associative arrays).
    .get
        returns the value if it exists, the default value otherwise.
    .remove
        removes the specified key and its value from the array.
    .clear
        removes all elements.
	--
	dprograli-p
	}}}
translate English colors to Turkish--program
{{{
    (see more)
	--
	dprograli-p
	}}}
How can all of the key-value pairs of an associative array be removed other than calling .clear?
{{{
    - remove one by one
    - assign empty array
    - assign empty array plus(?) assign array's init property
	--
	dprograli-p
	}}}
fetch emre's grades from array (*)
{{{
    grades["emre"]
	--
	dprograli-p
	}}}
The D foreach Loop **(*)
{{{
    = applying the same operations to every element of a container (or a range)
	--
	dprograli-p
	}}}
    ----

    ----
print all elements of an array with a regular for loop // foreach loop ****(**)
{{{
    for (int i = 0; i != array.length; ++i) {
        writeln(array[i]);
    }
       .
    foreach (element; array) {
        writeln(element);
    }
       .
       .
    auto values = aa.values;
    for (int i = 0; i != values.length; ++i) {
        writeln(values[i]);
    }
       .
    foreach (value; aa) {
        writeln(value);
    }
	--
	dprograli-p
	}}}
foreach (i, element; array) {
{{{
    When two names are specified in the names section, they represent an automatic counter and the value of the element, respectively:
      .
    foreach (i, element; array) {
        writeln(i, ": ", element);
    }
	--
	dprograli-p
	}}}
foreach with strings (!!)
{{{
    the character
    the counter and the character
        .
    foreach (c; "hello") {
        writeln(c);
    }
        .
    foreach (i, c; "hello") {
        writeln(i, ": ", c);
    }
    --
    Note(!)
    UTF code units for char and wchar
    , not Unicode code points:
	--
	dprograli-p
	}}}
foreach with strings 2: One way of iterating over Unicode characters of strings in a foreach loop
{{{
    is stride from the std.range module.
      .
import std.range;
          .
// ...
          .
    foreach (c; stride("abcçd", 1)) {
        writeln(c);
    }
	--
	dprograli-p
	}}}
When using foreach with associative arrays,
{{{
    a single name refers to the value, while two names refer to the key and the value, respectively:
    foreach (value; aa) {
        writeln(value);
    }
        .
    foreach (key, value; aa) {
        writeln(key, ": ", value);
    }
        .
        .
    +Associative arrays can provide their keys and values as ranges as well.
    .byKey, .byValue, and .byKeyValue return efficient range objects that are useful in contexts other than foreach loops as well.
	--
	dprograli-p
	}}}
iterating over just the keys of an associative array:
{{{
    '.byKey is the only efficient way of iterating over just the keys of an associative array:'
      .
    foreach (key; aa.byKey) {
        writeln(key);
    }
	--
	dprograli-p
	}}}
.byKeyValue provides each key-value element through a variable that is similar to a tuple.
{{{
    The key and the value are accessed separately through the .key and .value properties of that variable:
    foreach (element; aa.byKeyValue) {
        writefln("The value for key %s is %s",
             element.key, element.value);
    }
	--
	dprograli-p
	}}}
foreach with number ranges (*)
{{{
    foreach (number; 10..15) {
        writeln(number);
    }
      .
    (=10 would be included in the range but 15 would not be)
	--
	dprograli-p
	}}}
foreach with structs, classes, and ranges (eg. user-defined types)
{{{
    Structs and classes provide support for foreach iteration either by their opApply() member functions, or by a set of range member functions.
      .
    +two options for other containers:
    - std.range.enumerate
    - Defining and incrementing a counter variable explicitly:
        .
    size_t i = 0;
    foreach (element; container) {
        // ...
        ++i;
    }
        .
        .
    +when counting a specific condition as well.
    (eg.  counts only the values that are divisible by 10: ) (***)
	--
	dprograli-p
	}}}
    ----

    ----
'The copy of the element, not the element itself'
{{{
    The foreach loop normally provides a copy of the element, not the actual element that is stored in the container. This may be a cause of bugs.
    (eg.  the following program that is trying to double the values of the elements of an array: )
      .
      .
    When the actual elements need to be operated on, the name must be defined as a reference of the actual element, by using the ref keyword:
      .
    foreach (ref number; numbers) {
        number *= 2;
    }
        .
    The ref keyword makes number an alias of the actual element at each iteration.
	--
	dprograli-p
	}}}
foreach_reverse to iterate in the reverse direction
{{{
    see more
    (+The use of foreach_reverse is not common because the range function retro() achieves the same goal.)
	--
	dprograli-p
	}}}
switch is
{{{
    a statement that allows comparing the value of an expression against multiple values.
	--
	dprograli-p
	}}}
switch case syntax (*)
{{{
    switch (expression) {
        .
    case value_1:
        // operations to execute if the expression is equal to value_1
        // ...
        break;
      ...
      ...
    default:
        // operations to execute if the expression is not equal to any case
        // ...
        break;
    }
      .
    (("simple equality, not used directly as logical expression"(?)))
	--
	dprograli-p
	}}}
use of goto in switch statements *
{{{
    When needed in rare situations, goto case makes the program execution jump to the next case:
      .
    goto case;
      .
    three uses: to next case, to default, to the case that matches that expression.
      .
    goto case 10;
    goto default;
	--
	dprograli-p
	}}}
The expression (=in a switch) must be
{{{
    an integer, string, or bool type
	--
	dprograli-p
	}}}
Ranges of values // Distinct values (=in the case part of a switch) (*)
{{{
    case 2: .. case 5:
    case 2, 4:
	--
	dprograli-p
	}}}
The final switch statement
{{{
    cannot have a default section.
    no value ranges
    +'if the expression is of an enum type, ...'
	--
	dprograli-p
	}}}
When to use switch (!!)
{{{
    comparing the value of an expression against a set of values that are known at compile time.
    (if just two values, if statement might be better)
	--
	dprograli-p
	}}}
+tip: when to use the final switch *
{{{
    When all of the values need to be handled, then prefer final switch.
    This is especially the case for enum types.
	--
	dprograli-p
	}}}
    ----

    ----
enum is
{{{
    enables defining named constant values
	--
	dprograli-p
	}}}
why use enums (=the effects of magic constants on code quality) (+Example of defining an enum) **
{{{
    enum enables giving names to such constants and, as a consequence, making the code more readable and maintainable.
      .
    if (operation == Operation.add) {
      .
    enum Operation { add = 1, subtract, multiply, divide }
      .
    enum TypeName { ValueName_1, ValueName_2, /* etc. */ }
    enum TypeName : base_type { ValueName_1, ValueName_2, /* etc. */ }
	--
	dprograli-p
	}}}
TypeName defines what the constants collectively mean. All of the member constants of an enum type are listed within curly brackets. (??)
{{{
    enum Suit { spades, hearts, diamonds, clubs }
    enum Fare { regular, child, student, senior }
      .
      .
    if (result == HeadsOrTails.heads) {
	--
	dprograli-p
	}}}
The member constants of enum types are by default implemented as
{{{
    int values
    (Note: It is possible to choose a type other than int when needed.)
      .
    Unless explicitly specified by the programmer, the numerical values of enum members start at 0 and are incremented by one for each member.
      .
    It is possible to manually (re)set the values at any point in the enum.
      .
      .
    If int is not suitable as the base type of the enum values, the base type can be specified explicitly after the name of the enum: (eg. double)
	--
	dprograli-p
	}}}
Let's assume that a named constant is needed to represent the number of seconds per day.
{{{
    = sometimes it may not be natural to come up with enum type names just to use named constants
      .
    enum secondsPerDay = 60 * 60 * 24;
	--
	dprograli-p
	}}}
te: manifest constants
{{{
    =??
	--
	dprograli-p
	}}}
minimum and maximum values of an enum type *
{{{
    The .min and .max properties
	--
	dprograli-p
	}}}
When the values of the enum type are consecutive, they can be iterated over in a for loop
{{{
    enum Suit { spades, hearts, diamonds, clubs }
        .
    for (auto suit = Suit.min; suit <= Suit.max; ++suit) {
        writefln("%s: %d", suit, suit);
    }
	--
	dprograli-p
	}}}
    ----

    ----
iterating over all values of an enum (a foreach loop over that range would leave the .max value out of the iteration) **
{{{
    a correct way of iterating over all values of an enum is using the EnumMembers template from the std.traits module:
      .
    import std.traits;
    // ...
        foreach (suit; EnumMembers!Suit) {
            writefln("%s: %d", suit, suit);
    }
	--
	dprograli-p
	}}}
instantiate template EnumMembers on 'Suit' **
{{{
    EnumMembers!Suit
	--
	dprograli-p
	}}}
convert enum type to other type by an explicit type cast
{{{
    suit = cast(Suit)1;  // now hearts
	--
	dprograli-p
	}}}
fundamental types are building blocks of
{{{
    program data
	--
	dprograli-p
	}}}
    ----
 
FUNCTIONS **

    ----
functionality of functions =overview **
{{{
    Parameters, Overloading, Function Pointers, Delegates, and Lambdas (etc)
	--
	dprograli-p
	}}}
'Functions are features that ' (**)
{{{
    put statements and expressions together as units of program execution.
	--
	dprograli-p
	}}}
naming a function (***)
{{{
    given a name that describes what they(=the expr.s and statem.s) collectively achieve.
	--
	dprograli-p
	}}}
the simple printMenu function *
{{{
    void printMenu() {
        writeln(" 0 Exit");
        writeln(" 1 Add");
        writeln(" 2 Subtract");
        writeln(" 3 Multiply");
        writeln(" 4 Divide");
    }
    --
    void main() {
        printMenu();

        // ...
    }
	--
	dprograli-p
	}}}
tip: Some of the powers of functions come from the fact that
{{{
    their behaviors are adjustable through parameters.
	--
	dprograli-p
	}}}
take first post of printMenu function from parameter input **
{{{
    void printMenu(string firstEntry) {
        writeln(" 0 ", firstEntry);
        writeln(" 1 Add");
        writeln(" 2 Subtract");
        writeln(" 3 Multiply");
        writeln(" 4 Divide");
    }
    --
    +use w.
    printMenu("Exit");
	--
	dprograli-p
	}}}
The parameters of the function must be separated by
{{{
    commas
    void printMenu(string firstEntry, int firstNumber) {
        ( + ??)
	--
	dprograli-p
	}}}
In previous chapters, we have defined expressions as entities that do work. Function calls are ___
{{{
    expressions as well: they do some work. Doing work means producing a value or having a side effect:
	--
	dprograli-p
	}}}
Having side effects: Side effects are
{{{
    any change in the state of the program or its environment.
    (+some functions in D end up doing no work at all)
	--
	dprograli-p
	}}}
    ----

    ----
The value that a function produces as a result of its work is called
{{{
    its return value.
	--
	dprograli-p
	}}}
a function that adds two values of type int and returns their sum also as an int would be defined as follows:
{{{
    int add(int first, int second) {
        // ...  the actual work of the function ...
    }
	--
	dprograli-p
	}}}
tip: nested functions (*)
{{{
    writeln("Result: ", add(5, 7));
	--
	dprograli-p
	}}}
yield the return value of a function **
{{{
    int add(int first, int second) {
        int result = first + second;
        return result;
    }
	--
	dprograli-p
	}}}
The function above returns 0 when the two parameters are equal, and the product of their values when they are different. **(*)  ('It is possible to have more than one return statement in a function.')
{{{
    'The function above returns 0 when the two parameters are equal, and the product of their values when they are different.'
	--
	dprograli-p
	}}}
A common guideline for function names is *
{{{
    that they contain a verb like add or print
    However, it is acceptable to name functions simply as nouns if those functions do not have any side effects.
    eg. currentTemperature() instead of getCurrentTemperature().
	--
	dprograli-p
	}}}
Defining a function that might appropriately be named as print() (takes a slice as a parameter and prints it)
{{{
    void print(int[] slice) {
        foreach (i, element; slice) {
            writefln("%3s:%5s", i, element);
        }
    }
      .
      .
    (+further refactoring)
      .
    int readInt(string message) {
        int result;
        write(message, "? ");
        readf(" %s", &result);
        return result;
    }
      .
      .
    'This would also eliminate the need for the "Read the numbers" comment because the name of the new function would already carry that information.'
      .
      .
    The following is the final version of the program:
	--
	dprograli-p
	}}}
This can be overcome by taking advantage of format:
{{{
    (see more)
	--
	dprograli-p
	}}}
indication that lines (of code) could better be moved to a newly defined function (**)
{{{
    Sometimes the need to write a comment to describe the purpose of a group of lines of code is an indication
	--
	dprograli-p
	}}}
For that reason, it is beneficial to try to write programs without the need for comments. **
{{{
    - may indicate the need to refactor code into functions
    - may become outdated and can even become misleading
	--
	dprograli-p
	}}}
'the Canvas Program'
{{{
    see more
	--
	dprograli-p
	}}}
    ----

Immutability (*)

    ----
Modifying a variable is called
{{{
    mutating that variable.
	--
	dprograli-p
	}}}
const, immutable, inout, and shared are **
{{{
    type qualifiers
	--
	dprograli-p
	}}}
There are three ways of defining variables that can never be mutated [*]
{{{
    enum constants
    immutable variables
     Immutable parameters (??)
	--
	dprograli-p
	}}}
As long as their values can be determined at compile time, enum variables can be initialized with return values of functions as well:
{{{
    (+first some value initializations)
      .
    void main() {
        enum fileName = name() ~ ".txt";
        enum totalSquares = totalLines() * totalColumns();
    }
      .
    The D feature that enables such initialization is compile time function execution (CTFE), which we will see in a later chapter.
	--
	dprograli-p
	}}}
An enum constant is a manifest constant,
{{{
    meaning that the program is compiled as if every mention of that constant had been replaced by its value.
	--
	dprograli-p
	}}}
enum manifest constants: =are good for ___
{{{
    makes sense for simple types like int and makes no difference to the resulting program, enum constants can bring a hidden cost when they are used for arrays or associative arrays:
      .
      .
    For that reason, it may make more sense to define arrays and associative arrays as immutable variables if they are going to be used more than once in the program.
	--
	dprograli-p
	}}}
Unlike enum, an immutable variable is *
{{{
    an actual variable with a memory address, which means that we can set its value during the execution of the program and that we can refer to its memory location.
    (+ comparisons of usage of enum and immutable)
	--
	dprograli-p
	}}}
The program asks for the user to guess a number that has been picked randomly (+ why one has to use immutable over enum) **(*)
{{{
    the random number cannot be determined at compile time,
    +Still, since the randomly picked value must never be changed after having been decided, it is suitable to specify that variable as immutable.
      .
    immutable number = uniform(min, max + 1);
	--
	dprograli-p
	}}}
Although it is not necessary to write the type fully, immutable normally takes the actual type
{{{
    within parentheses, e.g.  immutable(int).
	--
	dprograli-p
	}}}
    ----

    ----
I recommend that you prefer __ over __ for defining (unchangeable) variables *
{{{
    =prefer immutable over const for defining variables.
    The reason is that immutable variables can be passed to functions that have immutable parameters.
	--
	dprograli-p
	}}}
te: reference types
{{{
    slices
    associative arrays
    classes
      (etc)
	--
	dprograli-p
	}}}
It does not make sense that a slice is prevented from being printed just because it is immutable *(*)
{{{
    use const parameters
      void print(const int[] slice)
	--
	dprograli-p
	}}}
In contrast (=to const parameters), immutable parameters bring a strong requirement: *(*)
{{{
    =only immutable variables can be passed to functions as their immutable parameters:
	--
	dprograli-p
	}}}
(Among the types that we have seen so far, only slices and associative arrays are reference types; the others are
{{{
    value types.
	--
	dprograli-p
	}}}
may give the impression that, being more flexible, const parameters should be preferred over immutable parameters. This is not always true. **(*)
{{{
    - const erases the information about whether the original variable was mutable or immutable.
    (+ can use .idup as a 'half-solution')
      ..
      ..
    Templates can help.
    The following function template foo() can be called both with mutable and immutable variables.
      .
      .
    import std.conv;
    // ...
      .
    /* Because it is a template, foo() can be called with both mutable
     * and immutable variables. */
    void foo(T)(T[] slice) {
        /* 'to()' does not make a copy if the original variable is
         * already immutable. */
        bar(to!(immutable T[])(slice));
    }
	--
	dprograli-p
	}}}
explain: 'the type of an immutable slice has been printed as immutable(int[])' (tip*)
{{{
    As the parentheses after immutable indicate, it is the entire slice that is immutable.
      In most cases, what is important is the immutability of the elements themselves.
	--
	dprograli-p
	}}}
To specify that only the elements are immutable we use **(*)
{{{
    the immutable keyword with parentheses that enclose just the element
    immutable(int)[] immSlice = [ 1, 2 ];
	--
	dprograli-p
	}}}
As you may remember, the three string aliases involve immutability: (= string is an alias for ___ **
{{{
    immutable(char)[]
    + wstring is an alias for immutable(wchar)[]
    + dstring is an alias for immutable(dchar)[]
      .
    + The type of literal "hello"c is string
    The type of literal "hello"w is wstring
    The type of literal "hello"d is dstring
	--
	dprograli-p
	}}}
    ----

(Summary: Immutability(*))

    ----
const and immutable are transitive *
{{{
    = ??
    const is transitive: any data reached through a const variable is const as well.)
	--
	dprograli-p
	}}}
How to use (=mutable vs. immutable val.s) (!!)
{{{
    prefer immutable variables over mutable ones.
    Define constant values as enum if their values can be calculated at compile time. For example, the constant value of seconds per minute can be an enum
      enum int secondsPerMinute = 60;
      enum secondsPerMinute = 60;
        (=type can be inferred from right hand side)
    hidden cost of enum arrays and enum associative arrays.  (=Define them as immutable variables if the arrays are large and they are used more than once in the program.)
      ++
      ++
      (=SEE MORE)
	--
	dprograli-p
	}}}
Ex.Function reverse() (!!**)
{{{
    see more (!)
	--
	dprograli-p
	}}}
enum variables represent immutable concepts that
{{{
    are known at compile time
	--
	dprograli-p
	}}}
immutable variables represent immutable concepts that
{{{
    must be calculated at run time, or that must have some memory location that we can refer to
	--
	dprograli-p
	}}}
immutable(int[]) specifies that
{{{
    neither the slice nor its elements can be modified.
	--
	dprograli-p
	}}}
immutable(int)[] specifies that
{{{
    only the elements cannot be modified.
	--
	dprograli-p
	}}}
    ----

    ----
This chapter introduces the concepts of value types and reference types. These concepts are particularly important to understand the differences between *
{{{
    structs and classes
	--
	dprograli-p
	}}}
Value comparison vs Address comparison
{{{
    (=see more (*))
	--
	dprograli-p
	}}}
ex. of value types (*)
{{{
    integer and floating point types
    fixed-length arrays
      (= carry their own values)
	--
	dprograli-p
	}}}
When variables of value types are copied, **(*)
{{{
    they get their own values:
	--
	dprograli-p
	}}}
simple assert check
{{{
    assert(speed == newSpeed)
	--
	dprograli-p
	}}}
The == operator that appears in many examples throughout the book compares variables
{{{
    by their values.
	--
	dprograli-p
	}}}
Check if speed and newSpeed have separate identities (=different addresses although they have the same values) **(!)
{{{
    assert(speed != newSpeed);
	--
	dprograli-p
	}}}
th Address-of operator (**(*))
{{{
    &
	--
	dprograli-p
	}}}
The & operator tells readf()
{{{
    where to put the input data.
     (?? /(*))  (='an explicit pointer')
	--
	dprograli-p
	}}}
    ----

    ----
print the addresses of two variables:
{{{
    writeln("newSpeed: ", newSpeed, " address: ", &newSpeed);
      .
    newSpeed: 123 address: 7FFF4B39C73C
      .
      .
    Note: It is normal for the addresses to have different values every time the program is run.
	--
	dprograli-p
	}}}
____ indicates that those two integers are placed next to each other in memory.
{{{
    the fact that the two addresses are 4 apart
      (=in hex values)
	--
	dprograli-p
	}}}
Reference variables
{{{
    ??(?)
	--
	dprograli-p
	}}}
the act of accessing a value through a reference is called **(*)
{{{
    dereferencing
	--
	dprograli-p
	}}}
Modifications made on a reference variable change
{{{
    the value of the actual variable
	--
	dprograli-p
	}}}
Using ref in foreach loops: **(*)
{{{
    makes the loop variable the actual element that corresponds to that iteration.
      When the ref keyword is not used, the loop variable is a copy of the actual element.
	--
	dprograli-p
	}}}
ref and out function parameters:
{{{
    Function parameters that are specified as ref or out are aliases of the actual variable the function is called with.
	--
	dprograli-p
	}}}
Variables of reference types have ____ but they do not have ____
{{{
    they have individual identities but they do not have individual values.
    They provide access to existing variables.
	--
	dprograli-p
	}}}
Contrary to reference variables, reference types are not simply aliases.
{{{
    To see this distinction, let's define another slice as a copy of one of the existing slices:
      .
      .
    Reference variables do not have identities, they are aliases of existing variables.
    Variables of reference types have identities but they do not own values; rather, they provide access to existing values.
    (= ???)
	--
	dprograli-p
	}}}
    ----

    ----
One of the differences between C++ and D (=concerning references and values) *(*)
{{{
    that classes are reference types in D **
      (+ an example:
    class MyClass {
        int member;
    }
       .
    auto variable = new MyClass;
       .
       .
    (+Just like with slices, when variable is copied, the copy becomes another reference to the same object.)
	--
	dprograli-p
	}}}
associative arrays. Like slices and classes, when an associative array is copied or assigned to another variable,
{{{
    both give access to the same set of elements:
	--
	dprograli-p
	}}}
With ____ and ___, the assignment operation changes the actual value:
{{{
    value types
    reference variables
	--
	dprograli-p
	}}}
On the other hand, with reference types, the assignment operation changes
{{{
    which value is being accessed.
      (????)
	--
	dprograli-p
	}}}
For example, a MyClass variable can be defined without an actual object having been created by new:
{{{
    (= see more **)
	--
	dprograli-p
	}}}
Module variables *
{{{
    =are defined at module level, outside of all of the functions. They are globally accessible to all of the code in the module.
	--
	dprograli-p
	}}}
take an array and repeat it the specified number of times *
{{{
    The replicate() function of the std.array module
	--
	dprograli-p
	}}}
Summary: 'Variables of value types ...'
{{{
    (=see more)
	--
	dprograli-p
	}}}
    ----

    ----
In the code above, the two variables are passed as arguments to weightedAverage().
{{{
    may give the false impression that the function uses the actual variables that have been passed as arguments.
    In reality, what the function uses are copies of those variables.
	--
	dprograli-p
	}}}
If the new elements need to be appended to the original slice, then the slice must be passed as ref:
{{{
    ?? (=see more)
      (='Surprising reference semantics of slices
	--
	dprograli-p
	}}}
Surprising reference semantics of associative arrays (??)
{{{
    Associative arrays that are passed as function parameters may cause surprises as well because associative arrays start their lives as null, not empty.
      .
      .
    For that reason, it may be better to pass the associative array as a ref parameter, which will be explained below.
	--
	dprograli-p
	}}}
We have seen that functions can produce values and can have side effects. The in keyword specifies that *
{{{
    the parameter is going be used only as input:
	--
	dprograli-p
	}}}
some functions may need to produce more than one result.  (Note: It is possible to return more than one result by **(*)
{{{
    by defining the return type as a Tuple or a struct.
	--
	dprograli-p
	}}}
The out keyword makes it possible for functions to * (??)
{{{
    return results through their parameters.
    (??)
      .
      .
    Let's have a look at a function that divides two numbers and produces both the quotient and the remainder. The return value is used for the quotient and the remainder is returned through the out parameter
    (Regardless of their values at the call site, out parameters are first assigned to the .init value of their types automatically:)
      .
    (++ returning Tuple or struct types are better alternatives to out parameters.)
	--
	dprograli-p
	}}}
const also makes functions more useful by **
{{{
    allowing const, immutable, and mutable variables to be passed through that parameter:
	--
	dprograli-p
	}}}
immutable makes functions require that certain variables must be immutable.  Because of such a requirement, the following function can only be called with strings with immutable elements (e.g. (*)
{{{
    string literals):
	--
	dprograli-p
	}}}
ref parameters can be used both as input and output.
{{{
    see more
	--
	dprograli-p
	}}}
    ----

    ----
Similar to out parameters, ref parameters allow functions to have side effects as well. (??)
{{{
    In fact, reduceEnergy() does not return a value; it only causes a side effect through its single parameter.
      .
    (Note: The programming style called functional programming favors return values over side effects, so much so that some functional programming languages do not allow side effects at all.)
	--
	dprograli-p
	}}}
The same function can be written in a functional programming style by **
{{{
    returning the result, instead of causing a side effect.
    (+Note the change in the name of the function as well. Now it is a noun as opposed to a verb.)
	--
	dprograli-p
	}}}
inout (=qualifier)
{{{
    (input and output is achieved by the ref keyword.)
    inout carries the mutability of the parameter to the return type.
     ...
     ...
     ...
    inout solves this mutability problem between parameters and return values.
      .
    inout(int)[] inner(inout(int)[] slice) {
	--
	dprograli-p
	}}}
lazy: In order for add() to be called, first anAmount() and anotherAmount() must be called.
{{{
    Evaluating arguments before calling a function is called eager evaluation.
      .
      .
    +lazy:
    A classic example of this situation is a logging function that outputs a message only if the importance of the message is above a certain configuration setting:
      = The lazy keyword specifies that an expression that is passed as a parameter will be evaluated only if and when needed:
	--
	dprograli-p
	}}}
scope
{{{
    This keyword specifies that a parameter will not be used beyond the scope of the function.
        scope is effective only if the function is defined as @safe and if -dip1000 compiler switch is used.
	--
	dprograli-p
	}}}
shared
{{{
    This keyword requires that the parameter is shareable between threads of execution:
	--
	dprograli-p
	}}}
return
{{{
    Sometimes it is useful for a function to return one of its ref parameters directly.  ((!!))
	--
	dprograli-p
	}}}
The term undefined behavior describes situations where
{{{
    the behavior of the program is not defined by the programming language specification.
      (+ using the return qualifier in some situations to remedy this)
	--
	dprograli-p
	}}}
This feature is called sealed references.
{{{
    see more
	--
	dprograli-p
	}}}
Every argument is passed by copy. However, for reference types, it is ____ that is copied **
{{{
    it is the reference that is copied, not the original variable.
	--
	dprograli-p
	}}}
    ----

    ----
lvalues and rvalues: A simple way of differentiating the two is
{{{
    thinking of lvalues as actual variables (including elements of arrays and associative arrays), and rvalues as temporary results of expressions (including literals).
      (+some reference examples)
	--
	dprograli-p
	}}}
te: Compared to lvalues, rvalues have the following three limitations.
{{{
    Rvalues don't have memory addresses
      .
    An lvalue has a memory location to which we can refer, while an rvalue does not.
      .
    Rvalues cannot be assigned new values
      .
    Rvalues cannot be passed to functions by reference
	--
	dprograli-p
	}}}
Different from languages like C++, in D an rvalue
{{{
    cannot be passed to a function even if that function does not modify the argument:
	--
	dprograli-p
	}}}
As it was mentioned in the previous chapter, _____ can take both lvalues and rvalues. **
{{{
    auto ref parameters of function templates
	--
	dprograli-p
	}}}
When the argument is an lvalue, auto ref means ____
{{{
    by reference.
	--
	dprograli-p
	}}}
When the argument is an rvalue, auto ref means ____
{{{
    since rvalues cannot be passed to functions by reference, when the argument is an rvalue, it means by copy.
      ((+For the compiler to generate code differently for these two distinct cases (=lvals/rvals + auto ref), the function must be a template.
	--
	dprograli-p
	}}}
It is possible to determine whether the parameter is an lvalue or an rvalue by using **
{{{
    __traits(isRef) with static if :
	--
	dprograli-p
	}}}
Lazy evaluations can be achieved by **
{{{
    conditional tests,
    function pointers,
    delegates,
    ranges
	--
	dprograli-p
	}}}
    ----

Program Environment (*)

    ----
In reality, in most systems every program necessarily returns a value to its environment when it ends, which is called
{{{
    an exit status or return code.
	--
	dprograli-p
	}}}
when an exception is thrown, the program ends with an ____ error message.
{{{
    object.Exception error message.
	--
	dprograli-p
	}}}
To choose a specific return code we
{{{
    return a value from main() in the same way as we would from any other function. The return type must be specified as int and the value must be returned by the return statement:
	--
	dprograli-p
	}}}
suitable as the failure code (of a program)
{{{
    normally 1 is suitable as the failure code.
	--
	dprograli-p
	}}}
The arguments that are used when starting a D program are passed to that program's main() as **
{{{
    a slice of strings.
	--
	dprograli-p
	}}}
Defining ____ is sufficient to have access to program arguments. **(*)
{{{
    Defining main() as taking a parameter of type string[]
    The name of this parameter is commonly abbreviated as args.
      .
    void main(string[] args) {
	--
	dprograli-p
	}}}
The following program prints its two arguments in reverse order: **(*)
{{{
    SEE MORE (!)
	--
	dprograli-p
	}}}
parsing program arguments **(*) *
{{{
    The std.getopt module is designed to help with parsing the command line options of programs.
    eg. options like classic style
      ./deneme --an-option=17
	--
	dprograli-p
	}}}
Let's design a program that prints random numbers. Let's take the minimum, maximum, and total number of these numbers as program arguments.
{{{
    see more
	--
	dprograli-p
	}}}
    ----

    ----
For example, -c may have the same meaning as --count. Such alternative syntax for each option is specified in getopt() after
{{{
    a | character.
      .
    getopt(args, "count|c", &count,
	--
	dprograli-p
	}}}
When needed, cmdline args type conversions may also be performed explicitly *
{{{
    std.conv.to
      .
    count = to!size_t(args[1]);
	--
	dprograli-p
	}}}
The environment *
{{{
    The environment that a program is started in generally provides some variables that the program can make use of.
	--
	dprograli-p
	}}}
The environment variables can be accessed through **(*) *
{{{
    the associative array interface of std.process.environment.
      .
    writeln(environment["PATH"]);
      .
    std.process.environment provides access to the environment variables through the associative array syntax.
	--
	dprograli-p
	}}}
When needed, the environment variables can be converted to an associative array by
{{{
    using toAA():
     string[string] envVars = environment.toAA();
	--
	dprograli-p
	}}}
Programs may start other programs and become the environment for those programs. A function that enables this is (=executes its parameter as if the command was typed at the terminal) **  (+returns what?) *(*)
{{{
    executeShell, from the std.process module.
      .
    It then returns both the return code and the output of that command as a tuple.
	--
	dprograli-p
	}}}
    ----

Exceptions *

    ----
a throw statement does what?
{{{
    throws an exception object and this terminates the current operation of the program.
	--
	dprograli-p
	}}}
exceptions: they must be thrown when
{{{
    the program cannot continue with its current task.
	--
	dprograli-p
	}}}
Only the types that are inherited from the Throwable class can be thrown. Throwable is almost never used directly in programs. The types that are actually thrown are *
{{{
    types that are inherited from Exception or Error,
	--
	dprograli-p
	}}}
Error represents unrecoverable conditions and (therefore)
{{{
    is not recommended to be caught.
	--
	dprograli-p
	}}}
Exception objects are constructed with
{{{
    a string value that represents an error message.
      You may find it easy to create this message with the format() function from the std.string module:
    throw new Exception(
	--
	dprograli-p
	}}}
In most cases, instead of creating an exception object explicitly by new and throwing it explicitly by throw, the ____ function is called. **(*)
{{{
    enforce(count >= 0, format("Invalid dice count: %s", count));
	--
	dprograli-p
	}}}
The exception object that is thrown from a lower level function is (=what actions and path it takes) (*)
{{{
    transferred to the higher level functions one level at a time and causes the program to finally exit the main() function.
	--
	dprograli-p
	}}}
When to use throw *
{{{
    in situations when it is not possible to continue.
    For example, a function that reads the number of students from a file may throw an exception if this information is not available or incorrect.
      .
    On the other hand, if the problem is caused by some user action like entering invalid data, it may make more sense to validate the data instead of throwing an exception.
	--
	dprograli-p
	}}}
handle instead of stopping the program (=The exception object can be caught by) *
{{{
    a try-catch statement at any point on its path as it exits the functions.
      .
    try {
        // the code block that is being executed, where an
        // exception may be thrown
        .
    } catch (an_exception_type) {
        // expressions to execute if an exception of this
        // type is caught
        .
    } catch (another_exception_type) {
        // expressions to execute if an exception of this
        // other type is caught
        .
    // ... more catch blocks as appropriate ...
        .
    } finally {
        // expressions to execute regardless of whether an
        // exception is thrown
    }
	--
	dprograli-p
	}}}
    ----

    ----
(the function is dealing only with its own task instead of paying attention to error conditions)
{{{
    This is a benefit of exceptions: many functions can be written in ways that focus on their actual tasks, rather than focusing on error conditions.
	--
	dprograli-p
	}}}
Let's add an intermediate function to the program that calls readDieFromFile from within a try block and let's have main() call this new function:
{{{
    int tryReadingFromFile() {
      (+See more)
	--
	dprograli-p
	}}}
catch blocks are considered (=in what order?)
{{{
    sequentially
	--
	dprograli-p
	}}}
exception types:
{{{
    Exception, which we have used so far in the examples is a general exception type.
    ConvException and ErrnoException that we have seen earlier in this chapter are more specific exception types: the former is about a conversion error, and the latter is about a system error.
      .
    Exception and its sibling Error are further inherited from Throwable, the most general exception type.
	--
	dprograli-p
	}}}
Although possible, it is not recommended to catch objects of type Error and objects of types that are inherited from Error.  Since it is more general than Error, it is not recommended to catch Throwable either. What should normally be caught *(*)
{{{
    are the types that are under the Exception hierarchy, including Exception itself.
	--
	dprograli-p
	}}}
For example, it is possible to catch an ErrnoException object specifically to detect and handle a system error. *
{{{
    Exceptions are caught only if they match a type that is specified in a catch block.
	--
	dprograli-p
	}}}
The type of the exception object that is thrown during the execution of a try block is matched to the types that are specified by the catch blocks, in the order in which the catch blocks are written. (????/(***!))
{{{
    =see more
	--
	dprograli-p
	}}}
Because the catch blocks are matched in order from the first to the last, the catch blocks must be ordered (=how?)
{{{
    from the most specific exception types to the most general exception types.
    Accordingly, and if it makes sense to catch that type of exceptions, the Exception type must be specified at the last catch block. (=??)
      (+ the student records example)
	--
	dprograli-p
	}}}
finally is an optional block of the try-catch statement. It includes expressions that should be executed **
{{{
    regardless of whether an exception is thrown or not.
	--
	dprograli-p
	}}}
    ----

    ----
The try-catch statement is useful to catch exceptions *
{{{
    to do something special about them.
    For that reason, the try-catch statement should be used only when there is something special to be done.
	--
	dprograli-p
	}}}
The information that is automatically printed on the output when the program terminates due to an exception is available as ___ as well ((??)/!!) (+are provided by which interface?) **(*)
{{{
    properties of exception objects
      .
    These properties are provided by the Throwable interface:
      .
    .file: The source file where the exception was thrown from
    .line: The line number where the exception was thrown from
    .msg: The error message
    .info: The state of the program stack when the exception was thrown
    .next: The next collateral exception
	--
	dprograli-p
	}}}
Exceptions that are thrown when leaving scopes due to an already thrown exception are called **
{{{
    collateral exceptions.
	--
	dprograli-p
	}}}
Both the main exception and the collateral exceptions are elements of a linked list data structure, where every exception object is accessible through the __ **  + The value of the .next property of the last exception is __
{{{
    .next property of the previous exception object.
     null
	--
	dprograli-p
	}}}
'the continuation condition of the for loop that consists solely of exc means '
{{{
    as long as exc is not null.
	--
	dprograli-p
	}}}
User errors: For example, let's look at a program that takes a file name from the user. There are at least two ways of dealing with potentially invalid file names: **
{{{
    Validating the data before use: We can determine whether the file with the given name exists by calling exists() of the std.file module:
    Using the data without first validating it: We can assume that the data is valid and start using it right away, because File would throw an exception if the file cannot be opened anyway.
	--
	dprograli-p
	}}}
It is more appropriate to use the ___ mechanism for errors that are caused by programmer mistakes. **(*)
{{{
    assert
    =validates program state and prints the file name and line number of the validation if it fails. 
    'The message above indicates that the assertion at line 2 of deneme.d has failed.'
	--
	dprograli-p
	}}}
The scope statements have similar functionality to the catch and finally scopes but they are better in many respects.
{{{
    Like finally, the three different scope statements are about executing expressions when leaving scopes:
      scope(exit):
      scope(success):
      scope(failure):
        ...
        ...
    +scope statements can be specified as blocks as well:
	--
	dprograli-p
	}}}
As seen in the outputs, the blocks of the scope statements are executed in reverse order.
{{{
    This is because later code may depend on previous variables.
    Executing the scope statements in reverse order enables undoing side effects of earlier expressions in a consistent order.
	--
	dprograli-p
	}}}
    ----

    ----
detecting the programs from hidden assumptions (*)
{{{
    assert and enforce
      .
    assert statements check assumptions and terminate programs immediately when they are not valid.
	--
	dprograli-p
	}}}
assert can be used in two ways:
{{{
    assert(logical_expression);
    assert(logical_expression, message);
      .
    The logical expression represents an assumption about the program.
    if the assumption is invalid an AssertError is thrown.
      .
      .
    assert(first >= 0, "Age cannot be negative.");
      (=printing an error message)
	--
	dprograli-p
	}}}
use assert for the averageAge() example (=check that both numbers are higher than zero) (*)
{{{
    see Ex.
     assert(first >= 0);
	--
	dprograli-p
	}}}
In such cases it is common to use the literal false as the logical expression to fail an assert check.
{{{
    see more
    eg. to indicate that applyCommand() function is never expected to be called with a command other than "sing" and "dance",
     ((or use a final switch statement.))
	--
	dprograli-p
	}}}
checks that are about the structure of the program, which can be applied even at compile time (=assert is tested at runtime) **
{{{
    static assert(menuTitle.length <= 16);
    (('Note that the string is defined as enum so that its length can be evaluated at compile time.'))
	--
	dprograli-p
	}}}
static assert is even more useful when used in
{{{
    templates
	--
	dprograli-p
	}}}
'assert even if absolutely true'
{{{
    take advantage of assert checks even if they feel unnecessary.
      assert((sum(days) == 365) || (sum(days) == 366));
      assert(days.length == 12);
	--
	dprograli-p
	}}}
Disabling assert checks (=for production-ready and tested code) *
{{{
    The compiler switch -release causes the assert checks to be ignored as if they have never been included in the program:
      dmd deneme.d -release
	--
	dprograli-p
	}}}
one first(?) example of enforce (!)
{{{
    Not every unexpected situation is an indication of a program error.
    (=like using enforce)
    For example, the data that is entered by the user should not be validated by an assert check because invalid data has nothing to do with the correctness of the program itself.
      .
    std.exception.enforce is a convenient way of throwing exceptions.
	--
	dprograli-p
	}}}
enforce() (??)
{{{
    is a wrapper around the condition check and the throw statement.
     ????
    +'enforce() is expressive and convenient when throwing exceptions.'
	--
	dprograli-p
	}}}
decide whether to rely on an assert check or to throw an exception. (!!)
{{{
    The decision should be based on whether the unexpected situation is due to a problem with how the program has been coded.
	--
	dprograli-p
	}}}
    ----

Unit Testing **(*!)

    ----
Unit testing also enables
{{{
    refactoring the code (i.e. making improvements to it) with ease and confidence.
    Otherwise, it is common to accidentally break some of the existing functionality of a program when adding new features to it.
    Bugs of this type are called regressions.
	--
	dprograli-p
	}}}
Risk of regressions discourage programmers from refactoring the code, sometimes preventing them from performing the simplest of improvements like correcting the name of a variable.
{{{
    =causes code rot, a condition where the code becomes more and more unmaintainable.
	--
	dprograli-p
	}}}
Unit testing involves testing
{{{
    testing the smallest units of code independently.
	--
	dprograli-p
	}}}
Unit tests are provided as library solutions in other languages (e.g.
{{{
    JUnit, CppUnit, Unittest++, etc.)
	--
	dprograli-p
	}}}
The unit testing features of D are as simple as **
{{{
    inserting assert checks into unittest blocks.
	--
	dprograli-p
	}}}
Unit tests are not a part of the actual execution of the program.  They should be activated
{{{
    only during program development when explicitly requested.
      dmd deneme.d -w -unittest
        .
    (=When a program that is built by the ‑unittest switch is started, its unit test blocks are executed first.)
    (Only if all of the unit tests pass then the program execution continues with main().)
	--
	dprograli-p
	}}}
Although unittest blocks can appear anywhere, it is convenient to define them **
{{{
    right after the code that they test.
	--
	dprograli-p
	}}}
Unit Test Blocks **
{{{
    string ordinal(size_t number) {
        // ...
    }
        .
    unittest {
        assert(ordinal(1) == "1st");
        assert(ordinal(2) == "2nd");
        assert(ordinal(3) == "3rd");
        assert(ordinal(10) == "10th");
    }
	--
	dprograli-p
	}}}
Although unit tests are based on assert checks, unittest blocks can contain *
{{{
    any D code.
      .
      .
    unittest {
        immutable str = "hello"d;
            .
        assert(toFront(str, 'h') == "hello");
        assert(toFront(str, 'o') == "ohell");
        assert(toFront(str, 'l') == "llheo");
    }
	--
	dprograli-p
	}}}
    ----

    ----
As these examples show, unit tests are also useful as examples of how particular functions should be called.
{{{
    =Usually it is easy to get an idea on what a function does just by reading its unit tests.
	--
	dprograli-p
	}}}
test some code for exception types that it should or should not throw under certain conditions. *
{{{
    The std.exception module contains two functions that help with testing for exceptions:
      assertThrown
      assertNotThrown
        .
    For example, a function that requires that both of its slice parameters have equal lengths and that it works with empty slices can be tested as in the following tests:
      (=see example)
	--
	dprograli-p
	}}}
both assertThrown and assertNotThrown
can be set to test against
{{{
    against a specific exception type as well.
      .
    The specific exception types are specified as template parameters to these functions:
      assertThrown!UnequalLengths(average([1], [1, 2]));
      assertNotThrown!RangeError(average([], []));
	--
	dprograli-p
	}}}
Test driven development (TDD)
{{{
    prescribes writing unit tests before implementing functionality.
    In TDD, the focus is on unit testing.
    Coding is a secondary activity that makes the tests pass.
        .
        .
    import std.string;
        .
    string ordinal(size_t number) {
        return "";    // ← intentionally wrong
    }
        .
    unittest {
        assert(ordinal(1) == "1st");
        assert(ordinal(2) == "2nd");
        assert(ordinal(3) == "3rd");
        assert(ordinal(10) == "10th");
    }
        .
    void main() {
    }
    ((+change to pass))
      Under the assurance that the tests bring, the implementation of the function can be changed in many ways with confidence.
	--
	dprograli-p
	}}}
If a bug is discovered when actually running the program (=even though unit tests have been done for the program)
{{{
    it can be seen as an indication that the unit tests have been incomplete.
    For that reason, it is better to first write a unit test that reproduces the bug and only then to fix the bug to pass the new test.
	--
	dprograli-p
	}}}
The 'He came the twentyth in the race.' case (!!)
{{{
    Although it is easy to see that the function does not produce the correct spelling for numbers that end with the letter y, TDD prescribes that first a unit test must be written to reproduce the bug before actually fixing it:
      .
    unittest {
    // ...
        assert(ordinalSpelled("twenty") == "twentieth");
    }
	--
	dprograli-p
	}}}
Exercise: Implement toFront() according to TDD.
{{{
    See more
	--
	dprograli-p
	}}}
    ----


  ___Dlangali_3


	----
Contract programming is a software design approach that
{{{
    treats parts of software as individual entities that provide services to each other.
      D's contract programming features involve functions as the units of software services + based on assert tests
	--
	-p
	}}}
Contract programming in D is implemented by three types of code blocks:
{{{
    . Function in--blocks
    . Function out--blocks
    . Struct and class invariant--blocks
	--
	-p
	}}}
43.1 in blocks for preconditions: 'Correct execution of functions usually depend on whether the values of their parameters are valid.'
{{{
    For example, a square root function may require that its parameter cannot be negative.
    A function that deals with dates may require that the number of the month must be between 1 and 12.
	--
	-p
	}}}
te: the requirements of a function (eg. is that are used in contract programming) are called
{{{
    the function's preconditions.
	--
	-p
	}}}
Conditions on parameter values can be enforced by assert checks within function definitions:
{{{
	see more
	--
	-p
	}}}
in blocks, out blocks, do blocks *
{{{
	see more
	--
	dprograli-p(238)
	}}}
An assert check that fails inside the in block indicates
{{{
    that the contract has been violated by the caller.
	--
	dprograli-p239)
	}}}
43.2 out blocks for postconditions The other side of the contract involves guarantees that the function provides.  Such guarantees are called
{{{
    the function's postconditions.
    An example of a function with a postcondition would be a function that returns the number of days in February: The function can guarantee that the returned value would always be either 28 or 29.
    The postconditions are checked inside the out blocks of functions.
	--
	dprograli-p239)
	}}}
Because the value that a function returns by the return statement need not be defined as a variable inside the function, there is usually no name to refer to the return value.
{{{
	see more
    sol. =naming the return value right after the out keyword.
    out (result) {
	--
	dprograli-p239)
	}}}
An assert check that fails inside the out block indicates that the contract has been violated by **
{{{
    the function.
	--
	dprograli-p239)
	}}}
43.3 Expression-based contracts (??)
{{{
    The expression-based contract obviates curly brackets, explicit assert calls, and the do keyword:
      see more (=provides shorter more convenient syntax for some of the assert checks)
      .
      .
    out (; /* ... */)
	--
	-p
	}}}
43.4 Disabling contract programming
{{{
    dmd deneme.d -w -release
	--
	-p
	}}}
Similarly, sometimes it is difficult to decide whether to use assert checks within in blocks versus enforce checks within function bodies.
{{{
    - If the check is guarding against a coding error, then it should be in the in block.
    - If the function cannot achieve some task for any other reason, including invalid parameter values, then it must throw an exception, conveniently by enforce.
      (+See more Examples(!))
    (=assert in the in function versus using enforce(!))
	--
	-p
	}}}
    ----

Lifetimes + Structs (**)

    ----
Structs are for **
{{{
    combining fundamental types and other structs together to define higher-level types that behave according to special needs of programs.
	--
	-p
	}}}
In a few places we have referred to struct and class variables specifically as
{{{
    objects
	--
	-p
	}}}
(The time between when a variable is defined and when it is finalized is (called))
{{{
    the lifetime of that variable.
	--
	-p
	}}}
The lifetime of a parameter depends on *
{{{
    its qualifiers:
      (= ref,  in, out, lazy )
	--
	-p
	}}}
Regardless of its type, there are three fundamental operations throughout the lifetime of a variable:
{{{
    . Initialization: The start of its life.
    . Finalization: The end of its life.
    . Assignment: Changing its value as a whole.
	--
	-p
	}}}
Every variable must be initialized before being used. Initialization involves two steps:
{{{
    - Reserving space for the variable:
    - Construction: Setting the first value of the variable on that space (or the first values of the members of structs and classes).
	--
	-p
	}}}
te: The memory location that a variable is placed at is called **
{{{
    its address.
	--
	-p
	}}}
copying a variable with a class copies ___ **
{{{
	=the reference, not the variable
	--
	-p
	}}}
A reference that does not reference any value is (=value)
{{{
    null
	--
	-p
	}}}
    ----

    ----
"Segmentation fault" is an indication that
{{{
    the program has been terminated by the operating system because of attempting to access an illegal memory address.
	--
	-p
	}}}
a variable can be tested for if it is null, but **
{{{
    because the == operator needs actual objects to compare,
    that must be determined with the is operator.
      .
    if (variable is null) {
        // Does not reference any object
    }
      .
      .
	--
	-p
	}}}
    +Other uses of the is comparison **(!)
3
{{{
    - comparing the values of two variables
    - When used with slices,
        =it determines whether the two slices reference the same set of elements:
	--
	-p
	}}}
45.3 The !is operator **
{{{
    It produces true when the values are different:
      if (speed !is newSpeed) {
	--
	-p
	}}}
    Doing ____ to a variable of a reference type makes that variable stop referencing its current object. **
{{{
    Assigning the null value
      to a variable of a reference type
	--
	-p
	}}}
. null is the value indicating that
{{{
    a variable does not provide access to any value
	--
	-p
	}}}
why one can combine operations with int and double (*/(??))
{{{
    any value that fits in an int also fits in a double. (??)
      .
    (+The automatic(=implicit) conversions that are performed by the compiler are in the direction that avoids data loss.)
	--
	-p
	}}}
te: promoting types ()
{{{
	see more
	--
	-p
	}}}
The arithmetic conversion rules are the following: 1. (...)
{{{
	see more
	--
	-p
	}}}
Unfortunately, the last rule above can cause subtle bugs: (...)
{{{
	=see more
	--
	-p
	}}}
    ----

    ----
As a convenience, fixed-length arrays can automatically be converted to slices when calling a function: **
{{{
	see more
	--
	-p
	}}}
Warning: A local fixed-length array must not be passed as a slice if the function stores the slice for later use.
{{{
	see more
	--
	-p
	}}}
As we have seen in the enum chapter (page 131), enum is for *
{{{
    defining named constants:
	--
	-p
	}}}
bool: false and true are automatically converted to *
{{{
    0 and 1, respectively:
    +(!!) 0 and 1 are converted automatically to false and true, respectively:
	--
	-p
	}}}
Some statements make use of logical expressions: if, while, etc. For the logical expressions of such statements, not only bool but most other types can be used as well.  +The values are converted to ___ (**)
{{{
    zero is automatically converted to false and the nonzero values are automatically converted to true.
	--
	-p
	}}}
As we have seen above, there are cases where automatic conversions are not available: (**)
{{{
	=fill in the list
	--
	-p
	}}}
If such a conversion is known to be safe, the programmer can explicitly ask for a type conversion by one of the following methods: (**) (??)
{{{
    Construction syntax
    std.conv.to function
    std.exception.assumeUnique function
    cast operator
      .
    Construction syntax
    The struct and class construction syntax is available for other types as well:
      .
    DestinationType(value)
      .
      .
	'For example, the following conversion makes a double value from an int value,' (! =see more)
	--
	-p
	}}}
function, which can be used for many type-conversions (**)
{{{
    to!(DestinationType)(value)
      .
    or even shorter:
    to!DestinationType(value)
      .
    (=When the destination type consists only of a single token (generally, a single word), it can be called without the first pair of parentheses:)
    ((='the shortcut template parameter notation:')) (**)
	--
	-p
	}}}
'to() is safe:'
{{{
    =It throws an exception when a conversion is not possible.
	--
	-p
	}}}
assumeUnique() makes the elements of a slice * (??)
{{{
    immutable, without copying:
      .
    assumeUnique() returns a new slice that provides immutable access to the existing elements.
    It also makes the original slice null to prevent the elements from accidentally being modified through it.
	--
	-p
	}}}
    ----

    ----
The cast operator **
{{{
    cast(DestinationType)value
      .
    +'cast is powerful even for conversions that to() cannot safely perform.'  (=see more)
	--
	-p
	}}}
the type Suit(??)
{{{
	=see more
	--
	-p
	}}}
cast is the only option when converting to and from **(*)
{{{
    pointer types:
      .
    (+for use with  some C library interfaces (that) make it necessary to store a pointer value as a non-pointer type.
	--
	-p
	}}}
    ----

    ----
'The reason for Structs' **(*!)
{{{
    fundamental types are not suitable to represent higher-level concepts.
      .
    For example, although a value of type int is suitable to represent the hour of day,
    two int variables would be more suitable together to represent a point in time: one for the hour and the other for the minute
      .
      .
    Structs are the feature that allow defining new types by combining already existing other types.
	--
	-p
	}}}
building a simple time struct **
{{{
    struct TimeOfDay {
        int hour;
        int minute;
    }
      .
      .
    struct TypeName {
    // ... member variables and functions ...
    }
	--
	-p
	}}}
The variables that a struct combines are called **
{{{
    its members.
	--
	-p
	}}}
Ex: Initializing a Struct **
{{{
    TimeOfDay bedTime;
      .
    // This object contains its own hour
    // and minute member variables.
      .
    TimeOfDay wakeUpTime; //
	--
	-p
	}}}
Variables of struct and class types are called
{{{
    objects
	--
	-p
	}}}
Structs can be members of other structs. **
{{{
    struct Meeting {
        string topic;
        size_t attendanceCount;
        TimeOfDay start;
        TimeOfDay end;
    }
	--
	-p
	}}}
Set val. of a Struct member(=var.) **(**)
{{{
    start.hour = 10;
	--
	-p
	}}}
Meeting can in turn be a member of another struct. (!)
{{{
	see more
	--
	-p
	}}}
In order for a variable to be used in a safe way, that variable must first be constructed in a consistent state. Because construction is so common, there is a special construction syntax for struct objects:
{{{
    TimeOfDay periodStart = TimeOfDay(8, 30);
    TimeOfDay periodDuration = TimeOfDay(1, 15);
	--
	-p
	}}}
    ----

    ----
Constructing objects as immutable *
{{{
    immutable periodStart = TimeOfDay(8, 30);
    immutable periodDuration = TimeOfDay(1, 15);
      .
    =Being able to construct the object by specifying the values of its members at once makes it possible to define objects as immutable:
	--
	-p
	}}}
assert(t4.c == char.init);
{{{
	=see more
	--
	-p
	}}}
Specifying default values for members *
{{{
    The initial values of the members of a struct can be specified when the struct is defined.
    This is useful for example to initialize floating point members by 0.0, instead of the mostly-unusable .nan.
      .
    struct Test {
        char   c = 'A';
        int    i = 11;
        double d = 0.25;
    }
	--
	-p
	}}}
TimeOfDay periodStart = { 8, 30 };
{{{
    Constructing(=Structs) by the {} syntax
      .
    This syntax is inherited from the C programming language:
    auto periodStart = TimeOfDay(8, 30);    // <- regular
    TimeOfDay periodEnd = { 9, 30 };        // <- C-style
	--
	-p
	}}}
'This syntax allows designated initializers.'
{{{
    Designated initializers are for specifying the member that an initialization value is associated with.
    +It is even possible to initialize members in a different order than they are defined in the struct:
	--
	-p
	}}}
Copying and assignment: Structs are ____ types.
{{{
    value types
	--
	-p
	}}}
Careful with (=struct) members that are of reference types!
{{{
    ='For that reason, a better approach might be to construct the second object by the copies of the grades of the first one:'
    auto student2 = Student(2, student1.grades.dup);
    (Note: It is possible to have even the reference members copied automatically. (=struct member functions(?)))
	--
	-p
	}}}
Similar to being able to use integer literal values like 10 in expressions without needing to define a variable, struct objects can be used as literals as well. *
{{{
    TimeOfDay(8, 30)
	--
	-p
	}}}
static (=struct) members *
{{{
    This may be necessary to maintain e.g. a general information about that struct type.
      .
    In order to be able to assign different ids to each object, a separate variable is needed to keep the next available id.
      .
      .
    Contrary to the regular members, there is a single variable of each static member for each thread.
    (Note that most programs consist of a single thread that starts executing the main() function.)
      Ex. =  makePoint(
    Since static members are owned by the entire type, there need not be an object to access them.
    As we have seen above, such objects can be accessed by the name of the type, as well as by the name of any object of that struct:
	--
	-p
	}}}
When a variable is needed not one per thread but one per program, then those variables must be defined as *
{{{
    shared static
	--
	-p
	}}}
    ----

    ----
'Further, some special code may have to be executed before a struct can be used in a thread.' (??)
{{{
    Such code is written in static this() scopes
	--
	-p
	}}}
Code that should be executed only once for the entire program (e.g. initializing shared and immutable variables) must be defined in (??)
{{{
    shared static this() and shared static ~this() blocks, (which will be covered in the Data Sharing Concurrency chapter.)
	--
	-p
	}}}
two D features that bring flexibility on parameters when calling functions: **
{{{
    Default arguments
    Variadic functions
        Default values can only be defined for the parameters that are at the end of the parameter list.
	--
	-p
	}}}
the standard function sort is found in the module **(!)
{{{
    std.algorithm
	--
	-p
	}}}
Special keywords as default arguments **
{{{
    __MODULE__: Name of the module as string
    __FILE__: Name of the source file as string
    __FILE_FULL_PATH__: Name of the source file including its full path as string
    __LINE__: Line number as int
    __FUNCTION__: Name of the function as string
    __PRETTY_FUNCTION__: Full signature of the function as string
	--
	-p
	}}}
Special keywords as default arguments (**)
{{{
    When they are used in regular code,
         their values refer to where they appear in code:
         (eg. where the definition of a function is.)
    When these special keywords are provided as default arguments,
        their values refer to where the function is called from:
	--
	-p
	}}}
In addition to the above,(eg. special keywords) there are also the following special tokens that take values depending on the compiler and the time of day:
{{{
    __DATE__: Date of compilation as string
    __TIME__: Time of compilation as string
    __TIMESTAMP__: Date and time of compilation as string
    __VENDOR__: Compiler vendor as string (e.g. "Digital Mars D")
    __VERSION__: Compiler version as long (e.g. the value 2081L for version 2.081)
	--
	-p
	}}}
There are four ways of defining variadic functions in D: **(*)
{{{
    for functions that are marked as extern(C). (=unsafe)
    another unsafe way
    Another safe way
    Unspecified number of template parameters.
	--
	-p
	}}}
'way three' of specifying variadic functions (=the safe standard way) *
{{{
    The parameters of variadic functions are passed to the function as a slice.
      .
    double sum(double[] numbers...) {
      .
      .
    Variadic functions can also have required parameters, which must be defined first in the parameter list.
	--
	-p
	}}}
variadic functions plus lifetime of arguments (*)(**)
{{{
    A solution that is both correct and efficient is to define two functions having the same name, one taking a variadic parameter and the other taking a proper slice.
	--
	-p
	}}}
    ----

    ----
Defining more than one function having the same name is function overloading. In order to be able to differentiate these functions, **
{{{
    their parameters must be different.
      .
    'The following code has multiple overloads of the info() function, each taking a different type of parameter:'
	--
	-p
	}}}
We will see later in ____ how a single definition can be used for multiple types.
{{{
    the Templates chapter
	--
	-p
	}}}
The compiler picks the overload that is the best match for the arguments.  This is called
{{{
    overload resolution.
	--
	-p
	}}}
The following are the rules of overload resolution. They are being presented in a simplified way in this book.
{{{
	see more  +
      .
    mismatch
    match through automatic type conversion
    match through const qualification
    exact match
      (+some design tips concerning overload matching)
	--
	-p
	}}}
Function overloading for user-defined types (???? / (****(**)) (eg. Structs/Classes)
{{{
      ...
      ...
      ...
    As a result, variables of user-defined types can be printed in exactly the same way as fundamental types:
      +=See More(!)
	--
	-p
	}}}
(Note: The special objects stdin, stdout, and stderr are of type )
{{{
    File
	--
	-p
	}}}
representing objects (of eg. a struct) in the string format.
{{{
    for instance  define a special toString() member function
    When a struct or class is defined, usually a number of functions are also defined alongside with it.
     ..
     ..
    'In a sense, these two functions define the interface of TimeOfDay.'
    +The concept of a set of functions determining the interface of a struct is very common.
	--
	-p
	}}}
____ are called member functions: ****
{{{
    Functions that are defined within the curly brackets of a struct
      .
    struct SomeStruct {
        void member_function(/* the parameters of the function */) {
            // ... the definition of the function ...
        }
     .
        // ... the other members of the struct ...
    }
	--
	-p
	}}}
Accessing member functions **(*)
{{{
    object.member_function(arguments);
	--
	-p
	}}}
    ----

    ----
We have used member functions before 8)
{{{
    stdin.readf(" %s", &number);
    stdout.writeln(number);
	--
	-p
	}}}
Making info() a member function *
{{{
    struct TimeOfDay {
        int hour;
        int minute;
          .
        void info() {    // (1)
            writef("%02s:%02s", hour, minute);    // (2)
        }
    }
	--
	-p
	}}}
to do placeholder test as sketch for code (eg. a function) (**(*))
{{{
    sketch 1 for the toString() member function
	--
	-p
	}}}
The simplest implementation of toString()
{{{
    call format() of the std.string module.
	--
	-p
	}}}
More Example of unittest (**)
{{{
	=the addduration() (?) member function (**)
	--
	-p
	}}}
unittest blocks and testing member functions. *
{{{
    unittest blocks can be written inside struct definitions as well, mostly for testing member functions.
    It is still possible to move such unittest blocks outside of the body of the struct:
	--
	-p
	}}}
the rationale for defining some of the member functions in the exercises (**)
{{{
	making the function definitions shorter and
    making the functions easier and much more convenient to use
	--
	-p
	}}}
    ----

    ----
const ref Parameters and const Member Functions
{{{
    This chapter is about how parameters and member functions are marked as const
    so that they can be used with immutable variables as well.
	--
	-p
	}}}
not const ref parameters, const ref parameters, in ref, non-const member functions, const member functions
{{{
	(=see more)
	--
	-p
	}}}
Similarly, an inout member function (=does what?)
{{{
    =transfers the mutability of the object to the function's return type:
	--
	-p
	}}}
This would make the struct (or class) more useful by removing an unnecessary limitation. The examples in the rest of the book will observe this guideline.
{{{
    To give the guarantee that a
    parameter is not modified by the
    function, mark that parameter as
    in, const, or const ref.
      .
    Mark member functions that do
    not modify the object as const:
	--
	-p
	}}}
Four member functions of structs are special because they define the fundamental operations of that type:
{{{
    Constructor: this()
    Destructor: ~this()
    Postblit: this(this)
    Assignment operator: opAssign()
      .
    Although these fundamental operations are handled automatically for structs, hence need not be defined by the programmer, they can be overridden to make the struct behave in special ways.
	--
	-p
	}}}
The responsibility of the constructor is to
{{{
    prepare an object for use by assigning appropriate values to its members.
	--
	-p
	}}}
When the name of a type is used like a function, it is actually **
{{{
    the constructor that gets called
	--
	-p
	}}}
In addition to different object construction syntaxes that we have seen so far; ____ objects can be constructed with the type constructor syntax as well *
{{{
    const, immutable, and shared objects
    (e.g. as immutable(S)(2)).
      .
      .
    /* More familiar syntax; immutable variable of a mutable
     * type: */
    immutable a = S(1);
        .
    /* Type constructor syntax; a variable of an immutable
     * type: */
    auto b = immutable(S)(2);
        .
    /* Same meaning as 'b' */
    immutable c = immutable(S)(3);
	--
	-p
	}}}
For most structs, ____ is sufficient:
{{{
    =the compiler-generated constructor
    Usually, providing appropriate values for each member is all that is needed for objects to be constructed.
	--
	-p
	}}}
Accessing the members =not the parameters (???(/**(*))) [eg. of a struct]
{{{
    prepend the member names with this.
    Inside member functions, this means "this object", making this.c mean "the c member of this object":
    Now c alone means the parameter and this.c means the member, and the code compiles and works as expected:
	--
	-p
	}}}
    ----

    ----
define a constructor by hand (*)**
{{{
    =where constructing an object involves more complicated operations than assigning values to each member in order.
      .
    time.decrement(Duration(12));
    Since that constructor takes the duration in minutes, the programmers would sometimes need to make calculations:
    (=To eliminate the need for these calculations, we can design a Duration constructor that takes two parameters and makes the calculation automatically:)
	--
	-p
	}}}
First assignment to a member is construction
{{{
    When setting values of members in a constructor, the first assignment to each member is treated specially: Instead of assigning a new value over the .init value of that member, the first assignment actually constructs that member.
	--
	-p
	}}}
use programmer's(=custom) constructor or the compiler-generated constructor  depending on the input  (**)
{{{
    One solution is to overload the constructor by providing another constructor that takes just one parameter:
	--
	-p
	}}}
define the default(=init) constructor for a struct (**)
{{{
    As a workaround, a no-parameter static opCall() can be used for constructing objects without providing any parameters.
	--
	-p
	}}}
Constructors can call other constructors to (=what is it useful for) *
{{{
    =to avoid code duplication.
	--
	-p
	}}}
since no member of an immutable object can be mutated throughout the lifetime of that object, (=how one can easily improve its performance) *
{{{
    leaving its mutable members uninitialized can improve program performance.
	--
	-p
	}}}
Qualified constructors
{{{
	const, immutable, shared (etc?)
	--
	-p
	}}}
To take advantage of qualified constructors, one must
{{{
    use the type constructor syntax.
    This syntax makes a different type by combining a qualifier with an existing type. For example, immutable(S) is a qualified type made from immutable and S:
      .
    auto m = S(1);
    auto c = const(S)(2);
    auto i = immutable(S)(3);
    auto s = shared(S)(4);
	--
	-p
	}}}
Immutability of constructor parameters
{{{
    'Now the users of the struct must provide immutable strings and as a result the confusion about the name of the file would be prevented.' (=see more)
	--
	-p
	}}}
    ----

    ----
Single-parameter constructors can be thought of as providing a sort of type conversion:
{{{
	=see more
    (eg. producing a Student object from a string:)
	--
	-p
	}}}
Disabling the default constructor **(*)
{{{
    Functions that are declared as @disable cannot be called.
    Sometimes there are no sensible default values for the members of a type. For example, it may be illegal for the following type to have an empty file name:
      .
    There is no need to provide a body for a disabled function:
    @disable this();
	--
	-p
	}}}
Custom destructor: sometimes some special operations may need to be executed when an object's lifetime ends.
{{{
    For example, an operating system resource that the object owns may need to be returned to the system; a member function of another object may need to be called; a server running somewhere on the network may need to be notified that a connection to it is about to be terminated; etc.
    The name of the destructor is ~this
	--
	-p
	}}}
custom destructors: The Xml struct example (*)*****
{{{
	=Ex. (=see more)
	--
	-p
	}}}
auto returnTripDuration = tripDuration;   // copying
{{{
    Do not confuse copying with assignment. The auto keyword above is an indication that a new object is being defined.
    (For an operation to be assignment, the object on the left-hand side must be an existing object.)
	--
	-p
	}}}
Sometimes it is necessary to make adjustments to the members of the new object after the automatic blit.  These operations are defined in the postblit function of the struct.
{{{
	deprecated. use copy constructors
      (??)
	--
	-p
	}}}
(objects with postblit @disabled)
{{{
    =Objects of such a type cannot be copied:
	--
	-p
	}}}
Assignment is more complicated from the other special operations(=???) because
{{{
    it is actually a combination of two operations:
      destroy + copy  (=can be risky)
    (ie. the compiler makes a temporary copy first)
    (+Although the compiler-generated assignment operator is suitable in most cases, it can be defined by the programmer.)
	--
	-p
	}}}
Although the compiler-generated assignment operator is suitable in most cases, it can be defined by the programmer. (=tips about best practices)
{{{
    When you do that, consider potential exceptions and write the assignment operator in a way that works even at the presence of thrown exceptions.
      .
    The name of the function is opAssign.
    The type of the parameter is the same as the struct type. This parameter is often named as rhs, short for right-hand side.
    The return type is the same as the struct type.
    The function is exited by return this.
      (+Example)
	--
	-p
	}}}
Sometimes it is convenient to assign values of types that are different from the type of the struct. For example,
{{{
    instead of requiring a Duration object on the right-hand side, it may be useful to assign from an integer:
	--
	-p
	}}}
    ----

Operator overloading (!!)

    ----
Operator overloading enables defining
{{{
    how user-defined types behave when used with operators.
	--
	-p
	}}}
the use case for operator overloading (!!) **(*)
{{{
    A benefit of member functions is being able to define operations of a type alongside the member variables of that type.
    Despite their advantages, member functions can be seen as being limited compared to operations on fundamental types. After all, fundamental types can readily be used with operators:
      ..
      ..
    Operator overloading enables using structs and classes with operators as well.
	--
	-p
	}}}
example overloading increment for a struct member (**)
{{{
    What is needed is to redefine the increment() member function under the special name opOpAssign(string op) and also to specify that this definition is for the + character.
    opOpAssign is actually a function template.
      .
    ref TimeOfDay opOpAssign(string op)(Duration duration) // ....
    if (op == "+"):
	--
	-p
	}}}
different kinds of operators that can be overloaded. (!)
{{{
	see more (unary etc)
      .
    opUnary  (+ list|table  **)
    +'For example, the ++ operator for Duration can be defined like this:'
    (Note that the return type of the operator is marked as ref here as well.)
     ..
    binary op.s
    (in the ref-table:) The ones marked as "=" assign to the left-hand side object.
    opBinaryRight
    // the definition for x being on the left: x.opBinary!"op"(y);
      ...
      ...
    Element indexing and slicing operators
      (+some discouraged)
    ((+MORE UNIT TEST EXAMPLES))
	--
	-p
	}}}
Another common use of opBinaryRight is
{{{
    the in operator.
	--
	-p
	}}}
The operator overloads above(=some of the examples **) have code duplications.
{{{
    Such code duplications can be reduced and sometimes avoided altogether by string mixins.
	--
	-p
	}}}
utility that can help when working with operator overloading (! ****)
{{{
	mixins (**)
    mixin inserts the specified string as source code right where the mixin statement appears in code.
      .
    struct Duration {
        int minute;
            .
        ref Duration opUnary(string op)()
                if ((op == "++") || (op == "--")) {
            mixin (op ~ "minute;");
            return this;
        }
            .
        ref Duration opOpAssign(string op)(int amount)
                if ((op == "+") || (op == "-")) {
            mixin ("minute " ~ op ~ "= amount;");
            return this;
        }
    }
	--
	-p
	}}}
When overloading an operator, it is advisable to observe ____ of the same operator on fundamental types.
{{{
    the return type
    (=to  help with making sense of code and reducing confusions.)
	--
	-p
	}}}
what  the operators on fundamental types return (!)
{{{
    None of the operators on fundamental types return void.
	--
	-p
	}}}
Further, the value that is produced by ++ is not just the new value of i, rather the variable i itself. (??)
{{{
	returning 2(?)
     +see more
	--
	-p
	}}}
    ----

    ----
I recommend that you observe the following guidelines when overloading operators for your own types: **(*)
{{{
    With the exception of opAssign, it is recommended that the operators that modify the object return the object itself.
        The return type is the type of the struct, marked by the ref keyword to mean reference.
        The function is exited by return this to mean return this object.
    .
    Logical operators
    opEquals that represents both == and != must return bool. Although the in operator normally returns the contained object, it can simply return bool as well.
    Sort operators
     ...
    Operators that make a new object
     ...
     ...
      ...
    Unconstrained operators
	--
	-p
	}}}
'Note: As an optimization, sometimes it makes more sense for opAssign to return ____ for large structs.'
{{{
    const ref
	--
	-p
	}}}
As an example of an operator that makes a new object, let's define the opBinary!"+" overload for Duration. This operator should add two Duration objects to make and return a new one: **(!)
{{{
	= see more
    (=That definition enables adding Duration objects by the + operator:')
	--
	-p
	}}}
For structs, the parameter of opEquals can be defined as
{{{
    in
	--
	-p
	}}}
for speed efficiency opEquals can be defined as
{{{
    a template that takes auto ref const (also note the empty template parentheses below):
	--
	-p
	}}}
As we have seen in the Lvalues and Rvalues chapter, auto ref allows (concerning lval.s and rval.s) *
{{{
    auto ref allows lvalues to be passed by reference and rvalues by copy.
      (+one more remark (=concerning 'however'))
	--
	-p
	}}}
Sometimes the equality of two objects must be defined differently from this automatic behavior (=opEquals() for structs) (!)
{{{
    For example, some of the members may not be significant in this comparison, or the equality may depend on a more complex logic.
    (+as an example, let's define opEquals() in a way that disregards the minute information altogether:)
	--
	-p
	}}}
opCmp() for sorting ((!***))
{{{
	see more
    (=determine the sort orders of objects)
    All of the ordering operators <, <=, >, and >= are covered by the opCmp() member function.
      .
    ((+again: opCmp  vs  template that takes auto ref const:))
         .
         .
      if (x op y) {  // <- op is one of <, <=, >, or >=
    ((For the user-defined opCmp() to work correctly, this member function must return a result according to the following rules: (=see more) (=neg|pos|zero))
	--
	-p
	}}}
You can use ____ for comparing slices (including all string types and ranges). **
{{{
    std.algorithm.cmp
	--
	-p
	}}}
The following program constructs 10 objects with random values and sorts them with sort(): **(*)
{{{
	=See More
	--
	-p
	}}}
    ----

    ----
te: The parentheses around the parameter list when calling functions are **(*)
{{{
    = operators as well
	--
	-p
	}}}
'We have already seen how static opCall() makes it possible to '
{{{
    use the name of the type as a function.
	--
	-p
	}}}
'static opCall() allows creating  / non-static opCall() allows using  '
{{{
    static  =creating objects with default values at run time.
    non-static  =using the objects of user-defined types as functions:
      (+Examples (!!))
	--
	-p
	}}}
That is why the { } syntax is used above instead of the recommended LinearEquation(1.2, 3.4).
{{{
    Note: Defining opCall() for a struct disables the compiler-generated automatic constructor.
         .
      (+one more remark)
	--
	-p
	}}}
'This feature can be useful to define and store the a and b values in an object once and to use that object multiple times later on.'
{{{
	see more
	--
	-p
	}}}
Indexing operators: ___ make it possible to use indexing operators on user-defined types similar to arrays as in object[index].
{{{
    opIndex, opIndexAssign, opIndexUnary, opIndexOpAssign, and opDollar
    (+support multi-dimensional indexing as well.
     Multiple index values are specified as a comma-separated list inside the square brackets (e.g.  object[index0, index1]). )
	--
	-p
	}}}
deque
{{{
	conventional name for double ended queue
	--
	-p
	}}}
opIndex is for element access.
{{{
	see more
	--
	-p
	}}}
opIndexAssign is for
{{{
    assigning to an element.
	--
	-p
	}}}
    ----

    ----
opIndexUnary is similar to opUnary.  The difference is that
{{{
    the operation is applied to the element at the specified index:
	--
	-p
	}}}
opIndexOpAssign is similar to opOpAssign. The difference is that
{{{
    the operation is applied to an element:
	--
	-p
	}}}
opDollar defines **
{{{
    the $ character that is used during indexing and slicing. It is for returning the number of elements in the container:
	--
	-p
	}}}
te: Double-ended queue is a data structure that is similar to arrays but
{{{
    it provides efficient insertion at the head of the collection as well.
      (=in contrast to for arrays)
	--
	-p
	}}}
One way of implementing a double-ended queue is *
{{{
    to use two arrays in the background but to use the first one in reverse.
    +Example of  struct (that) implements a double-ended queue that overloads the operators that we have seen in this section:
    (+uses std.stdio, std.string, std.conv (!))
      .
      .
    (+later  = simpler and more efficient implementation of * toString():)
	--
	-p
	}}}
___ allows slicing the objects of user-defined types with the [] operator.
{{{
    opSlice
	--
	-p
	}}}
D supports multi-dimensional slicing.
{{{
	=see more
	--
	-p
	}}}
The slicing operators are relatively more complex than other operators because
{{{
    they involve two distinct concepts: container and range.
	--
	-p
	}}}
opCast defines
{{{
    explicit type conversions.
    It can be overloaded separately for each target type.
	--
	-p
	}}}
opCast is (also)  (*)
{{{
    opCast is a template as well, but it has a different format: The target type is specified by the (T : target_type) syntax:
	--
	-p
	}}}
    ----

    ----
The double conversion function above produces 2.5 for two hours and thirty minutes: *
{{{
	= see more (overloading casting)
	--
	-p
	}}}
opDispatch gets called whenever
{{{
    a missing member of an object is accessed. All attempts to access non-existent members are dispatched to this function.
    (=There are no compiler errors for the calls to non-existent members.  Instead, all of those calls are dispatched to opDispatch.)
	--
	-p
	}}}
The name template parameter can be used inside the function to
{{{
    make decisions on how the call to that specific non-existent function should be handled:
	--
	-p
	}}}
defining the behavior of the in operator for user-defined types. in is commonly used with associative arrays to determine whether a value for a specific key exists in the array.
{{{
    Inclusion query by opBinaryRight!"in"
      +
    if (a !in b) {
      (ex: defining a TimeSpan type)
	--
	-p
	}}}
'That loop is a demonstration of how useful operator overloading can be.' (****)
{{{
    = See Examples (!!)
	--
	-p
	}}}
exercise: Define a fraction type that stores its numerator and denominator as members of type long.
{{{
    see more
	--
	-p
	}}}
    ----


    ----
OOP (=Classes) in D (**)
{{{
    Encaps, Inherit, Polymorph
	--
	-p
	}}}
Polymorphism is for abstracting parts of programs from each other and is achieved by
{{{
    class interfaces.
	--
	-p
	}}}
The biggest difference from structs is that structs are (!)
{{{
    value types and classes are reference types.
      .
      .
    Class variables may be null
      (= cannot use '==' for comparisons)
	--
	-p
	}}}
the actual class objects must be constructed by **
{{{
    the new keyword.
	--
	-p
	}}}
Class variables versus class objects
{{{
    Class variable and class object are separate concepts.
      .
    Cl. Obj.s
      constructed with new
      do not have names
    Cl. Var.s
	--
	-p
	}}}
Partly because ____, it is not possible to access class objects directly. *
{{{
    they are anonymous,
	--
	-p
	}}}
language feature for accessing class objects. **
{{{
    class variables
        (=provides access to)
    (=Although it may seem syntactically that operations are being performed on a class variable, the operations are actually dispatched to a class object.)
	--
	-p
	}}}
When the actual object needs to be copied, *
{{{
    the class must have a member function for that purpose.
    +To be compatible with arrays, this function may be named dup().
	--
	-p
	}}}
The following code makes use of dup() to create a new object:
{{{
    auto var1 = new Foo(S(1.5), "hello", 42);
    auto var2 = var1.dup();
	--
	-p
	}}}
an immutable copy of an object can be provided by a member function appropriately named idup() (+
{{{
    In this case, the constructor must be defined as pure as well.
	--
	-p
	}}}
    ----

    ----
Assigning to a class variable (=does what?) (**)
{{{
    disassociates that variable from its current object and associates it with a new object.
	--
	-p
	}}}
Classes are defined by *
{{{
    the class keyword instead of the struct keyword:
    class ChessPiece {
        // ...
    }
	--
	-p
	}}}
name of the (class) constructor *
{{{
    this
    +Unlike structs, class objects cannot be constructed by the { } syntax.
       .
    class ChessPiece {
        dchar shape;
            .
        this(dchar shape) {
            this.shape = shape;
        }
    }
	--
	-p
	}}}
However, different from structs, class destructors *
{{{
    are not executed at the time when the lifetime of a class object ends.
       .
    (By this distinction, class destructors should have more accurately been called finalizers).
	--
	-p
	}}}
class destructors must observe the following rules:
{{{
    see later in the Memory Management chapter,
	--
	-p
	}}}
members are accessed by *
{{{
    the dot operator:
      .
    auto king = new ChessPiece('♔');
    writeln(king.shape);
    (+'Class variables do not have members, the class objects do.')
    NOTE: It is usually not proper to access members directly as in the code above.
      .
    When that exact syntax is desired, properties should be preferred, which will be explained in a later chapter.
	--
	-p
	}}}
opAssign for classes vs structs.
{{{
    Other than the fact that opAssign cannot be overloaded for classes, operator overloading is the same as structs.
    (For classes, the meaning of opAssign is always associating a class variable with a class object.)
	--
	-p
	}}}
Although member functions are defined and used the same way as structs, there is an important difference:
{{{
    Class member functions can be and by-default are overridable.
        We will see this concept later in the Inheritance chapter.
	--
	-p
	}}}
    ----

    ----
Tip(!): defining class functions that do not need to be overridden (***)
{{{
    =define with the final keyword.
	--
	-p
	}}}
'is' for classes: is specifies ___ *
{{{
    whether two class variables provide access to the same class object.
	--
	-p
	}}}
The new keyword (=does what, technically?) (**(*))
{{{
    constructs an anonymous class object and returns a class variable.
	--
	-p
	}}}
Inheritance is
{{{
    defining a more specialized type based on an existing more general base type.
	--
	-p
	}}}
the class that gets inherited is called *
{{{
    the superclass, also called the base class.
	--
	-p
	}}}
There are two types of inheritance in D. **(*)
{{{
    implementation inheritance and
    interface inheritance
	--
	-p
	}}}
When defining a subclass, the superclass is specified **
{{{
    after a colon character:
      .
    class SubClass : SuperClass {
        // ...
    }
	--
	-p
	}}}
the Clock class, w. an adjust() member function: *
{{{
    see more
    (+use w. auto deskClock = new Clock;  etc)
	--
	-p
	}}}
inheritance: To see an example of inheritance, let's consider an AlarmClock that not only includes all of the functionality of Clock, but also provides a way of setting the alarm.
{{{
    see more
    class AlarmClock : Clock {
        int alarmHour;
        int alarmMinute;
            .
        void adjustAlarm(int hour, int minute) {
            alarmHour = hour;
            alarmMinute = minute;
        }
    }
	--
	-p
	}}}
    ----

    ----
te: vtbl
{{{
    virtual function table
	--
	-p
	}}}
Tip/Warning(!): Inherit only if __ (**)
{{{
    "is a"
    =if the subtype can be thought of being a kind of the supertype
    as in the phrase "alarm clock is a clock."
      .
    not: "has a"--relationship.
    eg. the Clock has a Battery
      (= battery is not a clock)
	--
	-p
	}}}
A clock is not a battery; it has a battery. When there is such a relationship of containment, the type that is contained must be defined as *
{{{
    a member of the type that contains it:
    class Clock {
        Battery battery;       // <- Correct design
        // ...
    }
	--
	-p
	}}}
According to OOP conventions, class hierarchies are represented by
{{{
    superclasses being on the top and the subclasses being at the bottom.
      .
    The inheritance relationships are indicated by arrows pointing from the subclasses to the superclasses.
	--
	-p
	}}}
Accessing superclass members **
{{{
    The super keyword allows referring to members that are inherited from the superclass.
    super.minute = 10; // The inherited 'minute' member
      .
    = The super keyword is needed when both the superclass and the subclass have members under the same names.
      .
    +one can use the specific name of the class in the inheritance tree to disambiguate between the symbols:
    The super keyword is needed when both the superclass and the subclass have members under the same names.
	--
	-p
	}}}
constructing the superclass part is the responsibility of the subclass. (* / (??))
{{{
    The subclass calls the constructor of the superclass with the super() syntax:
	--
	-p
	}}}
te: This is called overriding: **
{{{
    = being able to redefine the member functions of the superclass in the subclass.
	--
	-p
	}}}
te: Overridable functions are called **
{{{
    virtual functions.
    (Virtual functions are implemented by the compiler through virtual function pointer tables (vtbl) and vtbl pointers.)
	--
	-p
	}}}
Note: it must be known by every system programmer that virtual function calls (!)  (=are)
{{{
    are more expensive than regular function calls.
	--
	-p
	}}}
    ----

    ----
___ functions in D are virtual by default (!)  (+how to make fn.s not(!) virtual)
{{{
    Every non-private class member function in D
    For that reason, when a superclass function does not need to be overridden at all, it should be defined as final so that it is not virtual.
	--
	-p
	}}}
thw 'Clock has a member function that is used for resetting its members all to zero' case (!!)
{{{
    = see more
	--
	-p
	}}}
define an inherited  member function for classes  with  the override keyword: **
{{{
    class AlarmClock : Clock {
        override string toString() const {
            return format("%s ♫%02s:%02s", super.toString(),
                          alarmHour, alarmMinute);
        }
           .
        // ...
    }
	--
	-p
	}}}
polymorphism (**)
{{{
    =Since the superclass is more general and the subclass is more specialized, objects of a subclass can be used in places where an object of the superclass type is required.
      .
    =Accordingly, an alarm clock can be used where a clock is needed, a student can be used where a person is needed, and a cat can be used where an animal is needed.
	--
	-p
	}}}
When a subclass object is being used as a superclass object, it does not lose its own specialized type.
{{{
    This is similar to the examples in real life: Using an alarm clock simply as a clock does not change the fact that it is an alarm clock; it would still behave like an alarm clock.
    void use(Clock clock) {
     --
    auto deskClock = new AlarmClock(10, 15, 0, 6, 45);
	--
	-p
	}}}
(the Broken Clock Test example)
{{{
    (see more)
	--
	-p
	}}}
Abstract member functions and abstract classes (***(!))  [+abstract classes cannot be instantiated]
{{{
    Sometimes there are member functions that are natural to appear in a class interface even though that class cannot provide its definition.
    Sometimes there are member functions that are natural to appear in a class interface even though that class cannot provide its definition.
    When there is no concrete definition of a member function, that function is an abstract member function.
    A class that has at least one abstract member function is an abstract class.
      (+some examples)
    (+'Since validity of a move depends on the actual type of the chess piece, the ChessPiece general class cannot make this decision itself.'(=??))
      ..
      ..
    =The abstract keyword specifies that the inherited class must implement such a method itself: (**)
    class ChessPiece {
        abstract bool isValid(Square from, Square to);
    }
    (+It is not possible to construct objects of abstract classes:)
      .
    The subclass would have to override and implement all the abstract functions in order to make the class non-abstract and therefore constructible:
      (+Example)
	--
	-p
	}}}
Looking at a  class hierarchy and point out some of its design decisions, (!)
{{{
    top class is  RailwayVehicle
      (+etc)
    the abstract functions load and unload (**)
	--
	-p
	}}}
Being an abstract class does not preclude the use of RailwayCar in the program.
{{{
    Objects of RailwayCar can not be constructed but RailwayCar can be used as an interface.
	--
	-p
	}}}
I would like to repeat an important point: Although both Locomotive and RailwayCar inherit from RailwayVehicle, it would not be correct to inherit Train from either of them. (??) (!)
{{{
    Inheritance models the "is a" relationship and a train is neither a locomotive nor a passenger car. A train consists of them.
      (++ more design decisions (**))
    (=using avoid member function for adding train cars =optional)
	--
	-p
	}}}
The Train class is being used by functions that are provided by two separate interfaces: (??/(**(*)))
{{{
    (= see more)
	--
	-p
	}}}
super has two uses: **(*)
{{{
    Calling the constructor of the superclass and accessing the members of the superclass.
	--
	-p
	}}}
abstract requires that **(*)
{{{
    a member function must be overridden.
	--
	-p
	}}}
    ----

    ----
Object *
{{{
    Classes that do not explicitly inherit any class, automatically inherit the Object class.
	--
	-p
	}}}
Every class inherits the following member functions of Object: **
{{{
    toString: The string representation of the object.
    opEquals: Equality comparison with another object.
    opCmp: Sort order comparison with another object.
    toHash: Associative array hash value.
       (+others that will be mentioned elsewhere)
      .
    +(!) Because these functions are inherited, their redefinitions for the subclasses require the override keyword.
	--
	-p
	}}}
the key type of associative arrays. (??) *
{{{
    They (= the Proto object core member functions) also make a class eligible for being the key type of associative arrays.
	--
	-p
	}}}
Object is defined in the ___ module **
{{{
    object module (which is not a part of the std package).
	--
	-p
	}}}
typeid and TypeInfo
{{{
    TypeInfo
        class that provides information about types  (=defined in the object module)
    typeid
        expression (that) provides access to the TypeInfo object that is associated with a particular type.
      .
      .
    TypeInfo v = typeid(Violin);
	--
	-p
	}}}
As we will see later below, the TypeInfo class can be used for
{{{
    determining whether two types are the same, as well as for accessing special functions of a type (toHash, postblit, etc.,
	--
	-p
	}}}
TypeInfo is always about the ____ type. **
{{{
    actual run-time type.
	--
	-p
	}}}
There are various subclasses of TypeInfo for various kinds of types like
{{{
    arrays, structs, classes, etc.
	--
	-p
	}}}
    ----

    ----
    Of these, ____ can be particularly useful. **
{{{
    TypeInfo_Class
    For example, the name of the run-time type of an object can be obtained through its TypeInfo_Class.name property as a string.
    You can access the TypeInfo_Class instance of an object by its .classinfo property:
      .
    TypeInfo_Class info = a.classinfo;
    string runtimeTypeName = info.name;
	--
	-p
	}}}
Same with structs, toString enables
{{{
    using class objects as strings:
	--
	-p
	}}}
function is almost always overridden to produce a more meaningful string representation: *
{{{
    see more
	--
	-p
	}}}
comparing objects (=identity vs value) **
{{{
    Sometimes it makes more sense to compare objects by their values instead of their identities.
	--
	-p
	}}}
Different from structs, the type of the parameter of opEquals for classes is
{{{
    Different from structs, the type of the parameter of opEquals for classes is
	--
	-p
	}}}
tip: when is okay to name a variable simply as o **
{{{
    when it's not going to be reused
	--
	-p
	}}}
(+ some more tips for type comparison etc)
{{{
    Since it would not be appropriate to modify the right-hand side object in an equality comparison, it is also proper to convert the type as const:
	--
	-p
	}}}
Ex: 'With that definition, Clock objects can now be compared by their values:' *
{{{
    = see more
	--
	-p
	}}}
opCmp for string members *(*)
{{{
    =see more
	--
	-p
	}}}
std.exception
{{{
    =see more
	--
	-p
	}}}
    ----

    ----
This function allows objects of a class type to be used as associative array keys. **
{{{
    toHash
	--
	-p
	}}}
Associative arrays are a ____ implementation.
{{{
    hash table
     =Hash table is a very fast data structure when it comes to searching elements in the table.
	--
	-p
	}}}
The high speed of hash tables comes from the fact that *
{{{
    they first produce integer values for keys.
    These integers are called hash values.
    The hash values are then used for indexing into an internal array that is maintained by the table.
	--
	-p
	}}}
___ is the function that returns the hash value for an object.
{{{
    toHash
	--
	-p
	}}}
='Even Clock objects can be used as associative array key values:' (*)
{{{
    = see more
	--
	-p
	}}}
'The reason for this surprising behavior is that the key object that has been used when inserting the element is not the same as the key object that has been used when accessing the element.'
{{{
    (+see more  'Selecting members for toHash")
	--
	-p
	}}}
'Furthermore, a hash calculation that is effective on one type of data may not be as effective on another type of data.'
{{{
    =see more
	--
	-p
	}}}
As hash algorithms are beyond the scope of this book, I will give just one guideline here: *
{{{
    In general, it is better to produce different hash values for objects that are considered to have different values.
	--
	-p
	}}}
tip: effective hash values for objects that represent different points in time:
{{{
    The number of seconds since midnight
	--
	-p
	}}}
There are existing efficient algorithms for calculating hash values for variables of floating point, array, and struct types. *
{{{
    What needs to be done is to call getHash() on the typeid of each member.
      (+see more)
	--
	-p
	}}}
    ----

    ----
interface is very similar to class with the following restrictions: **(*)
{{{
    The member functions that it declares (but not implements) are abstract even without the abstract keyword.
        (=An interface is for declaring member functions that are implicitly abstract:)
    The member functions that it implements must be static or final.
    Its member variables must be static.
    Interfaces can inherit only interfaces.
	--
	-p
	}}}
Interfaces are defined by the interface keyword, **()
{{{
    interface SoundEmitter {
        // ...
    }
        .
    interface SoundEmitter {
        string emitSound();    // Declared (not implemented)
      .
    (=Classes that inherit from that interface would have to provide the implementations of the abstract functions of the interface.)
    }
	--
	-p
	}}}
'Interface function declarations can have in and out contract blocks:'
{{{
    see more
     (=contract inheritance)
	--
	-p
	}}}
The interface inheritance syntax *
{{{
    the same as class inheritance:
      .
    class Violin : SoundEmitter {
        string emitSound() {
            return "♩♪♪";
        }
    }
    class Bell : SoundEmitter {
        string emitSound() {
            return "ding";
        }
    }
	--
	-p
	}}}
'Interfaces support polymorphism:'
{{{
    =Functions that take interface parameters can use those parameters without needing to know the actual types of objects.
	--
	-p
	}}}
Inheriting from more than one interface (!)
{{{
    class Phone : SoundEmitter, CommunicationDevice {
        // ...
    }
      (++++)
	--
	-p
	}}}
Inheriting interface from interface
{{{
    An interface that is inherited from another interface effectively increases the number of functions that the subclasses must implement: (??)
      .
    interface MusicalInstrument : SoundEmitter {
        void adjustTuning();
    }
	--
	-p
	}}}
static member functions ** ** (??)
{{{
    static member functions are available for structs, classes, and interfaces.
    A static member function does not operate on an object; there is no object that the this keyword would refer to, so this is not valid inside a static function.
    static member functions can use only the static member variables.
	--
	-p
	}}}
'In the following code, every Point object gets a unique id, which is determined by a static member function:' (*)
{{{
    ***(*)
	--
	-p
	}}}
final member functions **
{{{
    final specifies that a member function cannot be redefined by a subclass.
    An example of a case where this feature is useful is where the general steps of an algorithm are defined by an interface and the finer details are left to subclasses. (??)
    'Let's see an example of this with a Game interface.' (+see more)
        final void play() {
	--
	-p
	}}}
    ----

    ----
How to use: interface is a commonly used feature. *
{{{
    There is one or more interface at the top of almost every class hierarchy.
    A kind of hierarchy that is commonly encountered in programs involves a single interface and a number of classes that implement that interface:
      .
    It is also common to move common implementation details of class hierarchies to intermediate classes.
      (eg. StringInstrument and WindInstrument classes)
	--
	-p
	}}}
Abstraction etc (**)
{{{
    Abstracting away parts of a program from each other allows making changes in one part of the program without needing to modify the other parts.
    When implementations of certain parts of the program are behind a particular interface, the code that uses only that interface does not get affected.
      +MANY EXAMPLES (=from the older class examples (??)*)
	--
	-p
	}}}
interface is similar to *
{{{
    a class that consists only of abstract functions.
	--
	-p
	}}}
interface can have ____ variables and ____ member functions. **
{{{
    static member variables and
    static or final member functions.
	--
	-p
	}}}
    ----

destroy and scoped

    ----
we have seen that the objects are prepared for use in the constructor, which is called (*)
{{{
    this();
	--
	-p
	}}}
For example, std.stdio.File (=concerning destructors) (*)
{{{
    returns the file resource back to the operating system in its destructor.
	--
	-p
	}}}
An example of calling destructors late (??)
{{{
    = using  destroy() to execute the destructor (and other tricks?)(*)
	--
	-p
	}}}
destroy() can be used on / with ___
{{{
    destroy() is primarily for reference types, (but) it can also be called on struct objects to destroy them before the end of their normal lifetimes.
	--
	-p
	}}}
When to use (= destroy() ) **
{{{
    when resources need to be released at a specific time without relying on the garbage collector.
    Eg. when constructing the XmlElement Struct as a Class instead (***)
        }
          .
        destroy(courses);
	--
	-p
	}}}
call the destructor automatically
{{{
    use scoped()
    =becaus  scopes may be exited before the destroy() lines are executed, commonly by thrown exceptions.
        or:
    construct class objects by std.typecons.scoped instead of by the new keyword.
	--
	-p
	}}}
'The effect of scoped() is to make '
{{{
    class objects behave similar to struct objects regarding lifetimes.
	--
	-p
	}}}
The RAII idiom. (*)
{{{
    When the destructor of the struct object is called automatically as its lifetime ends, it calls destroy() on the class object that it encapsulates. (This is an application of the Resource Acquisition Is Initialization (RAII) idiom.
	--
	-p
	}}}
(!!) For that reason, do not define scoped() variables by the actual type:
{{{
       (ie. that is a bug)
    (= see more)
    auto      b = scoped!C();
       (etc)
	--
	-p
	}}}
    ----

Modules and Libraries **(**)

    ----
How modules, libraries and programs relate to each other in D **(**)
{{{
    The building blocks of D programs (and libraries) are modules.
	--
	-p
	}}}
What is a module in D? (**)
{{{
    D modules are based on a simple concept:
        Every source file is a module.
	--
	-p
	}}}
By default, the name of a module is
{{{
    the same as its filename without the .d extension.
	--
	-p
	}}}
When explicitly specified, the name of the module is defined by the module keyword, which must appear as the first non-comment line in the source file.
{{{
    ????
      cat.d
    module cat;
	--
	-p
	}}}
when must the module keyword be defined in a file? **(*)
{{{
    The module line is optional if the module is not part of any package (see below).
        .
      (+ For modules that are parts of packages, the module line is not optional and the whole module name including the package name must be specified.)
	--
	-p
	}}}
( static this() and static ~this() )
{{{
    static this() and static ~this() at module scope are similar to their struct and class counterparts: (??)
    (= the initial and final operations of the module (**(!)))
      .
    [[Code that are in these scopes are executed once for each thread.]]
	--
	-p
	}}}
Code that should be executed only once for the entire program (e.g. initializing shared and immutable variables)
{{{
    = must be defined in shared static this()
    and shared static ~this() blocks,
	--
	-p
	}}}
File and module names **
{{{
    For portability reasons, I recommend that you use only lower case ASCII letters in file names.
	--
	-p
	}}}
a package **(!)
{{{
    A combination of related modules are called a package.
    The source files that are inside the same directory are considered to belong to the same package.
	--
	-p
	}}}
a package's name **
{{{
    The name of the directory(=that contains the module files) becomes the name of the package,
    which must also be specified as the first parts of module names.
      (eg. module animal.cat;  etc)
	--
	-p
	}}}
    ----

    ----
The import keyword  (=its function?)
{{{
    introducing a module to the current module:
	--
	-p
	}}}
what the parts of the name std.stdio; stand for (**!)
{{{
    module stdio
       in
    package std
	--
	-p
	}}}
(Note: As described below, for the program to be built correctly, those module files must also be provided to the linker.)
{{{
    =???
	--
	-p
	}}}
import more than one module (**)
{{{
    import animal.cat, animal.dog;
	--
	-p
	}}}
Selective imports **(!)
{{{
    import std.stdio : writeln;
    Selective imports are considered to be better than importing an entire module because it reduces the chance of name collisions.
    As we will see in an example below, a name collision can occur when the same name appears in more than one imported module.
	--
	-p
	}}}
LOCAL IMPORTS **(*)**
{{{
    For example, the two functions of the following program import the modules that they need in their own scopes:
      ****
     ...
    Additionally, a locally imported module is accessible only inside that local scope, further reducing the risk of name collisions.
    (We will later see in the Mixins chapter that local imports are in fact required for template mixins.)
	--
	-p
	}}}
The compiler finds the module files by
{{{
    converting the package and module names directly to directory and file names.
	--
	-p
	}}}
Long and short module names
{{{
    =like relative and absolute file paths
    (=The names that are used in the program may be spelled out with the module and package names:)
	--
	-p
	}}}
Renamed imports **
{{{
    It is possible to rename imported modules either for convenience or to resolve name conflicts:
      .
    import carnivore = animal.jaguar;
    import vehicle = car.jaguar;
	--
	-p
	}}}
Instead of renaming the entire import, it is possible to rename individual imported symbols. (??)
{{{
    (= the sort-clash example)
    import std.algorithm : algSort = sort;
      .
    arr.algSort;
	--
	-p
	}}}
    ----

    ----
arr.sort (expression) as convenient shortcut or version of sort(arr) ***(*)
{{{
    = 'the UFCS syntax'
	--
	-p
	}}}
Importing a package as a module **
{{{
    whenever one module from the animal package is imported, all of the other modules may need to be imported as well: animal.cat, animal.dog, animal.horse, etc.
      .
    import animal;    // <- entire package imported as a module
      .
    It is achieved by a special configuration file in the package directory, which must always be named as package.d.
    That special file includes the module directive for the package and imports the modules of the package publicly:
    // The contents of the file animal/package.d:
     ...
	--
	-p
	}}}
Deprecating features *
{{{
    The deprecation of a feature is made official by defining it with the deprecated attribute, optionally with a custom message.
    deprecated("Please use doSomething() instead.")
	--
	-p
	}}}
By specifying one of the following compiler switches, the user of the module can determine how the compiler should react when a deprecated feature is used:
{{{
    -d: Using deprecated features should be allowed
    -dw: Using deprecated features should produce compilation warnings
    -de: Using deprecated features should produce compilation errors
	--
	-p
	}}}
Tip: The name of a deprecated feature is usually defined as **
{{{
    alias do_something = doSomething;
	--
	-p
	}}}
(the compilation of a program more specifically contains the steps ) (*)
{{{
    compilation
    linking
	--
	-p
	}}}
Adding module definitions to the program (= necessary for linking the whole program) (***(*))
{{{
    dmd deneme.d animal/cat.d animal/dog.d -w -de
      .
    dmd deneme.d animal.a -w -de
      .
    =or, combine the necessary extra files into a library
    (so they don't have to be specified in command line each time) (**)
	--
	-p
	}}}
a Library is ___ ***(*)
{{{
    a collection of compiled modules
	--
	-p
	}}}
Libraries are not programs themselves; (because) they ___ **
{{{
    do not have the main() function
	--
	-p
	}}}
    ----

    ----
Making a library of some files **(*)
{{{
    dmd animal/cat.d animal/dog.d -lib -ofanimal -w -de
     .
       -of   =the library's name
	--
	-p
	}}}
The actual name of the library file depends on the platform. (!)
{{{
    For example, the extension of library files is .a under Linux systems: animal.a.
	--
	-p
	}}}
As an exception, the D standard library Phobos need not be specified on the command line. (**)
{{{
    Otherwise, it could be specified similar to the following
      dmd deneme.d animal.a /usr/lib64/libphobos2.a -w -de
	--
	-p
	}}}
The names in compiled code(=linkage code for C, C++ etc) are different from the names that the programmer writes in source code:
{{{
    The compiled names are name-mangled according to the rules of a particular language or compiler.
      For example, according to C linkage, the C function name foo would be mangled with a leading underscore as _foo in compiled code.
	--
	-p
	}}}
Name-mangling is more complex in languages like C++ and D because
{{{
    these languages allow using the same name for different entities in different modules, structs, classes, etc.  as well as for overloads of functions.
      = A D function named foo in source code has to be mangled in a way that would differentiate it from all other foo names that can exist in a program.
	--
	-p
	}}}
Explicitly mangle and demangle symbols: *
{{{
    the core.demangle module
      .
    import core.demangle;
	--
	-p
	}}}
____ specifies the linkage of entities.
{{{
    The extern() attribute
	--
	-p
	}}}
The valid linkage types that can be used with extern() are
{{{
    C, C++, D, Objective-C, Pascal, System, and Windows.
	--
	-p
	}}}
For example, when a D code needs to make a call to a function that is defined in a C library, (= what one has to do)
{{{
    that function must be declared as having C linkage:
      (+using extern(C) )
	--
	-p
	}}}
In the case of C++ linkage,
{{{
    the namespace that a name is defined in is specified as the second argument to the extern() attribute.
       (+ the ':' vs '.' Example
	--
	-p
	}}}
A file that contains such D declarations of the features of an external library is called
{{{
    a D binding of that library.
	--
	-p
	}}}
Fortunately, in most cases programmers do not need to write them from scratch as D bindings for many popular non-D libraries are available through
{{{
    the Deimos project.
	--
	-p
	}}}
When used without a linkage type, the extern attribute has a different meaning:
{{{
    It specifies that the storage for a variable is the responsibility of an external library;
    the D compiler should not reserve space for it in this module.
	--
	-p
	}}}
    ----


    ----
Encapsulation is a programming concept
{{{
    of restricting access to members to avoid problems
     (=found being altered etc)
       .
    =In a sense, encapsulation allows presenting a type as a black box that is used only through its interface.
      .
      .
    +Additionally, preventing users from accessing the members directly allows changing the members of a class freely in the future.
    (=As long as the functions that define the interface of a class is kept the same, its implementation can be changed freely.) (**)
	--
	-p
	}}}
Protection attributes limit access to
{{{
    members of structs, classes, and modules.
	--
	-p
	}}}
two ways of specifying protection attributes:
{{{
    At struct or class level  (to specify the protection of every struct or class member individually)
    At module level   (to specify the protection of every feature of a module individually: class, struct, function, enum, etc.)
	--
	-p
	}}}
private class members and module members can only be accessed by *
{{{
    the module that defines that member.
    + private member functions cannot be overridden by subclasses.
	--
	-p
	}}}
package: Specifies ____ accessibility
{{{
    =package-level
    A feature that is marked as package can be accessed by all of the code that is a part of the same package.
      (+= the inner-most package.
        .
    (=a package definition that is inside the animal.vertebrate.cat module can be accessed by any other module of the vertebrate package.
     package member functions cannot be overridden by subclasses.
	--
	-p
	}}}
protected: Specifies accessibility by *
{{{
    derived classes. *
      .
    This attribute extends the private attribute:
      =A protected member can be accessed not only by the module that defines it,
      but also by the classes that inherit from the class that defines that protected member.
	--
	-p
	}}}
the export attribute specifies accessibility from *
{{{
    the outside of the program.
	--
	-p
	}}}
three ways to specify protection attributes (1):  When written in front of a single definition, *
{{{
    it specifies the protection attribute of that definition only  (like in Java)
	--
	-p
	}}}
three ways to specify protection attributes (2): When specified by a colon, *
{{{
    it specifies the protection attributes of all of the following definitions
    until the next specification of a protection attribute.
        This is similar to the C++ programming language:
      .
      .
    private:
        // ...
        // ... all of the definitions here are private ...
        // ...
      .
    protected:
        // ...
        // ... all of the definitions here are protected ...
        // ...
	--
	-p
	}}}
three ways to specify protection attributes (3): When specified for a block,
{{{
    the protection attribute is for all of the definitions that are inside that block:
	--
	-p
	}}}
    ----

    ----
protection of module imports **(*)
{{{
    A module that is imported by import is private to the module that imports it.
    For example, if a school module imports std.stdio, modules that import school cannot automatically use the std.stdio module.
	--
	-p
	}}}
Sometimes it is desired that a module presents other modules indirectly.
(eg. a school module to automatically import a student module for its users) *
{{{
    module school.school;
    public import school.student;
      .
    (With that definition, modules that import school can use the definitions that are inside the student module without needing to import it:)
	--
	-p
	}}}
When to use encapsulation *
{{{
    Encapsulation helps preserve struct and class invariants by protecting members from direct modifications by the users of the type.
      =Encapsulation is one of the most powerful benefits of object oriented programming.
	--
	-p
	}}}
Example: Let's define the Student struct and the School class by taking advantage of encapsulation and let's use them in a short test program. **
{{{
    (see more)
     ...
     ...
    'For this class to be useful, it must present some member functions.'
     ...
     ...
    Note that the program interacts with School only by its add() and toString() functions.
    As long as the interfaces of these functions are kept the same, changes in their implementations would not affect the program above.
	--
	-p
	}}}
    ----

UFCS **(!)

    ----
define UFCS (**!)
{{{
    =is applied by the compiler automatically.
    It enables the member function syntax even for regular functions.
	--
	-p
	}}}
variable.foo(arguments)  =explain how the compiler checks this w. UFCS (***)
{{{
    if there is no member function named foo that can be called on variable with the provided arguments,
    then the compiler also tries to compile the following expression:
      .
    foo(variable, arguments)  **
    (= member function syntax  can be used to call a function / easily chaining function calls (**))
      .
    ((= Note: UFCS considers only functions that are defined at module scope; for example, nested functions cannot be called with the UFCS syntax.)) *
       --v
    (+= 'UFCS removes this discrepancy by allowing regular functions to be called by the member function syntax:') (**)
	--
	-p
	}}}
  'Although member functions are very useful and sometimes necessary, not every function that operates on a type should be a member function.'
{{{
     ...
    For example, a function that determines whether a car can travel a specific distance may more appropriately be defined as a regular function:
	--
	-p
	}}}
(some more short ex. of UFCS)
{{{
    assert(42.half() == 21);
      .
    result = half(value);
    result = value.half();
    result = value.half;
      // =same thing
	--
	-p
	}}}
UFCS is especially useful when **
{{{
    function calls are chained.
      .
    writeln(values.multiply(10).divide(3).evens);
    values.multiply(10).divide(3).evens.writeln;
	--
	-p
	}}}
AS AN ASIDE, THE ENTIRE PROGRAM ABOVE COULD HAVE BEEN WRITTEN IN A MUCH SIMPLER WAY BY MAP() AND FILTER(): **(*) ** (!) **
{{{
    = stdio, algorithm
    (= using  templates, ranges, and lambda functions, all of which will be explained in later chapters.
	--
	-p
	}}}
    ----

Properties *

    ----
Properties is ___  **
{{{
    =allow using member functions like member variables.
    (eg. like  The length property of a slice returns the number of elements of that slice:) (= .length) (**)
	--
	-p
	}}}
te-tip: what proves that .length cannot be a member variable (**!)
{{{
    =acts(!) like a function
    (= Assigning a new value to the .length property actually changes the length of the slice, sometimes by adding new elements to the underlying array: )
	--
	-p
	}}}
Properties are **
{{{
    member functions that are used like member variables.
	--
	-p
	}}}
Calling function (like writeln() ) when there is no argument to pass **(**)
{{{
    writeln;
     =same as writeln(); **(*)
	--
	-p
	}}}
when properties is hitting functions can be good for the design (**!) [eg. the rectangle struct which includes area as a property] **
{{{
    A better way would be to represent the concept of area as a property.
    Instead of defining an additional member, the value of that member is calculated by a function named area, the same as the concept that it represents:
    (+ use with a const modifier)
      .
    'Similar to the length property of slices, the properties of user-defined types can be used in assignment operations as well:' **
      .
      .
    The following additional definition of area() enables using that property in assignment operations and effectively modifying the area of Rectangle objects:
    ((However, regular member functions could also be used instead of properties:))
	--
	-p
	}}}
When to use: chose between regular member functions and properties. **
{{{
    'Sometimes regular member functions feel more natural and sometimes properties.'
    Considerations: ='as we have seen in the Encapsulation and Protection Attributes chapter, it is important to restrict direct access to member variables.'
    =Allowing user code to freely modify member variables always ends up causing issues with code maintenance.
      .
      .
    Leaving members like width and height open to public access is acceptable only for very simple types.
    Almost always a better design is to use property functions: **
	--
	-p
	}}}
tip: 'to avoid confusing their names with the member functions, the names of the member variables ' (=are modified thus) (*)
{{{
    are appended by the _ character.
    Decorating the names of member variables is a common practice in object oriented programming.
	--
	-p
	}}}
The member variables can only be modified by the Rectangle type itself to ensure the consistency of its objects. When it later makes sense that a member variable should be allowed to be modified from the outside, then it is simply a matter of defining another property function for that member.
{{{
    (???)
	--
	-p
	}}}
@property
{{{
    Property functions may be defined with the @property attribute as well. However, as a best practice, the use of this attribute is discouraged
	--
	-p
	}}}
    ----

Contract Programming for Structs and Classes  (****)

    ----
Contract programming is very effective in ____ **
{{{
    reducing coding errors.
    (prev: = in and out blocks ensure input and output contracts of functions)
	--
	-p
	}}}
Example: =Struct|Class etc for computing area of a triangle (*!)
{{{
    (=see more)
    Preconditions and postconditions for member functions
        =The in and out blocks can be used with member functions as well.
    The consistency of objects can be ensured by the following features.
        Preconditions and postconditions for object consistency
        One way of ensuring that assumption is to define an in block for the constructor so that the objects are guaranteed to start their lives in consistent states:
	--
	-p
	}}}
Although an out block has not been defined for the constructor above, it is possible to define one to ensure the consistency of members right after construction. (??) **
{{{
    invariant() blocks for object consistency
        =in and out blocks of member functions guarantee that those functions themselves work correctly.
        However, these checks are not suitable for guaranteeing that the objects are always in consistent states.
	--
	-p
	}}}
The conditions that define the consistency and validity of an object are called *
{{{
    the invariants of that object.
      .
    For example, if there is a one-to-one correspondence between the orders and the invoices of a customer class, then an invariant of that class would be that the lengths of the order and invoice arrays would be equal.
        As an example of an invariant, let's consider the School class from the Encapsulation and Protection Attributes chapter: ....
	--
	-p
	}}}
invariant() blocks are for **
{{{
    guaranteeing the invariants of user-defined types.
    invariant() blocks are defined inside the body of a struct or a class.  They contain assert checks similar to in and out blocks:
      .
      .
    As needed, there can be more than one invariant() block in a user-defined type.
	--
	-p
	}}}
export(-)functions
{{{
    functions that are exported on dynamic library interfaces.) (??)
	--
	-p
	}}}
Contract inheritance (??)
{{{
    ='Interface and class member functions can have in and out blocks as well.'
    (This allows an interface or a class to define preconditions for its derived types to depend on, as well as to define postconditions for its users to depend on.)
	--
	-p
	}}}
in and out blocks are useful in constructors as well.
{{{
    =They ensure that objects are constructed in valid states.
	--
	-p
	}}}
invariant() blocks ensure that
{{{
    objects remain in valid states throughout their lifetimes.
	--
	-p
	}}}
    ----

TEMPLATES (****)

    ----
Templates are ____ **(*)
{{{
    =allows describing the code as a pattern, for the compiler to generate program code automatically.
	--
	-p
	}}}
Templates are very useful especially for (!)  **
{{{
    in libraries because they enable writing generic algorithms and data structures, instead of tying them to specific types.
	--
	-p
	}}}
this first  templates  chapter  will cover *  (+ further resources **!)
{{{
    function, struct, and class templates and only type template parameters.
    For a complete reference on D templates, see Philippe Sigaud's D Templates: A Tutorial.
	--
	-p
	}}}
To see the benefits of templates let's start with a function that prints values in parentheses: *
{{{
    void printInParens(int value) {
        writefln("(%s)", value);
    }
	--
	-p
	}}}
General situations where templates are useful **
{{{
    algorithm is independent of the type of the elements: It is about the specific steps and operations of something (=like a search)
      (= and let the compiler generate the overloads)
	--
	-p
	}}}
Defining a function as a template is **
{{{
    =leaving one or more of the types that it uses as unspecified, to be deduced later by the compiler.
	--
	-p
	}}}
the template parameter list **(*) (+ an example template definition) **(*)
{{{
    comes between the name of the function and the function parameter list.
    For that reason, function templates have two parameter lists: the template parameter list and the function parameter list:
      .
    void printInParens(T)(T value) {
        writefln("(%s)", value);
    }
      .
    Since T represents any type, the templated definition of printInParens() above is sufficient to use it with almost every type, including the user-defined ones:
	--
	-p
	}}}
Ex. Template: Returns a copy of 'slice' except the elements that are qual to 'value'. **(!)
{{{
    see more
	--
	-p
	}}}
Let's change the function template to take the parentheses characters as well: **
{{{
    see more
    (+'Another solution is to leave the type of the parentheses to the compiler as well. Defining an additional template parameter instead of the specific char is sufficient:')
	--
	-p
	}}}
    ----

    ----
The compiler's deciding on what type to use for a template parameter is called
{{{
    type deduction.
	--
	-p
	}}}
Explicit type specification (=for templates) **: Sometimes it is not possible for the compiler to deduce the template parameters.
{{{
    To see an example of this, let's design a function that asks a question to the user, reads a value as a response, and returns that value.
      .
    'In such cases, the template parameters must be specified explicitly by the programmer.'
      .
      .
    Template parameters are specified in parentheses after an exclamation mark:
    getResponse!(int)("What is your age?");
	--
	-p
	}}}
When there is only one template parameter specified, **
{{{
    the parentheses around it are optional:
    getResponse!int("What is your age?");    // same as above
      .
    (= the to()-example:
    Since it has only one template parameter that needs to be specified, it is commonly written as to!string instead of to!(string).
	--
	-p
	}}}
Automatic generation of code for a specific set of template parameter values is called **
{{{
    an instantiation of that template for that specific set of parameter values.
    For example, to!string and to!int are two different instantiations of the to function template.
	--
	-p
	}}}
Template specializations (*)
{{{
    = Although the getResponse() function template can in theory be used for any template type, the code that the compiler generates may not be suitable for every type.
      .
      .
    One way of reading a Point object would be to read the values of the x and y members separately and then to construct a Point object from those values.
      .
    Providing a special definition of a template for a specific template parameter value is called a template specialization.
      .
    The specialization is defined by the type name after a : character in the template parameter list. (**!)
    T getResponse(T : Point)(string question) {
       .
       .
    The getResponse!int() calls are directed to the general definition of the template and the getResponse!Point() calls are directed to the Point specialization of it.
	--
	-p
	}}}
We can provide a template specialization for string as well.
{{{
    = see more
    T getResponse(T : string)(string question) {
        writef("%s (string): ", question);
	--
	-p
	}}}
The Point struct may be seen as having a limitation: Because its two members are defined specifically as int, it cannot represent fractional coordinate values. This limitation can be removed if the Point struct is defined as a template.
{{{
    see more
	--
	-p
	}}}
Structs and classes can be defined as templates as well, **
{{{
    by specifying a template parameter list after their names.
    struct Point(T) {
	--
	-p
	}}}
(Since structs and classes are not functions, they cannot be called with parameters.)
{{{
    This makes it impossible for the compiler to deduce their template parameters.  The template parameter list must always be specified for struct and class templates:
    auto center = Point!int(0, 0);
    auto branch = Point!int(100, 100);
      .
      .
    However, now it can be used with any type. For example, when more precision is needed, with double: (**)
    auto point1 = Point!double(1.2, 3.4);
    auto point2 = Point!double(5.6, 7.8);
	--
	-p
	}}}
(The following changes are required to correctly specialize getResponse() for any instantiation of Point:) **
{{{
    see more
      .
      .
      .
    (+ return value is Point!T )
	--
	-p
	}}}
    ----

    ----
Default template parameters **(*)
{{{
    For example, getResponse() may almost always be called for the int type in the program, and only in a few places for the double type.
    T getResponse(T = int)(string question) {
      .
    = Default parameter types are specified after the '=' character: (*)
	--
	-p
	}}}
(Default template parameters can be specified for struct and class templates as well, but )
{{{
    in their case the template parameter list must always be written even when empty:
    struct Point(T = int) {
      .
      .
        Point!() center;
	--
	-p
	}}}
Similar to default function parameter values as we have seen in the Variable Number of Parameters chapter, default template parameters can be specified for all of the template parameters or for the last ones:
{{{
    void myTemplate(T0, T1 = int, T2 = char)() {
      .
    myTemplate!string();
	--
	-p
	}}}
Every template instantiation yields a distinct type *
{{{
    see more
	--
	-p
	}}}
Class template example: stack data structure **
{{{
    see more(!!)
    (= 'Struct and class templates are commonly used in the implementations of data structures.')o
      .
    +'Here is a unittest block for this class that uses its int instantiation:'
	--
	-p
	}}}
Function template example: binary search algorithm **
{{{
    = see more (!!)
    + 'Algorithms that repeat themselves on a smaller range of the initial elements are recursive.' (**!)
	--
	-p
	}}}
____ is sufficient to make function, struct, and class definitions templates. **
{{{
    Specifying template parameter lists
	--
	-p
	}}}
____ can be specified explicitly after an exclamation mark. **
{{{
    Template arguments
    (+ The parentheses are not necessary when there is only one token inside the parentheses.)
	--
	-p
	}}}
Template arguments can only be deduced for function templates. *
{{{
    Template arguments can only be deduced for function templates.
	--
	-p
	}}}
    ----

Pragmas (**)

    ----
Pragmas are
{{{
    a way of interacting with the compiler. They can be for providing special information to the compiler as well as getting information from it.
    are useful in non-templated code as well, (but)
    +(!!) pragma(msg) can be helpful when debugging templates. (***)
	--
	-p
	}}}
Using pragma (*)
{{{
    pragma(msg)
    = Prints a message to stderr during compilation.
	--
	-p
	}}}
For example, the following pragma(msg) is being used for exposing the types of template parameters, presumably during debugging: *
{{{
    void func(A, B)(A a, B b) {
        pragma(msg, format("Called with types '%s' and '%s'",
                           A.stringof, B.stringof));
	--
	-p
	}}}
Instructs the compiler to link the program with a particular library.  This is the easiest way of linking the program with a library that is already installed on the system *
{{{
    pragma(lib)
      pragma(lib, "curl");
	--
	-p
	}}}
Specifies whether a function should be inlined or not.
{{{
    pragma(inline)
	--
	-p
	}}}
perform a compiler optimization called function inlining: (??) *
{{{
    dmd deneme.d -w -inline
    its(=the function's) body is injected into code right where it is called from; no actual function call happens.
    (= On the platform that I tested that program, eliminating the function call reduced the execution time by about 40%:)
    there may be cases where it is beneficial to help the compiler with this decision. (= which functions to inline)
	--
	-p
	}}}
Instructs the compiler to never inline certain functions even when the -inline compiler switch is specified.
{{{
    pragma(inline, false):
	--
	-p
	}}}
'These pragmas can affect the function that they appear in, as well as they can be used with a scope or colon to affect more than one function:'
{{{
    =see more
	--
	-p
	}}}
Another compiler switch that can make programs run faster is
{{{
    -O
    ( but will compile slower )
	--
	-p
	}}}
This pragma is useful when D code needs to call a library function that happens to be a D keyword. *
{{{
    pragma(mangle)
    (For example, if a C library had a function named override, because override happens to be a keyword in D, the only way of calling it from D would be through a different name.)
	--
	-p
	}}}
    ----

    ----
Use case for alias *
{{{
    Having to type Stack!(Point!double) explicitly in multiple places in the program has a number of drawbacks:
    - difficult to read
    - too much information, rather thaneasy identifying
    - have to change many places if the code changes
      .
    alias Points = Stack!(Point!double);
	--
	-p
	}}}
+'It may make sense to go further and define two aliases, one taking advantage of the other:'
{{{
    (= 'nested aliases')
	--
	-p
	}}}
syntax of the alias keyword (vs the older syntax) *
{{{
    alias new_name = existing_name;
     alias existing_name new_name;
	--
	-p
	}}}
alias is also useful when shortening names which otherwise need to be spelled out along with their module names. *
{{{
    =PalaceQueen (etc)
      (= instead of chess.Queen)
	--
	-p
	}}}
alias works with other names as well  (eg. shortening the name of a variable) (*)
{{{
    alias var = reallyLongVarName;
	--
	-p
	}}}
Tip: 'For flexibility, even fundamental types like int can have aliases:' *
{{{
    alias CustomerNumber = int;
      (etc)
	--
	-p
	}}}
Ex: alias Weight = double;
{{{
    see more
	--
	-p
	}}}
alias can reveal the hidden names when desired:
{{{
    = names hidden by 'name hiding'
    alias foo = Super.foo;
      (+ showing hidden names of member variables as well)
	--
	-p
	}}}
with (**)
{{{
    with is for removing repeated references to an object or symbol. (??) **
    with (s) {
        i = 1;    // means s.i
	--
	-p
	}}}
It is possible to create a temporary object inside the parentheses. In that case, the temporary object becomes an lvalue, lifetime of which ends upon leaving the scope: (??) **
{{{
    with (S()) {
        i = 1;    // the i member of the temporary object
	--
	-p
	}}}
with is especially useful with case sections for removing repeated references to e.g. an enum type: **(*) *
{{{
    final switch (c) with (Color) {
      .
    case red:       // means Color.red
	--
	-p
	}}}
summary for alias and with *
{{{
    alias  assigns aliases to existing names.
    with  removes repeated references to the same object or symbol.
	--
	-p
	}}}
alias this **
{{{
    alias this enables automatic type conversions (also known as implicit type conversions)
    = of user-defined types.
      .
    alias member_variable_or_member_function this;
      .
    The keywords alias and this are written separately where the name of a member variable or a member function is specified between them:
	--
	-p
	}}}
    ----

Pointers *

    ----
Pointers are ____ *
{{{
    variables that provide access to other variables.
	--
	-p
	}}}
The value of a pointer is
{{{
    the address of the variable that it provides access to.
	--
	-p
	}}}
Why pointers  should not be as difficult in D  (as eg. in C) (*)
{{{
    because other features of D that are semantically close to pointers
    are more useful in situations where pointers would have to be used in other languages.
      ...
      ...
    Behind the scenes, D's higher-level concepts (class variables, slices, associative arrays, etc.) are all implemented by pointers. As these higher-level features are already efficient and convenient, pointers are rarely needed in D programming
	--
	-p
	}}}
rep: using pointer variables in foreach loops (**)  (= so the values of the actual array looped over gets modified) *
{{{
    = When the actual elements need to be modified, the foreach variable must be defined as ref:
	--
	-p
	}}}
Programming languages implement the reference and pointer concepts by *
{{{
    special registers of the microprocessor, which are specifically for pointing at memory locations.
	--
	-p
	}}}
pointer syntax of D
{{{
    is mostly the same as in C.
	--
	-p
	}}}
types of pointers (!)
{{{
    With the exception of void pointers, every pointer is associated with a certain type and can point at only variables of that specific type.
	--
	-p
	}}}
a pointer variable that would be pointing at int variables would be defined like this:
{{{
    int * myPointer;
      (note(): spaces optional) (*)
      .
    int *myPointer;
      .
      .
    When it is specifically a pointer type that is being mentioned as in "int pointer", it is common to write the type without any spaces as in int*.
	--
	-p
	}}}
Being variables themselves pointers have values as well. The default value of a pointer is
{{{
    the special value null,
    which means that the pointer is not pointing at any variable yet
        (i.e. does not provide access to any variable).
	--
	-p
	}}}
    ----

    ----
To make a pointer provide access to a variable, the value of the pointer must be set to **(*)
{{{
    the address of that variable.
	--
	-p
	}}}
'the pointee' (??)
{{{
    the variable that is at the specific address (=that the pointer points to via the &-operator (!))
      (=what a pointer points TO)
	--
	-p
	}}}
The & operator (=does what)? **(*)
{{{
    produces the address of the variable that is written after it.
      .
    int myVariable = 180;
    int * myPointer = &myVariable;
	--
	-p
	}}}
(Since the difference between the two addresses above is 8, remembering that an int takes up 4 bytes, we can deduce that myVariable and myPointer are 4 bytes apart in memory.)
{{{
    ( ! )
	--
	-p
	}}}
(te: the memory of the microprocessor)
{{{
    the registers
	--
	-p
	}}}
(te: the names (vars etc) in the code)
{{{
    symbols
	--
	-p
	}}}
third meaning  of the *-operator (*)
{{{
    The access operator
	--
	-p
	}}}
iexplain  Coordinate * ptr = &center;
{{{
    (= define a pointer to an object
	--
	-p
	}}}
the (*ptr)-syntax
{{{
    Parentheses so that the . (dot) operator is applied to the object, not to the pointer
	--
	-p
	}}}
why one can use the simplified syntax ptr.x += 10; in D  (= access to the member of the object) (?)
{{{
    To reduce the complexity of pointer syntax in D, the . (dot) operator is transferred to the pointee and provides access to the member of the object.
      (+(!) some small exceptions)
    (+(!) Since the pointer itself does not have a member named x, .x is applied to the pointee and the x member of center gets modified:)
    (+= same as with classes. When the . (dot) operator is applied to a class variable, it provides access to a member of the class object:)
	--
	-p
	}}}
    ----

    ----
(There is an exception to this rule both for class variables and for pointers (= that they are implemented by pointers) (??))
{{{
    Type properties like .sizeof are applied to the type of the pointer, not to the type of the pointee:
	--
	-p
	}}}
On a 64-bit system pointers are (= what type(?))
{{{
    8-byte long:
	--
	-p
	}}}
The values of pointers can be incremented or decremented and they can be used in addition and subtraction:  these operations do not modify the actual value by the specified amount. Rather,
{{{
    the value of the pointer gets modified so that it now points at the variable that is a certain number of variables beyond the current one.
	--
	-p
	}}}
For that to work correctly, the actual value of the pointer must be incremented by the size of the variable. (??) (??)
{{{
    For example, because the size of int is 4, ....
	--
	-p
	}}}
one cannot point at a non-existent variable, but  (*)
{{{
    it is valid to point at the imaginary element one past the end of an array.
	--
	-p
	}}}
For example, it is invalid to increment a pointer that points at myVariable, because
{{{
    myVariable is defined as a single int:
	--
	-p
	}}}
Pointers are risky (!)
{{{
    It is the programmer's responsibility to ensure that a pointer is either null or points at a valid memory location (
	--
	-p
	}}}
(When defining a slice with a number range, the second index is one past the elements of the slice:
{{{
    It is a common function design in C and C++ where a function parameter points at the first element and another one points at the element after the last element:
	--
	-p
	}}}
((Two pointers that define a range can also be used with foreach loops:))
{{{
    (see more)
	--
	-p
	}}}
    ----

    ----
[] operator name (*)
{{{
    the array indexing operator
	--
	-p
	}}}
((Although it is not absolutely necessary in D, pointers can directly be used for accessing the elements of an array by an index value:))
{{{
	--
	-p
	}}}
((Behind the scenes, the compiler converts the pointer[index] syntax to the *(pointer + index) expression:))
{{{
      .
    note: in practice, use slices instead
	--
	-p
	}}}
[when the number of valid elements is known, a pointer can be used to construct a slice.]
{{{
	--
	-p
	}}}
('After that definition, slice is ready to be used safely in the program just like any other slice:')
{{{
	--
	-p
	}}}
void* can point at (= what types?)
{{{
    (Although it is almost never needed in D,)
	--
	-p
	}}}
[void* pointers are limited in functionality.] *
{{{
    As a consequence of their flexibility, they cannot provide access to the pointee. When the actual type is unknown, its size is not known either: ()
    = Instead, its value must first be converted to a pointer of the correct type:
	--
	-p
	}}}
(It is possible to increment or decrement values of void* pointers,)
{{{
	--
	-p
	}}}
void* is sometimes needed when **
{{{
    interacting with libraries that are written in
    C. Since C does not have higher level features like interfaces, classes, templates, etc.  C libraries must rely on the void* type.
	--
	-p
	}}}
    ----

    ----
Using pointers in logical expressions *
{{{
    Pointers can automatically be converted to bool.
     ...
    In other words, pointers that do not point at any variable are false.
	--
	-p
	}}}
Let's consider a function that prints objects to the standard output. Let's design this function so that it also provides the number of bytes that it has just output. (+ a bool check)
{{{
    (+ better version)
	--
	-p
	}}}
(new returns a pointer for some types)
{{{
    new, which we have been using only for constructing class objects can be used with other types as well: structs, arrays, and fundamental types.
    The variables that are constructed by new are called dynamic variables.
    The variable itself does not have a symbolic name in the compiled program; it would be accessed through the reference that is returned by new.
        The reference that new returns is a different kind depending on the type of the variable:
	--
	-p
	}}}
The .ptr property of arrays and slices is
{{{
    the address of the first element. The type of this value is a pointer to the type of the elements:
    This property is useful especially when interacting with C libraries.  Some C functions take the address of the first of a number of consecutive elements in memory.
	--
	-p
	}}}
The in operator of associative arrays
{{{
    In fact, the in operator returns the address of the element if there is an element for the specified key; otherwise, it returns null.
	--
	-p
	}}}
When to use pointers (in D) *
{{{
    - When required by libraries
      Pointers can appear on C and C++ library bindings (eg. GtkD)
    - When referencing variables of value types  (or can sometimes use tern. expr.s)
    - As member variables of data structures
      (= Pointers are essential when implementing many data structures.)
      Unlike the elements of an array being next to each other in memory, elements of many other data structures are apart. Such data structures are based on the concept of their elements pointing at other elements
      (Although it is possible to take advantage of D's reference types, pointers may be more natural and efficient in some cases.)
    - When accessing memory directly
      = provide byte-level access to memory locations.
      Note that such locations must still belong to valid variables.
	--
	-p
	}}}
Example: A simple linked list
{{{
    (+ using a struct to represent the nodes of such a linked list)
	--
	-p
	}}}
The entire list can be represented by a single pointer that points at the first node, which is commonly called ____
{{{
    the head
	--
	-p
	}}}
[Observing the contents of memory by ubyte*]
{{{
    The data stored at each memory address is a byte.
    Every variable is constructed on a piece of memory that consists of as many bytes as the size of the type of that variable.
      =
    A suitable pointer type to observe the content of a memory location is ubyte*.
    Once the address of a variable is assigned to a ubyte pointer, then all of the bytes of that variable can be observed by incrementing the pointer.
      int * address = &variable;
        (++ (see more?))
	--
	-p
	}}}
'The output of the program is informative:'
{{{
    (= maybe see more)
    'Although in reverse order on little-endian systems, ...'
      ...
      ...
    + 'This is a strong indicator that strings are indeed laid out in memory as in the struct above.'
      The output above hints at the possibility that behind the scenes a class variable is implemented as a single pointer that points at the actual class object:
	--
	-p
	}}}
'Since some of the UTF-8 code units may correspond to control characters of the terminal and disrupt its output, we print only the printable characters by first checking them individually by std.ascii.isPrintable().'
{{{
    (+ 'We can use that function to print the UTF-8 code units of a string through its .ptr property:')
	--
	-p
	}}}
    ----

bit operations

    ----
System programmers must understand bit operations at least
{{{
    to use flag parameters correctly.
	--
	-p
	}}}
'Programming languages are abstractions.'
{{{
    Programming languages are tools that help humans use the hardware without needing to know the details of the hardware.
	--
	-p
	}}}
The processing abilities of modern electronic devices are mostly based on the electronic element ____
{{{
    called the transistor.
	--
	-p
	}}}
('A significant ability of the transistor is that ')
{{{
    it can be controlled by other parts of the electronic circuit that the transistor is a part of. In a way, it allows the electronic circuit be aware of itself and be able to change its own state.
	--
	-p
	}}}
The smallest unit of information that can be addressed uniquely (=in the comp.) is
{{{
    a byte.
      (For that reason, although it carries one bit of information (false or true), even bool must be implemented as one byte:)
	--
	-p
	}}}
Data that are being operated on in a microprocessor are stored in
{{{
    registers
    (= Registers provide very limited but very fast operations.)
	--
	-p
	}}}
The size of the registers depend on
{{{
    the architecture of the microprocessor.
    For example, 32-bit microprocessors commonly have 4-byte registers and 64-bit microprocessors commonly have 8-byte registers.
    (The size of the registers determine how much information the microprocessor can process efficiently at a time and how many memory addresses that it can support.)
	--
	-p
	}}}
the binary number system.  The digits are named incrementally as *
{{{
    ones, twos, fours, eights, etc.
    In other words, moving one digit to the left would multiply the value of that digit by 2: 1, 2, 4, 8, etc.
      .
    1011 == 1 count of eight, no four, 1 count of two, and 1 count of one
	--
	-p
	}}}
'The following table lists the values of all of the digits of a 32-bit unsigned number in the binary system:'
{{{
    = ??(?)
	--
	-p
	}}}
The bits that have higher / lower values are called
{{{
    the upper / lower bits
	--
	-p
	}}}
'Remembering from the Literals chapter that binary literals are specified by the 0b prefix, the following program demonstrates ...' *
{{{
	--
	-p
	}}}
    ----

    ----
The uppermost bit of a signed type determines *
{{{
    whether the value is positive or negative:
      .
      .
    ((I will not get into more detail in this chapter other than noting that this is due to the twos complement representation, which is used by D as well.))
	--
	-p
	}}}
Partly for that reason, unless there is a reason not to, bit operations must always be executed on
{{{
    unsigned types: ubyte, ushort, uint, and ulong.
	--
	-p
	}}}
It is straightforward to convert between binary and hexadecimal numbers. *
{{{
    In order to convert a hexadecimal number to binary, the digits of the hexadecimal number are converted to their binary representations individually.
	--
	-p
	}}}
'Let's first define a function which will be useful later when examining how bit operators work. This function will print a value in binary, hexadecimal, and decimal systems:'
{{{
	--
	-p
	}}}
    ----

(bit operations)

    ----
Complement operator: ~
{{{
    converts each bit of a value to its opposite:
      print(~value);
	--
	-p
	}}}
And operator: &
{{{
    The value of each resultant bit is 1 if both of the corresponding bits of the expressions are 1; 0 otherwise.
      print(lhs & rhs);
    .
    When one of the bits is 0, regardless of the other bit the result is always 0. Accordingly, "anding a bit by 0" means to clear that bit.
	--
	-p
	}}}
Or operator: |
{{{
    print(lhs | rhs);
    .
    When one of the bits is 1, regardless of the other bit the result is always 1. Accordingly, "orring a bit by 1" means to set it.
	--
	-p
	}}}
Xor operator: ^
{{{
    print(lhs ^ rhs);
    "Xorring a bit" with itself means to clear that bit.
      Regardless of its value, xorring a variable with itself always produces 0:
	--
	-p
	}}}
Right-shift operator: >>
{{{
    print(value >> 2);
    [For signed types, the value of the leftmost bits are determined by a process called sign extension.]
	--
	-p
	}}}
Unsigned right-shift operator: >>>
{{{
     ..
	--
	-p
	}}}
Bit  Operators with assignment
{{{
    All of the binary operators above have assignment counterparts: &=, |=, ^=, >>=, >>>=, and <<=.
      value &= 123;
	--
	-p
	}}}
    ----

semantics of the bit operations

    ----
| is a union set
{{{
    The | operator produces the union of (??)
	--
	-p
	}}}
& is an intersection set
{{{
     ??
	--
	-p
	}}}
|= sets selected bits to 1
{{{
     ??
	--
	-p
	}}}
&= clears selected bits
{{{
    = 'One of the expressions can be seen as the actual expression and the other expression can be seen as a selector for the bits to clear (to set to 0):'
	--
	-p
	}}}
& determines whether a bit is 1 or not *
{{{
     ..
	--
	-p
	}}}
Right-shifting by one is the equivalent of **
{{{
    dividing by two
    (=Shifting all of the bits of a value by one position to the right produces half of the original value.)
      .
    + For example, right-shifting by 3 bits would divide a value by 8:
	--
	-p
	}}}
the effect of right-shifting signed values w./in the twos complement system
{{{
    According to how the twos complement system works, right-shifting has the same effect on signed values:
      (=halving the value)
	--
	-p
	}}}
Left-shifting by one is the equivalent of
{{{
    multiplying by two
    + Multiplying by 2 a total of 5 times is the same as multiplying by 32:
	--
	-p
	}}}
    ----

    ----
Flags are **(*)
{{{
    single-bit independent data
    that are kept together in the same variable.
    As they are only one bit wide each, they are suitable for representing binary concepts like enabled/disabled, valid/invalid, etc.
    (= Such one-bit concepts are sometimes encountered in D modules that are based on C libraries.)
	--
	-p
	}}}
Flags are usually defined as * (+ the car game realism example) *
{{{
    non-overlapping values of an enum type.
    ((As an example, let's consider a car racing game where the realism of the game is configurable: (= real, or not) )
    enum Realism {
        fuelUse    = 1 << 0,
        bodyDamage = 1 << 1,
        tireUse    = 1 << 2,
        skidMarks  = 1 << 3
    }
    (('Since their 1 bits do not match others', these values can be combined by the | operator to be kept in the same variable.')) (??(!))
    'Later, these flags can be queried by the & operator:'
    = The & operator produces 1 only if the specified flag is set in flags.
	--
	-p
	}}}
'In some libraries and some protocols an integer value may carry more than one piece of information. =These separate parts of data can be extracted from the variable by __ **(*)
{{{
    masking
    The four octets of an IPv4 address are an example of this concept.
    =They are all kept in a single 32-bit value.
    A mask consists of a number of 1 bits that would cover the specific part of a variable. "And"ing the value by the mask extracts the part of the variable that is covered by that mask.
	--
	-p
	}}}
    ----

conditional compilation (=static if etc) (**!)

    ----
Conditional compilation
{{{
    compiling parts of programs in special ways depending on certain compile time conditions.
     (= for taking out entire sections)
	--
	-p
	}}}
unittest blocks are compiled and run only if
{{{
    the -unittest compiler switch is enabled
    (+The contract programming blocks in, out, and invariant are activated only if the -release compiler switch is not enabled.)
	--
	-p
	}}}
Unit tests and contracts are about program correctness; whether they are included in the program should not change
{{{
    the behavior of the program.
	--
	-p
	}}}
The following are the features of D that are specifically for conditional compilation: **
{{{
    debug
    version
    static if
    is expression
    __traits
	--
	-p
	}}}
debug is useful during program development. The expressions and statements that are marked as debug are compiled into the program only when
{{{
    the -debug compiler switch is enabled:
      .
    debug a_conditionally_compiled_expression;
      .
    debug {
        // ... conditionally compiled code ...
    } else {
        // ... code that is compiled otherwise ...
    }
      .
    =We have been adding statements into the programs, which printed messages like "adding", "subtracting", etc.  to the output. Such messages (aka logs and log messages) are helpful in finding errors by visualizing the steps that are taken by the program
	--
	-p
	}}}
'One way of locating the bug in the program is to insert lines that would print messages to the output:' (**)
{{{
    It is obvious that the writefln() expressions are not needed anymore once the bug has been located and fixed. However, removing those lines can also be seen as wasteful, because they might be useful again in the future.
    Instead of being removed altogether, the lines can be marked as debug instead: (**)
      .
    debug writefln("%s not found", value);
      .
    dmd deneme.d -ofdeneme -w -debug
	--
	-p
	}}}
If there are many debug keywords in the program, possibly in unrelated parts, the output may become too crowded. To avoid that, the debug statements can be given names (tags) to be included in the program selectively: **
{{{
    debug(binarySearch) writefln("%s not found", value);
    dmd deneme.d -ofdeneme -w -debug=binarySearch
      .
    debug blocks can have tags as well:
    debug(binarySearch) {
        // ...
    }
      .
    enable more than one debug tag at a time:
    dmd deneme.d -w -debug=binarySearch -debug=stackContainer
	--
	-p
	}}}
Sometimes it is more useful to associate debug statements by numerical levels. Increasing levels can provide more detailed information **
{{{
    debug(1) writeln("entered myFunction");
    debug(2) {
    The debug expressions and blocks that are lower than or equal to the specified level would be compiled:
    dmd deneme.d -w -debug=1
      .
    The following compilation would provide more information:
    dmd deneme.d -w -debug=2
	--
	-p
	}}}
version(tag) and version(level) *
{{{
    version(testRelease) /* ... an expression ... */;
    version(schoolRelease) {
    version(1) aVariable = 5;
    version(2) {
        The else clause is optional.
	--
	-p
	}}}
version: =As with debug, more than one version can be enabled: *
{{{
    dmd deneme.d -w -version=record -version=precise_calculation
    There are many predefined version tags, the complete list of which is available at the Conditional Compilation specification.
      (GNU, LDC, Win, diff. processors (etc etc))
      .
    In addition, there are the following two special version tags:
      none: This tag is never defined; it is useful for disabling code blocks.
      all: This tag is always defined; it is useful for enabling code blocks.
	--
	-p
	}}}
std.ascii
{{{
    determining the newline character sequence for the system (??)
     (=see more)
	--
	-p
	}}}
Assigning identifiers to debug and version (**)
{{{
    Similar to variables, debug and version can be assigned identifiers.
     ++see more
     = 'The assignments inside the debug(everything) block above activates all of the specified identifiers:'
    .
    dmd deneme.d -w -debug=everything
	--
	-p
	}}}
    ----

    ----
static if (****)
{{{
    roughly= 'compile this part in if..' (**!)
      .
    takes a logical expression and evaluates it.
    determines whether a piece of code should be included in the program or not.
      .
    The logical expression must be evaluable at compile time. (!!/**)
	--
	-p
	}}}
The (static if) logical expressions commonly take advantage of the ____ expression and ____ (**(*))
{{{
    the is expression and
    __traits
	--
	-p
	}}}
static if can appear at
{{{
    module scope or inside definitions of struct, class, template, etc.
    + Optionally, there may be else clauses as well.
	--
	-p
	}}}
Ex. 1: Let's use static if with a simple template, making use of the is expression. (**)
{{{
    (=the struct) MyType can be used only with two types: float or double. The return type of doWork() is chosen depending on whether the template is instantiated for float or double:
      (+ using  else static if )
	--
	-p
	}}}
static assert is **
{{{
    the compile time equivalent of assert
    = If the conditional expression is false, the compilation gets aborted due to that assertion failure.
    [can appear in any scope in the program (= similarly to static if)]
	--
	-p
	}}}
A prev. static assert example *
{{{
    compilation gets aborted if T is any type other than float or double:
	--
	-p
	}}}
As another example, (=of static assert)
{{{
    let's assume that a specific algorithm can work only with types that are a multiple of a certain size.
    Such a condition can be ensured at compile time by a static assert:
      .
    T myAlgorithm(T)(T value) {
        /* This algorithm requires that the size of type T is a
         * multiple of 4. */
        static assert((T.sizeof % 4) == 0);

        // ...
    }
      .
    static assert can be used with any logical expression that is evaluable at compile time.
	--
	-p
	}}}
The __traits keyword and the std.traits module provide **
{{{
    information about types and expressions at compile time
    __traits(keyword, parameters)
        The parameters are either types or expressions, meanings of which are determined by each particular keyword.
      .
      .
    For example, the isArithmetic keyword can determine whether a particular template parameter T is an arithmetic type:
    static if (__traits(isArithmetic, T)) {
	--
	-p
	}}}
information that can be gathered by __traits is especially useful in  (= when working with) *(*)
{{{
    templates
	--
	-p
	}}}
Similarly, the std.traits module provides *
{{{
    information at compile time through its templates.
    For example, std.traits.isSomeChar returns true if its template parameter is a character type:
      .
    Please refer to the __traits documentation and the std.traits documentation for more information.
	--
	-p
	}}}
    ----

    ----
is Expression **
{{{
    The is expression is evaluated at compile time. It produces an int value, either 0 or 1 depending on the expression specified in parentheses
    is (/* ... */)    // is expression
    It is especially useful in static if conditionals and template constraints. **
      .
    The condition that it takes is
    always about types, which must be
    written in one of several syntaxes.
    is (T)
      .
    static if (is (int)) {
        writeln("valid");
      .
    } else {
        writeln("invalid");
    }
      .
      .
    static if (is (string[void])) {
        writeln("valid");
      .
    } else {
        writeln("invalid");
    }
        .
        .
    is (T Alias)
    is (T : OtherT)
    is (T Alias : OtherT)
    is (T == Specifier)
     ...
    is (T identifier == Specifier)
	--
	-p
	}}}
Whether matches the same specifier *
{{{
    When Specifier is one of the following keywords, this use of is determines whether the type matches that specifier (we will see some of these keywords in later chapters):
      .
    struct
    union
    class
    interface
    enum
    function
    delegate
    const
    immutable
    shared
	--
	-p
	}}}
Ex: 'Function templates can take advantage of such information to behave differently depending on the type that the template is instantiated with.'
{{{
	--
	-p
	}}}
+Ex: 'The following function template uses different specifiers with this syntax of the is expression:' (**(*))
{{{
    
	--
	-p
	}}}
There are four different syntaxes of the is expression that uses a template parameter list: (**)
{{{
    is (T : Specifier, TemplateParamList)
    is (T == Specifier, TemplateParamList)
    is (T identifier : Specifier, TemplateParamList)
    is (T identifier == Specifier, TemplateParamList)
        These syntaxes allow for more complex cases.
     --
    As a simple example, let's assume that an is expression needs to match associative arrays that have keys of type string:
	--
	-p
	}}}
Having Value[Key] as the Specifier requires that T
{{{
    is an associative array.
    Leaving Value as is means that it can be any type.  Additionally, the key type of the associative array must be string. As a result, the previous is expression means "if T is an associative array where the key type is string
	--
	-p
	}}}
    ----

Function Pointers, Delegates, and Lambdas

    ----
Function pointers are for **
{{{
    storing addresses of functions in order to execute those functions at a later time.
    Function pointers are similar to their counterparts in the C programming language.
	--
	-p
	}}}
Delegates store *
{{{
    both a function pointer and the context to execute that function pointer in.
    The stored context can either be the scope that the function execution will take place or a struct or class object.
      .
    Delegates enable closures as well, a concept that is supported by most functional programming languages.
	--
	-p
	}}}
(test?)use 1  of function pointers
{{{
    take/observe type and address of a function (+member functions etc)  (??)
      .
    return_type function(parameters) ptr;
    (Function pointer syntax is relatively harder to read; it is common to make code more readable by an alias:)
	--
	-p
	}}}
'Function pointers can be called exactly like functions:'
{{{
    
	--
	-p
	}}}
When to use (=function pointers)  ((**))
{{{
    Because function pointers store what function to call and they are called exactly like the functions that they point at, function pointers effectively store the behavior of the program for later.
	--
	-p
	}}}
''A more common alternative of implementing behavior differences is polymorphism.'' ((+ the function pointer alternative))
{{{
    An Employee interface can be defined and different wage calculations can be handled by different implementations of that interface:
     .
    Function pointers are yet another alternative for implementing different behavior. They are more common in programming languages that do not support object oriented programming.
	--
	-p
	}}}
A "Real"(!) Example(*): 'Let's design a function that takes an array and returns another array.  This function will filter out elements with values less than or equal to zero, and multiply the others by ten:'
{{{
      .
      .
    (+ It could be more useful if the behaviors of filtering and conversion were parameterized.)
	--
	-p
	}}}
Predicate is the type of functions
{{{
    that take int and return bool
	--
	-p
	}}}
'This design allows calling filterAndConvert() with any filtering and conversion behaviors.' (**)
{{{
	--
	-p
	}}}
    ----

    ----
(lambdas 1): sometimes such functions are so trivial that defining them as proper functions with name, return type, parameter list, and curly brackets is unnecessarily wordy.
{{{
    = using lambdas (**)
    (= 'The following line has anonymous functions that are the equivalents of isEven() and negativeOf(), without proper function definitions:')
      .
    writeln("output: ", filterAndConvert(numbers, number => (number % 2) == 0, number => -number));
	--
	-p
	}}}
Function pointer as a member
{{{
    Function pointers can be stored as members of structs and classes as well. To see this, let's design a class that takes the predicate and convertor as constructor parameters in order to use them later on:
	--
	-p
	}}}
te: Anonymous functions
{{{
    which are also knows as function literals or lambdas
	--
	-p
	}}}
lambdas allows for ___ (**(*))
{{{
    = allow defining functions inside of expressions.
    Anonymous functions can be used at any point where a function pointer can be used.
	--
	-p
	}}}
Definition of a Lambda (**!)
{{{
    (= look up full definition just as a reference )
      When the return type can be deduced from the return statement inside the anonymous function, then the return type need not be specified
      Further, when the anonymous function does not take parameters, its parameter list need not be provided.
    foo({ return 42.42; });
    [ left to the compiler to determine whether it is an anonymous function or an anonymous delegate (=unless it uses a variable from one of the enclosing scopes, it is a function) ]
      --
    foo(function double() { return 42.42; });
    foo(function () { return 42.42; });
    foo(function { return 42.42; });
     .
	--  shortest vs full syntax (**)
    () => expression
    single_parameter => expression
    (parameters) => expression
    function return_type(parameters) { return expression; }
	--
	-p
	}}}
LET'S USE THE LAMBDA SYNTAX IN A PREDICATE PASSED TO std.algorithm.filter. **(*) **
{{{
    The following lambda is a predicate that matches elements that are greater than 10:
       ...
      writeln(numbers.filter!(number => number > 10));
      ( writeln(numbers.filter!(function bool(int number) { )
	--
	-p
	}}}
'The following algorithm takes two slices and passes their corresponding elements one by one to a function that itself takes two parameters. It then collects and returns the results as another slice:'
{{{
	--
	-p
	}}}
    ----

    ----
A delegate is **
{{{
    a combination of a function pointer and the context that it should be executed in.
    + Delegates also support closures in D.
     ...
     ...
    Delegates extend the lifetime of the context of a lambda so that the local state that the function uses remains valid.
	--
	-p
	}}}
'That is why the address of such a local variable cannot be returned from a function.' (!)
{{{
	--
	-p
	}}}
As we have already used in the previous example, delegates can take advantage of the shorter syntaxes as well. (??)
{{{
    When neither function nor delegate is specified, the type of the lambda is decided by the compiler, depending on whether the lambda accesses local state. If so, then it is a delegate.
      (+ example with delegates that does not take any parameters )
	--
	-p
	}}}
We have seen that a delegate is ___ **(*)
{{{
    nothing but a function pointer and the context that it is to be executed in.
	--
	-p
	}}}
An object and a member function as a delegate (??) *:
{{{
    a delegate can also be composed of a member function and an existing object that that member function is to be called on.
      &object.member_function
	--
	-p
	}}}
According to the output, the type of moveHorizontally() called on location is indeed a delegate: *
{{{
    writeln(typeof(&location.moveHorizontally).stringof);
	--
	-p
	}}}
Function pointers, lambdas, and delegates are
{{{
    expressions
	--
	-p
	}}}
Delegate properties *
{{{
    The function and context pointers of a delegate can be accessed through its .funcptr and .ptr properties, respectively:
    tip*: It is possible to make a delegate from scratch by setting those properties explicitly:
      .
      Calling the delegate above as d() is the equivalent of the expression o.func() (i.e.  (??(?))
	--
	-p
	}}}
Lazy parameters are (actually)
{{{
    delegates
	--
	-p
	}}}
The lazy parameter is not a string but
{{{
    a delegate that returns a string.
    The delegate is called to get its return value.
	--
	-p
	}}}
    ----

    ----
When a function needs a variable number of lazy parameters, it is necessarily impossible to specify those unknown number of parameters as lazy.
{{{
    The solution is to use variadic delegate parameters. Such parameters can receive any number of expressions that are the same as the return type of those delegates.
	--
	-p
	}}}
'We will see later in the More Templates chapter how to take advantage of tuple template parameters to remove that limitation.'
{{{
	--
	-p
	}}}
toString() with a delegate parameter
{{{
	--
	-p
	}}}
'However, although a total of 10 strings get constructed, only the very last one is printed to the output:'
{{{
    However practical, this method may degrade the performance of the program because of the many string objects that are constructed and promptly thrown away.
      ..
      ..
    All the programmer needs to do differently is to call std.format.formattedWrite instead of std.string.format and pass the delegate parameter as its first parameter (in UFCS below).
	--
	-p
	}}}
The function keyword is for
{{{
    defining function pointers to be called later just like a function.
	--
	-p
	}}}
_____ can be used in places of function pointers and delegates in expressions.
{{{
    Anonymous functions and anonymous delegates (lambdas)
	--
	-p
	}}}
There are several syntaxes for lambdas, the shortest of which is for when the equivalent consists only of **
{{{
    a single return statement: parameter => expression.
	--
	-p
	}}}
    ----

 foreach with Structs and Classes (?/*)

    ----
For library types, foreach behaves **
{{{
    in a way that is specific to that type; e.g. for File, it provides the lines of a file.
	--
	-p
	}}}
It is possible to define the behavior of foreach for user-defined types as well. *
{{{
    Defining range member functions, which allows using the user-defined type with other range algorithms as well
    Defining one or more opApply member functions
	--
	-p
	}}}
foreach support by range member functions
{{{
    User-defined types that need to support foreach can provide three member functions that correspond to the three sections of the previous code:
    determining whether the loop is over, skipping the front element, and providing access to the front element.
	--
	-p
	}}}
+Ex: 'Let's define a struct that produces numbers within a certain range.'
{{{
	--
	-p
	}}}
to iterate in reverse *
{{{
    use std.range.retro
	--
	-p
	}}}
module (that) contains many range algorithms.
{{{
    std.range
	--
	-p
	}}}
for retro to consider those functions at all, there must be one more function defined:
{{{
    .save() must return a copy of this object
	--
	-p
	}}}
'The variables may be defined without the ref keyword as well but '
{{{
    doing that would prevent iterating over the elements by reference.)
	--
	-p
	}}}
ex: 'The following is a definition of NumberRange that is implemented according to that convention:'
{{{
	--
	-p
	}}}
The convenient loop counter of slices is not automatic for other types.
{{{
    Loop counter can be achieved for user-defined types in different ways depending on whether the foreach support is provided by range member functions or by opApply overloads.
       ( std.range.enumerate )
	--
	-p
	}}}
enumerate is *
{{{
    a range that produces consecutive numbers starting by default from 0.
    enumerate pairs each number with the elements of the range that it is applied on.
	--
	-p
	}}}
    ----

Nested Functions, Structs, and Classes (??)

    ----
'For example, nestedFunc(), NestedStruct, and NestedClass are not accessible from main(): '
{{{
    (+closures?)
	--
	-p
	}}}
Although their names cannot be accessed, nested definitions can still be used in other scopes. (??) **(*) +SEE MORE (**)
{{{
    For example, many Phobos algorithms handle their tasks by nested structs that are defined inside Phobos functions. **
      To see an example of this, let's design a function that consumes a slice from both ends in alternating order:
    Note: Because their names cannot be mentioned outside of their scopes, such types are called Voldemort types due to analogy to a Harry Potter character. (!!) **
      .
      .
    Note that the nested struct that alternatingEnds() returns does not have any member variables. (!!)
      ( = uses an automatically created closure )
	--
	-p
	}}}
___ when a closure is not needed: ___ removes the context pointer from nested definitions, making them equivalents of their module counterparts  (= makes them not take up extra resources) (**)
{{{
    The static keyword removes the context pointer from nested definitions,
      + As a result, static nested definitions cannot access their outer contexts:
	--
	-p
	}}}
The context pointer of a nested class object is available as **
{{{
    a void* through its .outer property.
	--
	-p
	}}}
When a class is nested inside another one, the context that the nested object is associated with is
{{{
    the outer object itself.
	--
	-p
	}}}
Such nested classes(= inside other classes) are constructed by the ____ syntax. *
{{{
    this.new
	--
	-p
	}}}
When necessary, the outer object of a nested object can be accessed by
{{{
    this.outer
	--
	-p
	}}}
'Instead of this.new and this.outer, .new and .outer can be used on existing objects as well:'
{{{
     ??
	--
	-p
	}}}
    ----

    ----
Unions, a low-level feature inherited from the C programming language, allow
{{{
    more than one member to share the same memory area.
      similar to structs, but:
    - defined by the union keyword.
    - members of a union are not independent; they share the same memory area.
    Just like structs, unions can have member functions as well.
	--
	-p
	}}}
The purpose of a union is to
{{{
    use the same area for different type of data at different times.
    (Only one of the members can be used reliably at one time.)
      .
      .
    However, although doing so may not be portable to different platforms, union members can be used for accessing fragments of other members.
	--
	-p
	}}}
'Depending on the endianness '
{{{
	--
	-p
	}}}
Anonymous unions specify (??)
{{{
    what members of a user-defined type share the same area:
	--
	-p
	}}}
Unions =tips and use cases **
{{{
    Unions can be used for accessing individual bytes of variables of other types.
    For example, they make it easy to access the 4 bytes of an IPv4 address individually.
	--
	-p
	}}}
___ is useful in dealing with endianness issues.
{{{
    bswap from the core.bitop module
    bswap returns its parameter after swapping its bytes.
    (+Also taking advantage of the endian value from the std.system module, ...)
      (+Ex.)
	--
	-p
	}}}
(TCP/IP: Usually, it is a field in the header of the packet that determines the meanings of successive bytes.) *
{{{
    Unions can be used for representing such protocol packets.
	--
	-p
	}}}
Discriminated union
{{{
    Discriminated union is a data structure that brings type safety over a regular union.
        (+ex: 'This is just an example. You should consider using Algebraic and Variant from the std.variant module in your programs.')
	--
	-p
	}}}
('For that reason, it is possible to have an array of Discriminated objects, effectively enabling a collection where elements can be of different types.') (??)
{{{
	--
	-p
	}}}
    ----

    ----
Labels are
{{{
    names given to lines of code in order to direct program flow to those lines later on.
	--
	-p
	}}}
A label consists of
{{{
    a name and the : character:
      end:
	--
	-p
	}}}
goto *
{{{
    goto directs program flow to the specified label:
	--
	-p
	}}}
However, there are two acceptable uses of goto in C, none of which is necessary in D.
{{{
    going to the finalization area where the cleanup operations of a function are performed
    continue and break for outer loops (+outer switch statements)
	--
	-p
	}}}
This use of goto is not needed in D because
{{{
    D has loop labels,
	--
	-p
	}}}
(The problem of skipping constructors
{{{
	--
	-p
	}}}
Loops can have labels and goto statements can refer to those labels: **
{{{
    outerLoop:
        continue outerLoop;
        break outerLoop;
    switch statements can have labels as well.
	--
	-p
	}}}
'We have already seen the use of goto in case sections in the switch and case chapter:'
{{{
    goto case causes the execution to continue to the next case.
    goto default causes the execution to continue to the default section.
    goto case expression causes the execution to continue to the case that matches that expression.
	--
	-p
	}}}
    ----

Tuples *  (=SEE MORE)

    ----
Tuples are for
{{{
    combining multiple values to be used as a single object.
    They are implemented as a library feature by the Tuple template from the std.typecons module.
	--
	-p
	}}}
Tuple makes use of ____ for some of its operations.
{{{
    AliasSeq from the std.meta module
	--
	-p
	}}}
Tuples are usually constructed by **
{{{
    the convenience function tuple()
    auto t = tuple(42, "hello");
      .
    (+output of the first example prog:)
    Tuple!(int, string)(42, "hello")
	--
	-p
	}}}
The members of a tuple are normally accessed by
{{{
    their index values.
    writeln(t[0]);
	--
	-p
	}}}
It is possible to access the members by properties if
{{{
    the tuple is constructed directly by the Tuple template instead of the tuple() function.
    auto t = Tuple!(int, "number", string, "message")(42, "hello");
      .
    ((The definition above allows accessing the members by .number and .message properties as well:)) (!!)
	--
	-p
	}}}
Expanding the members as a list of values
{{{
    can be used e.g.  as an argument list when calling a function.
    The members can be expanded either by the .expand property or by slicing:
    (import std.typecons;)
    foo(t.expand);
    foo(t[]);
    // The equivalent of bar(1, 3.3, '4'):
    bar(t[0], t[$-2..$]);
      .
    As long as the members are compatible to be elements of the same array, the expansion of a tuple can be used as the element values of an array literal as well:
	--
	-p
	}}}
'Because their values can be expanded, tuples can be used with the foreach statement as well:'
{{{
    = 'Compile-time foreach'
    It may be thought of being a loop that gets executed at run time.
     ...
    The foreach statement above is the equivalent of the following code:
    +'The reason for the unrolling is '
	--
	-p
	}}}
Returning multiple values from functions * **(*)
{{{
    Tuples can be a simple solution to the limitation of functions having to return a single value.
     - std.algorithm.findSplit
     - AliasSeq (= defined in the std.meta module ) (= See More (!!(**)) )
           [= for editing certain types of lists]
	--
	-p
	}}}
AliasSeq is especially useful with *
{{{
    variadic templates,
	--
	-p
	}}}
AliasSeq consisting of values **(*)
{{{
    Let's imagine a function that takes three parameters:
    +AliasSeq can combine those arguments as a single entity and can automatically be expanded when calling functions: **
	--
	-p
	}}}
((+ 'As we have seen above with Tuple, when the values are compatible to be elements of the same array, an AliasSeq can be used to initialize an array literal as well:'))
{{{
	--
	-p
	}}}
    ----

    ----
Indexing and slicing **
{{{
    Same with Tuple, the members of an AliasSeq can be accessed by indexes and slices:
	--
	-p
	}}}
AliasSeq consisting of types *
{{{
    An AliasSeq consisting of types can represent template arguments.
	--
	-p
	}}}
foreach with AliasSeq (*)
{{{
    Same with Tuple, the foreach statement operating on an AliasSeq is not a run time loop.
    Rather, it is the unrolling of the loop body for each member.
      (Ex: ='As a result, the foreach statement gets compiled as the equivalent of the code below:
	--
	-p
	}}}
the .tupleof represents **
{{{
    the members of a type or an object.
    When applied to a user-defined type, .tupleof provides access to the definitions of the members of that type:
      + '.tupleof can be applied to an object as well.'
      + 'The foreach variable member represents each member of the object:
      (*+ 'Here, an important point to make is that the tuple that .tupleof returns consists of the members of the object themselves, not their copies.
	--
	-p
	}}}
Tuples (= quick summary) **
{{{
    tuple() combines different types of values similar to a struct object.
    Explicit use of Tuple allows accessing the members by properties.
    The members can be expanded as a value list by .expand or by slicing.
     ...
     ...
    Tuples support indexing and slicing.
    .tupleof provides information about the members of types and objects.
	--
	-p
	}}}
    ----

More Templates (**!) 
  +perhaps TODO: Take (Ref)Example|Summary ==As Koan-example (= to ponder and fix the structure of Templates) ****

    ----
rep: 'We have seen the power and convenience of templates in the Templates chapter.
{{{
    A single templated definition of an algorithm or a data structure is sufficient to use that definition for multiple types.
	--
	-p
	}}}
full plus shortcut syntax for templates **
{{{
    Although most templates are defined by the shortcut syntax(!!), the compiler always uses the full syntax.
	--
	-p
	}}}
The full syntax that is arrived at after those steps(= but compiler fully expands a template definition) is called **(!)
{{{
    an eponymous template,
    (+which the programmer can define explicitly as well.)

	--
	-p
	}}}
Template name space (??)
{{{
    It is possible to have more than one definition inside a template block.
      = 'The following template contains both a function and a struct definition:
      = 'Instantiating the template for a specific type instantiates all of the definitions inside the block.
    A specific instantiation of a template introduces a name space.  The definitions that are inside an instantiation can be used by that name.
     However, if these names are too long, it is always possible to use aliases as we have seen in the alias chapter:
	--
	-p
	}}}
note: (actually,) each shortcut template syntax is **(*)
{{{
    the shortcut of an eponymous template.
	--
	-p
	}}}
Eponymous templates are template blocks that
{{{
    contain a definition that has the same name as that block.
	--
	-p
	}}}
'As an example, assume that a program needs to qualify types that are larger than 20 bytes as too large. **
{{{
    Such a qualification can be achieved by a constant bool value inside a template block:
      (+Ex:  
     .. ..
     .. ..
    + 'This eponymous template is used by the shortcut syntax instead of the whole isTooLarge!int.isTooLarge: **(*)
    writeln(isTooLarge!int);
      vs
    isTooLarge!int.isTooLarge
     --
    + can later be used with:
    enum isTooLarge(T) = T.sizeof > 20;
	--
	-p
	}}}
A common use of eponymous templates is * **
{{{
    defining type aliases depending on certain conditions. For example, the following eponymous template picks the larger of two types by setting an alias to it:
      (+ see Ex. )
    --
    Such templates are especially useful in other templates where the two types are template parameters themselves (or depend on template parameters):
	--
	-p
	}}}
(Since long is larger than int
{{{
    (8 bytes versus 4 bytes),
      (= see more
	--
	-p
	}}}
    ----

    ----
struct and class member functions can be templates as well.
{{{
    'For example, the following put() member function template would work with any parameter type as long as that type is compatible with the operations inside the template
	--
	-p
	}}}
However, ...  (templates) cannot be virtual functions *
{{{
    + 'the abstract keyword cannot be used either.)
      (= see more)
    (( 'For example, although the presence of the put() template in the following subclass may give the impression that it is overriding a function, it actually hides the put name of the superclass (see name hiding in the alias chapter):
	--
	-p
	}}}
Union templates (?)
{{{
    = similar to struct templates.
    (+ The shortcut syntax is available for them as well.
     --
    Example= let's design a more general version of the IpAdress union that we saw in the Unions chapter.
      ..
    The bytes array provided easy access to the four segments of the IPv4 address.
      .
    The same concept can be implemented in a more general way as the following union template:
      .
    union SegmentedValue(ActualT, SegmentT) {
        ActualT value;
        SegmentT[/* number of segments */] segments;
    }
	--
	-p
	}}}
ex. 2 (*)  The following eponymous template takes advantage of the .sizeof properties of the two types to calculate the number of segments needed:
{{{
    enum segmentCount(ActualT, SegmentT) = ((ActualT.sizeof + (SegmentT.sizeof - 1))
         / SegmentT.sizeof);
      .
    union SegmentedValue(ActualT, SegmentT) {
        ActualT value;
        SegmentT[segmentCount!(ActualT, SegmentT)] segments;
    }
	--
    To demonstrate the flexibility of this template, let's imagine that it is required to access the parts of the IPv4 address as two ushort values.
      .
    auto address = SegmentedValue!(uint, ushort)(0xc0a80102);
	--
	-p
	}}}
Interface templates
{{{
    provide flexibility on the types that are used on an interface (as well as values such as sizes of fixed-length arrays and other features of an interface).
      = 'Let's define an interface for colored objects where the type of the color is determined by a template parameter:
      (= 'A class that represents a frame on a web page may choose to use a color type that is represented by its red, green, and blue components:
       but, ... (= other classes)
    (= since  "every template instantiation yields a distinct type".
	--
	-p
	}}}
The template parameters that we have seen so far have all been type parameters. (!)
{{{
    There are other kinds of template parameters:
       value
       this
       alias
       tuple.
     ..
	--
	-p
	}}}
1: Value template parameters *(*)
{{{
    To see the advantage of value template parameters, let's start with a set of structs representing geometric shapes:
    Let's assume that other member variables and member functions of those types are exactly the same and that the only difference is the value that determines the number of corners.
    struct Polygon(size_t N) {
        Point[N] corners;
    // ...
    }
      .
    auto centagon = Polygon!100();
      .
    The following example uses a string template parameter to represent an XML tag to produce a simple XML output:
    + 'The XML elements that a program needs can be defined as aliases as in the following code:
    Value template parameters can have default values as well. **
	--
	-p
	}}}
'We have seen in the Variable Number of Parameters chapter how special keywords work differently depending on whether they appear inside code or as default function arguments. (??)
{{{
    'Similarly, when used as default template arguments, the special keywords refer to where the template is instantiated at, not where the keywords appear:
    = Although the special keywords appear in the definition of the template, their values refer to main(), where the template is instantiated at:
	--
	-p
	}}}
2: this template parameters for member functions
{{{
    Member functions can be templates as well.
    However, unlike other templates, member function template parameters can also be this parameters. In that case, the identifier that comes after the this keyword represents the exact type of the this reference of the object.
    (= this reference means the object itself, as is commonly written in constructors as this.member = value.)
    --
    this template parameters can appear on member function templates of non-templated types as well.
	--
	-p
	}}}
    ----

    ----
this template parameters can be useful in ____ as well **(*!)
{{{
    template mixins
	--
	-p
	}}}
3: alias template parameters **
{{{
    alias template parameters can correspond to any symbol or expression that is used in the program.
    filter() and map() use alias template parameters to determine the operations that they execute.
      .
    'Let's see a simple example on a struct template that is for modifying an existing variable.
    (('Let's now have an alias parameter that represents a callable entity, similar to filter() and map():
    [[As long as it matches the way it is used in the template, any symbol can be used as an alias parameter. **
        (((One way of dealing with this issue is to use template constraints, which we will see below.
	--
	-p
	}}}
alias parameters can be specialized as well. However, they have a different specialization syntax.
{{{
    = see more (!!)
	--
	-p
	}}}
4: Tuple template parameters *
{{{
    We have seen in the Variable Number of Parameters chapter that variadic functions can take any number and any type of parameters.
    Templates can be variadic as well.
    A template parameter that consists of a name followed by ... allows any number and kind of parameters at that parameter's position.
    Such parameters appear as a tuple inside the template, which can be used like an AliasSeq.
      .
    Let's see an example of this with a template that simply prints information about every template argument that it is instantiated with:
      .
    void info(T...)(T args) {
        // ...
    }
      .
    Note that instead of obtaining the type of each argument by typeof(arg), we could have used T[i] as well.
	--
	-p
	}}}
We know that template arguments can be deduced for function templates.  However, it is also possible to specify template parameters explicitly. *
{{{
    to!string(42);
    When template parameters are explicitly specified, they can be a mixture of value, type, and other kinds.
      ..
    That is achieved by treating the arguments as an AliasSeq.
      .
    Let's see an example of this in a function template that produces struct definitions as source code in text form.
	--
	-p
	}}}
'Note: Functions that produce source code are used with the mixin keyword,
{{{
    see later chapter
	--
	-p
	}}}
'In some cases, the generic nature of templates makes it difficult to know or spell out certain types in the template code.
{{{
    'The following three special typeof varieties are useful in such cases.
        typeof(this)
        typeof(super)
        typeof(return)
           .
        typeof(return)
      .
    For example, instead of defining the calculate() function above as an auto function, we can be more explicit by replacing auto with LargerOf!(A, B) in its definition.
	--
	-p
	}}}
Template specializations (!!)
{{{
    void foo(int value)() {
        // ... general definition ...
    }
      .
    void foo(int value : 0)() {
        // ... special definition for zero ...
    }
	--
	-p
	}}}
    ----

    ----
Meta programming ***(*)
{{{
    A template is indeed code that generates code.
    Writing code that generates code is called meta programming.
	--
	-p
	}}}
Due to templates being compile-time features, some operations that are normally executed at runtime can be moved to compile time as template instantiations. (Note: ____ is another feature that achieves the same goal.
{{{
    Compile time function execution (CTFE)
      (= a whole later chapter)
	--
	-p
	}}}
te: Executing templates at compile time is commonly based on
{{{
    recursive template instantiations.
    = 'That is an iterative implementation of the function.
      The same function can be implemented by recursion as well:
      .
    int sum(int last) {
        return (last == 0
                ? last
                : last + sum(last - 1));
    }
	--
	-p
	}}}
Functions are normally run-time features. As usual, sum() can be executed at run time: When the result is needed at compile time, one way of achieving the same calculation is by defining a
{{{
    function template.
	--
	-p
	}}}
In meta programming, recursion is terminated by **(*)
{{{
    a template specialization.
      ...
      .
    // The special definition for zero
    int sum(int last : 0)() {
        return 0;
    }
    (+ advantages of running at compile time)
    Although the value 10 is still calculated as the result of 4+3+2+1+0, the entire calculation happens at compile time.
	--
	-p
	}}}
About meta programming in D (*****!!)
{{{
    CTFE obviates some of the idioms of meta programming in D.
	--
	-p
	}}}
'Compile-time polymorphism
{{{
    Since working with any type is inherent to templates, they can be seen as providing a kind of polymorphism as well.
    Being a compile-time feature, the polymorphism that templates provide is called compile-time polymorphism.
	--
	-p
	}}}
(Conversely, OOP's polymorphism is called
{{{
    run-time polymorphism.
	--
	-p
	}}}
(('For example, if useSoundEmittingObject() were implemented as a function template instead of a function, it could be used with any type that supported the object.emitSound() call:
{{{
    see more
	--
	-p
	}}}
Compile-time polymorphism is also known as
{{{
    duck typing, a humorous term, emphasizing behavior over actual type.
	--
	-p
	}}}
    ----

    ----
Code bloat
{{{
    The code generated by the compiler is different for every different argument of a type parameter, of a value parameter, etc.
     ..
    Although this is not a problem in most programs, it is an effect of templates that must be known.
	--
	-p
	}}}
Since both code bloat and run-time polymorphism have effects on program performance,
{{{
    it cannot be known beforehand whether run-time polymorphism or compile-time polymorphism would be a better approach for a specific program.
	--
	-p
	}}}
Template constraints (??)
{{{
    If a template argument is not compatible with a particular template, the incompatibility is necessarily detected during the compilation of the template code for that argument.
    As a result, the compilation error points at a line inside the template implementation
      ...
    Although arguably the error is with the code that uses the template with an incompatible type, the compilation error points at a line inside the template:
    'An undesired consequence is that when the template is a part of a third-party library module, the compilation error would appear to be a problem with the library itself.
    ''Note that this issue does not exist for interfaces: A function that takes an interface can only be called with a type that implements that interface.
	--
	-p
	}}}
Template contraints are for **
{{{
    disallowing incorrect instantiations of templates.
    They are defined as logical expressions of an if condition right before the template body: **(*)
      .
    void foo(T)()
            if (/* ... constraints ... */) {
        // ...
    }
      .
      .
    The is expression that we saw in the is Expression chapter is commonly used in template constraints.
	--
	-p
	}}}
((Sometimes the single parameter of a template needs to be one of type, value, or alias kinds. *
{{{
    That can be achieved by a tuple parameter of length one:
    ((note:  Some of the templates of the std.traits module take advantage of this idiom.
	--
	-p
	}}}
'Sometimes the constraints are complex, making it hard to understand the requirements of template parameters.
{{{
    This complexity can be handled by an idiom that effectively gives names to constraints.
    This idiom combines four features of D: anonymous functions, typeof, the is expression, and eponymous templates.
      (('Let's see this on a function template that has a type parameter.
    ('For now, accept the whole construct of is (typeof(object.prepare())) to mean whether the type supports the .prepare() call.
    Although such constraints achieve the desired goal, sometimes they are too complex to be readable. Instead, it is possible to give a more descriptive name to the whole constraint:
      .
    void use(T)(T object)
            if (canFlyAndLand!T) {
        // ...
    }
	--
	-p
	}}}
    ----

    ----
empty parentheses at the end of an anonymous function ***(**)
{{{
    = normally execute that function.
	--
	-p
	}}}
''An important fact about typeof is that it never executes the expression. (!)
{{{
    Rather, it produces the type of the expression if that expression would be executed:
	--
	-p
	}}}
''In the end, use() gains a more descriptive constraint:
{{{
    void use(T)(T object)
            if (canFlyAndLand!T) {
        // ...
    }
	--
	-p
	}}}
Using templates in multi-dimensional operator overloading (??) (??) (??) [=SEE MORE]
{{{
    ''We have seen in the Operator Overloading chapter that opDollar, opIndex, and opSlice are for element indexing and slicing.  (+  =????)
    Those operator functions have templated versions as well, which have different responsibilities from the non-templated ones above. (!!!!)
	--
	-p
	}}}
[Multi-dimensional operator overloading example
{{{
    The following Matrix example demonstrates how these operators can be overloaded for a two-dimensional type.
      (Note:  can be implemented in more efficient ways)
    ((+ some mixin examples))
    mixin ("auto result = " ~ expression ~ ";");
      .
    execute!("m[1, 1] = 42")(m);
	--
	-p
	}}}
te: Specifying ____ is sufficient to make function, struct, and class definitions templates. *
{{{
    template parameter lists
	--
	-p
	}}}
Template arguments can be specified explicitly after *
{{{
    an exclamation mark.
	--
	-p
	}}}
Template constraints limit the uses of templates for specific template arguments. They help **
{{{
    move compilation errors from the implementations of templates to where the templates are actually used incorrectly.
	--
	-p
	}}}
    ----

    ----
Return type attributes (??) *
{{{
    = Functions can be marked as auto, ref, inout, and auto ref.  These attributes are about return types of functions.
	--
	-p
	}}}
auto functions
{{{
    = The return types of auto functions need not be specified:
	--
	-p
	}}}
te: common type *
{{{
    For example, because the common type of int and double is double, the return type of the following auto function is double as well:
	--
	-p
	}}}
ref functions (!)
{{{
    Normally, the expression that is returned from a function is copied to the caller's context. ref specifies that the expression should be returned by-reference instead
	--
	-p
	}}}
Local reference requires a pointer:
{{{
    see more
	--
	-p
	}}}
It is not possible to return a reference to a local variable:
{{{
    see more
	--
	-p
	}}}
auto ref functions (!)
{{{
    see more
    auto ref helps with functions like parenthesized() above.
	--
	-p
	}}}
____ determines whether the function returns a copy or a reference. (??)
{{{
    the very first return statement of the function
	--
	-p
	}}}
auto ref is more useful in ____
{{{
    function templates where template parameters may be references or copies depending on context.
	--
	-p
	}}}
    ----

    ----
inout functions (**)
{{{
    The inout keyword appears for parameter and return types of functions. It works like a template for const, immutable, and mutable. (??)
      (+Ex. 
      ...
    (One solution for this usability issue is to overload the function for const and mutable strings:)
    Another solution would be to define the function as a template:
      .
    T parenthesized(T)(T phrase) {
        return '(' ~ phrase ~ ')';
    }
      (++ not ideal either)
    inout is very similar to the template solution.
      ( sort of can shift between immutable and const as needed )
	--
	-p
	}}}
Behavioral attributes *
{{{
    pure, nothrow, and @nogc are about function behaviors.
	--
	-p
	}}}
pure functions *
{{{
    In D, a function that does not access mutable global or static state is pure. (Since input and output streams are considered as mutable global state, pure functions cannot perform input or output operations either.)
    In other words, a function is pure if it produces its return value and side effects only by accessing its parameters, local variables, and immutable global state. (??)
	--
	-p
	}}}
An important aspect of purity in D is that pure functions can mutate *
{{{
    their parameters.
      .
    Additionally, the following operations that mutate the global state of the program are explicitly allowed in pure functions:
     - Allocate memory with the new expression
     - Terminate the program
     - Access the floating point processing flags
     - Throw exceptions
    'The following program demonstrates some of the operations that a pure function can and cannot perform:
	--
	-p
	}}}
'Further,
{{{
    since the function cannot access any mutable global state, the return value would be the same for a given set of arguments, regardless of when and how many times the function is called during the execution of the program.
    This fact gives both the compiler and the programmer optimization opportunities.
      .
    For example, instead of calling the function a second time for a given set of arguments, its return value from the first call can be cached and used instead of actually calling the function again.
	--
	-p
	}}}
'For that reason, the purity of a template is inferred by the compiler from the generated code.
{{{
    = 'Since the exact code that gets generated for a template instantiation depends on the actual template arguments, whether the generated code is pure depends on the arguments as well.
	--
	-p
	}}}
'since the following function template would be impure when N is zero,
{{{
    see more
	--
	-p
	}}}
'For that reason, the purity rules are relaxed for code that is marked as debug:
{{{
	--
	-p
	}}}
+ Member functions / Subclasses as pure *
{{{
	--
	-p
	}}}
Delegates and anonymous functions
{{{
    can be pure as well.
	--
	-p
	}}}
tip: One benefit of pure functions is **
{{{
    that their return values can be used to initialize immutable variables
	--
	-p
	}}}
    ----

    ----
nothrow functions *
{{{
    Sometimes it is more important to know that a function does not emit any exception at all.
    For example, some algorithms can take advantage of the fact that certain of their steps cannot be interrupted by an exception.
      .
    The following implementation of add() is nothrow because it is obvious to the compiler that the try-catch block prevents any exception from escaping the function:
	--
	-p
	}}}
@nogc functions
{{{
    Some commonly used D operations take advantage of the GC as well. For example, elements of arrays live on dynamic memory blocks:
    If the slice does not have sufficient capacity, the ~= operator above allocates a new memory block from the GC.
    void foo() @nogc {
        // ...
    }
	--
	-p
	}}}
Code safety attributes
{{{
    @safe, @trusted, and @system are about the code safety that a function provides.
	--
	-p
	}}}
@safe functions
{{{
    A class of programming errors involve corrupting data at unrelated locations in memory by writing at those locations unintentionally.
     - Pointers cannot be converted to other pointer types other than void*.
     - A non-pointer expression cannot be converted to a pointer value.
     - Pointer values cannot be changed (no pointer arithmetic; however, assigning a pointer to another pointer of the same type is safe).
     - Unions that have pointer or reference members cannot be used.
     - Functions marked as @system cannot be called.
     - Exceptions that are not descended from Exception cannot be caught.
     - Inline assembler cannot be used.
     - Mutable variables cannot be cast to immutable.
     - immutable variables cannot be cast to mutable.
     - Thread-local variables cannot be cast to shared.
     - shared variables cannot be cast to thread-local.
     - Addresses of function-local variables cannot be taken.
     - __gshared variables cannot be accessed.
	--
	-p
	}}}
@trusted functions
{{{
    Some functions may actually be safe but cannot be marked as @safe for various reasons. For example, a function may have to call a library written in C, where no language support exists for safety in that language.
    Some other functions may actually perform operations that are not allowed in @safe code, but may be well tested and trusted to be correct.
	--
	-p
	}}}
@system functions
{{{
    Any function that is not marked as @safe or @trusted is considered @system, which is the default safety attribute.
	--
	-p
	}}}
D has CTFE, which allows any function to be executed at compile time as long as it is possible to do so. **
{{{
    Compile time function execution (CTFE)
      .
    'Let's consider the following program that prints a menu to the output:
      (= the Drinks-machine (**!))
	--
	-p
	}}}
+TABLE/SUMMARY **
{{{
     = for the functions attributes (??/*)
	--
	-p
	}}}
    ----

Mixins (*!)

    ----
Mixins are for **(*) **
{{{
    mixing in generated code into the source code.
    The mixed-in code may be generated as a template instance or a string.
    + Code can be inserted into the program as a string import as well.
	--
	-p
	}}}
Template mixins
{{{
    Templates can generate functions, structs, unions, classes, interfaces, and any other legal D code.
      .
    mixin a_template!(template_parameters)
	--
	-p
	}}}
The instantiation of the template for the specific set of template parameters is inserted into the source code (=where?)
{{{
    right where the mixin keyword appears.
    'For example, let's have a template that defines both an array of edges and a pair of functions that operate on those edges:
      ...
    mixin EdgeArrayFeature!(int, 2);
      eg.
      .
    struct Line {
         mixin EdgeArrayFeature!(int, 2);
    }
	--
	-p
	}}}
Template mixins must use local imports (??) *
{{{
    = 'Those modules may not be available at the mixin site.
      .
    = 'For that reason, the modules that template mixins use must be imported in local scopes:
	--
	-p
	}}}
Sometimes a mixin may need to identify the actual type that is mixing it in. (!)
{{{
    That information is available through this template parameters as we have seen in the More Templates chapter: (??)
	--
	-p
	}}}
String mixins **
{{{
    Another powerful feature of D is being able to insert code as string as long as that string is known at compile time.
    The syntax of string mixins requires the use of parentheses:
      .
    mixin (compile_time_generated_string)
	--
	-p
	}}}
'For example, the hello world program can be written with a mixin as well:
{{{
    void main() {
        mixin (`writeln("Hello, World!");`);
    }
      .
    mixin (
    `import std.stdio; void main() { writeln("Hello, World!"); }`
    );
	--
	-p
	}}}
The power of string mixins comes from the fact that ** (!!)
{{{
    the code can be generated at compile time.
    The following example takes advantage of CTFE to generate statements at compile time:
      (+ SEE THE EXAMPLE(!))
    .
    Note that the "writeln" expressions are not executed inside printStatement().
    Rather, printStatement() generates code that includes writeln() expressions that are executed inside main().
	--
	-p
	}}}
Multiple mixin arguments *
{{{
    As long as they are all known at compile time, mixin can take multiple arguments and automatically concatenates their string representations:
    mixin ("const a = ", int.sizeof, ";");
      .
    This can be more convenient compared to using e.g. a format expression:
      ..
	--
	-p
	}}}
    ----

    ----
Debugging string mixins * **
{{{
    To help with debugging string mixins, there is the dmd compiler switch -mixin, which writes all mixed-in code to a specified file.
        Another option for debugging string mixins is pragma(msg), which would print the generated code during compilation.
        (but not as practical)
	--
	-p
	}}}
'Mixin name spaces'
{{{
    'It is possible to avoid and resolve name ambiguities in template mixins.
	--
	-p
	}}}
-To prevent this, it is possible to assign name space identifiers for template mixins and refer to contained names by those identifiers:
{{{
	--
	-p
	}}}
String mixins in operator overloading
{{{
    In fact, the reason why most operator member functions are defined as templates is to make the operators available as string values so that they can be used for code generation.
	--
	-p
	}}}
Mixed in destructors (??)
{{{
    ''This feature allows mixing in different resources to a type, each introducing its own cleanup code.
	--
	-p
	}}}
Importing text files *
{{{
    It is possible to insert contents of text files into code at compile time.
	--
	-p
	}}}
Text file imports (a.k.a.
{{{
    string imports) require the -J compiler switch which tells the compiler where to find the text files.
	--
	-p
	}}}
'Let's consider the following function template that takes an array of numbers and returns another array that consists of the elements that satisfy a specific condition:
{{{
	--
	-p
	}}}
'So, the template must document what that name should be and the users must use that name.
{{{
    Phobos uses names consisting of single letters like a, b, n, etc.
	--
	-p
	}}}
    ----

Ranges (*)

    ----
Ranges emphasize how container elements are
{{{
    accessed, as opposed to how the containers are implemented.
	--
	-p
	}}}
Ranges are a very simple concept that is based on
{{{
    whether a type defines certain sets of member functions.
    (eg. like  foreach with Structs and Classes chapter: any type that provides the member functions empty, front, and popFront() can be used with the foreach loop.
	--
	-p
	}}}
the simplest of all the range types.
{{{
    InputRange
	--
	-p
	}}}
std.container module.
{{{
    special container types
    = beyond the  core features arrays and associative arrays
	--
	-p
	}}}
Every container is implemented as a specific data structure. (??)
{{{
    For example, associative arrays are a hash table implementation. *
	--
	-p
	}}}
(more about data structures)
{{{
    Every data structure stores its elements and provides access to them in ways that are special to that data structure.
      For example, in the array data structure the elements are stored side by side and accessed by an element index;
      in the linked list data structure the elements are stored in nodes and are accessed by going through those nodes one by one;
      in a sorted binary tree data structure, the nodes provide access to the preceding and successive elements through separate branches; etc.
	--
	-p
	}}}
In this chapter, I will use the terms container and ____ interchangeably.
{{{
    data structure
	--
	-p
	}}}
Algorithm (=
{{{
    (function)
    Processing of data structures for specific purposes in specific ways is called an algorithm.
      .
    For example, linear search is an algorithm that searches by iterating over a container from the beginning to the end;
    binary search is an algorithm that searches for an element by eliminating half of the candidates at every step; etc.
	--
	-p
	}}}
For most of the samples below, I will use ___ as the element type and ___ as the container type.
{{{
    int
    int[]
	--
	-p
	}}}
templated ranges, templated containers and algorithms. (??) *
{{{
    In reality, ranges are more powerful when used with templated containers and algorithms.
    In fact, most of the containers and algorithms that ranges tie together are all templates.
    I will leave examples of templated ranges to the next chapter.
	--
	-p
	}}}
    ----

    ----
one  successful (way) that abstracts algorithms and data structures from each other
{{{
    is the Standard Template Library (STL), which also appears as a part of the C++ standard library.
    STL provides this abstraction with the iterator concept, which is implemented by C++'s templates.
	--
	-p
	}}}
Although they are a very useful abstraction, iterators do have some weaknesses.
{{{
	--
	-p
	}}}
D's slices happen to be implementations of the most powerful range
{{{
    RandomAccessRange
      and there are many range features in Phobos.
	--
	-p
	}}}
It is essential to understand how ranges are used in Phobos.
{{{
    Many Phobos algorithms return temporary range objects.
    For example, filter(), which chooses elements that are greater than 10 in the following code,
      actually returns a range object, not an array:
      .
    int[] chosen = values.filter!(value => value > 10);
	--
	-p
	}}}
Traditional implementations of algorithms **
{{{
    In traditional implementations of algorithms, the algorithms know how the data structures that they operate on are implemented.
	--
	-p
	}}}
(Traditional implementations of algorithms
{{{
    In traditional implementations of algorithms, the algorithms know how the data structures that they operate on are implemented.
    As a demonstration of how traditional algorithms are tied to data structures, let's assume that the use of for is justified.
      .
    Having algorithms tied to data structures makes it necessary to write them specially for each type.
    For example, the functions find(), sort(), swap(), etc. must be written separately for array, linked list, associative array, binary tree, heap, etc.
	--
	-p
	}}}
Phobos ranges **
{{{
    = ranges for use with the standard algorithms and containers in Phobos (*)
     - InputRange: requires the empty, front and popFront() member functions
     - ForwardRange: additionally requires the save member function
     - BidirectionalRange: additionally requires the back and popBack() member functions
     - RandomAccessRange: additionally requires the [] operator (and another property depending on whether the range is finite or infinite)
      .
    OutputRange: requires support for the put(range, element) operation
	--
	-p
	}}}
Iterating by shortening the range (??)
{{{
    = 'Another way of iteration requires a different way of thinking: iteration can be achieved by shortening the range from the beginning.
      .
    Iteration is achieved by removing the first element by the slice = slice[1..$] expression.
        (BidirectionalRange and finite RandomAccessRange types can be shortened from the end as well.)
    + 'This is the method employed by most of the Phobos range functions: they return special range objects to be consumed in order to preserve the original containers.
	--
	-p
	}}}
InputRange
{{{
    + reimplementing the print function and the Student container
	--
	-p
	}}}
Note: As I have mentioned above, it is not normal to lose the original elements from the container just to iterate over them. We will address this issue below by introducing a special range type.
{{{
    = 'Similarly, some ranges do not own any elements but are used for providing access to elements of other ranges. (??)
	--
	-p
	}}}
    ----

    ----
'It would be better if the compilation error appeared on the line where print() is called.
{{{
    This is possible by adding a template constraint to print().
	--
	-p
	}}}
'The elements of a fixed-length array can still be accessed by range functions.
{{{
    What needs to be done is to use a slice of the whole array, not the array itself:
	--
	-p
	}}}
'When necessary, all of the elements can be copied one by one into an array.
{{{
    std.array.array is a helper function to simplify this task; array() iterates over InputRange ranges, copies the elements, and returns a new array:
	--
	-p
	}}}
UFCS goes very well with **
{{{
    range algorithms
    by making code naturally match the execution order of expressions.
	--
	-p
	}}}
Automatic decoding of strings as ranges of dchar (??)
{{{
    Being character arrays by definition, strings can also be used as ranges just by importing std.array.
    std.array provides a special functionality with all types of strings: Iterating over strings becomes iterating over Unicode code points, not over UTF code units.
        As a result, strings appear as ranges of Unicode characters.
	--
	-p
	}}}
'The reason why the characters are displayed correctly is because when used as ranges, string elements are automatically decoded.
{{{
    We have seen in those chapters that string is an alias to an array of immutable(char) and wstring is an alias to an array of immutable(wchar).
    Accordingly, one might expect to see UTF code units in the previous output instead of the properly decoded Unicode characters.
	--
	-p
	}}}
''Automatic decoding is not always the desired behavior. (??)
{{{
    For example, the following program that is trying to assign to the first element of a string cannot be compiled because the return value of .front is an rvalue:
	--
	-p
	}}}
When a range algorithm needs to modify the actual code units of a string (and when doing so does not invalidate the UTF encoding), then
{{{
    the string can be used as a range of ubyte elements by std.string.represention:
	--
	-p
	}}}
Ranges without actual elements (!!)
{{{
    'One of the powers of ranges is the flexibility of not actually owning elements. (??) **
	--
	-p
	}}}
In order to preserve the elements of the actual School objects, a special InputRange can be used.
{{{
     (+Ex. )
	--
	-p
	}}}
    ----

    ----
Another benefit of not storing elements as actual members is **
{{{
    the ability to create infinite ranges.
    Making an infinite range is as simple as having empty always return false.
    (Since it is constant, empty need not even be a function and can be defined as an enum value:
    (Another option is to use an immutable static member:
    An infinite range is useful when the range need not be consumed completely right away.
	--
	-p
	}}}
Functions that return ranges (??) (**)
{{{
    'In most cases, a convenience function that returns the object of such a range is used instead.
    ('This is a convenience over having to remember and spell out the names of range types explicitly, which can get quite complicated in practice.
    We can see an example of this with the simple std.range.take function.
	--
	-p
	}}}
(These types may sometimes be exposed in error messages, or we can print them ourselves with the help of typeof and stringof:
{{{
	--
	-p
	}}}
A great benefit of defining our types as ranges is *
{{{
    being able to use them not only with our own functions, but with Phobos and other libraries as well.
	--
	-p
	}}}
std.range includes a large number of
{{{
    range functions, structs, and classes.
	--
	-p
	}}}
std.algorithm includes many
{{{
    algorithms that are commonly found also in the standard libraries of other languages.
	--
	-p
	}}}
'To see an example of how our types can be used with standard modules, let's use School with the std.algorithm.swapFront algorithm.
{{{
	--
	-p
	}}}
As another example, let's now look at the std.algorithm.filter algorithm. **(*) **
{{{
    =SEE MORE
    filter() returns a special range that filters out elements that do not satisfy a specific condition (a predicate).
    There are a number of ways of specifying the predicate that filter() should use.
    school.studentsOf.filter!(a => a.number % 2)
      = select all odd numbers
    print(school.studentsOf.filter!(a => a.number % 2));  (= filter returns its own special range object)
    (+ example of using with a function)
	--
	-p
	}}}
____ makes it easy to present values returned from a function as the elements of an InputRange.module, *
{{{
    generate(), a convenience function template of the std.range module,
    (It takes any callable entity (function pointer, delegate, etc.) and returns an InputRange object conceptually consisting of the values that are returned from that callable entity.
	--
	-p
	}}}
    ----

    ----
Another benefit of functions' returning range objects is that,
{{{
    those objects can be used lazily.
    (Although FibonacciSeries is infinite, the output contains only the first 10 numbers:  **
	--
	-p
	}}}
( save()
{{{
	--
	-p
	}}}
An algorithm that works with ForwardRange is *
{{{
    std.range.cycle.
	--
	-p
	}}}
writeln(FibonacciSeries().take(5).cycle.take(20)); **(*)
{{{
    See More
	--
	-p
	}}}
Importing std.array automatically makes slices become BidirectionalRange ranges.
{{{
    ??(?)
    + 'A good BidirectionalRange example is the std.range.retro function.
      .
    writeln([ 1, 2, 3 ].retro);
	--
	-p
	}}}
((Let's define a range that behaves similarly to the special range that retro() returns. **(!!)
{{{
	--
	-p
	}}}
RandomAccessRange represents ranges that *
{{{
    allow accessing elements by the [] operator.
	--
	-p
	}}}
('Importing std.array module makes slices become RandomAccessRange ranges only if possible.
{{{
    ??(!)
    (For example, since UTF-8 and UTF-16 encodings do not allow accessing Unicode characters by an index, char and wchar arrays cannot be used as RandomAccessRange ranges of Unicode characters.
     (On the other hand, since the codes of the UTF-32 encoding correspond one-to-one to Unicode character codes, dchar arrays can be used as RandomAccessRange ranges of Unicode characters.
	--
	-p
	}}}
((However, computer science has an expectation on its algorithmic complexity: random access must take constant time. (!!)  + Constant time access means that the time spent when accessing an element is independent of the number of elements in the container.
{{{
	--
	-p
	}}}
    ----

    ----
Finite / Infinite RandomAccessRange
{{{
      .
      .
    As an example where opIndex() can operate at constant time, let's define an infinite range that consists of squares of integers.
	--
	-p
	}}}
'Being a RandomAccessRange (the most functional range), SquaresRange can also be used as other types of ranges. For example, as an InputRange when passing to filter():  (=Ex. (!!))
{{{
	--
	-p
	}}}
'The following are all of the requirements of a RandomAccessRange that is based on a finite BidirectionalRange:
{{{
	--
	-p
	}}}
make custom structs and types ready forthe ranges and algorithms libraries  (??) *
{{{
    make sure they support popfront and other relevant methods (**)
      (+ the chain()-like example)
	--
	-p
	}}}
std.range.chain
{{{
    chain() presents the elements of a number of separate ranges as if they are elements of a single larger range.
	--
	-p
	}}}
Alternatively, the length may be calculated with less code by taking advantage of *
{{{
    std.algorithm.fold.  fold() takes an operation as its template parameter and applies that operation to all elements of a range:
	--
	-p
	}}}
Tip: '(Note how slices is written before fold by taking advantage of UFCS.) (*)
{{{
	--
	-p
	}}}
OutputRange (??)
{{{
    OutputRange represents streamed element output, similar to sending characters to stdout.
	--
	-p
	}}}
I have mentioned earlier that OutputRange requires support for
{{{
    the put(range, element) operation. put() is a function defined in the std.range module.
    It determines the capabilities of the range and the element at compile time and uses the most appropriate method to output the element.
	--
	-p
	}}}
    ----

    ----
An algorithm in Phobos that uses OutputRange is
{{{
    std.algorithm.copy
	--
	-p
	}}}
Using slices as OutputRange (??) *
{{{
    The std.range module makes slices OutputRange objects as well.
    (By contrast, std.array makes them only input ranges.)
	--
	-p
	}}}
'To avoid this, a separate slice must be used as an OutputRange instead:
{{{
	--
	-p
	}}}
std.array.Appender and its convenience function appender allows using slices
{{{
	--
	-p
	}}}
(toString() with an OutputRange parameter
{{{
	--
	-p
	}}}
Range templates **
{{{
    Although we have used mostly int ranges in this chapter, ranges and range algorithms are much more useful when defined as templates.
	--
	-p
	}}}
UFCS works well with **(*) **
{{{
    range algorithms.
	--
	-p
	}}}
    ----

Ranges 2 (=templates) (*)

    ----
How ranges most often are implemented
{{{
    In practice, containers, algorithms, and ranges are almost always implemented as templates.
    The print() example in that chapter was a template as well:
    = 'What lacks from the implementation of print() is that even though it requires T to be a kind of InputRange, it does not formalize that requirement with a template constraint.
	--
	-p
	}}}
The std.range module contains templates that are useful both in
{{{
    template constraints and in static if statements
	--
	-p
	}}}
Range kind templates: The group of templates with names starting with is determine
{{{
    whether a type satisfies the requirements of a certain kind of range.
    For example, isInputRange!T answers the question "is T an InputRange?"
      isInputRange
      isForwardRange
      isBidirectionalRange
      isRandomAccessRange
      isOutputRange
    Accordingly, the template constraint of print() can use isInputRange:
    void print(T)(T range)
            if (isInputRange!T) {
        // ...
    }
	--
	-p
	}}}
For example, the following constraint is for requiring that the range must be an OutputRange that accepts double elements:
{{{
	--
	-p
	}}}
When used in conjunction with ____, these constraints can determine the capabilities of user-defined ranges as well.
{{{
    static if
        For example, when a dependent range of a user-defined range is a ForwardRange, the user-defined range can take advantage of that fact and can provide the save() function as well.
	--
	-p
	}}}
'As usual, the following is the convenience function that goes with that range:
{{{
	--
	-p
	}}}
'For that reason, when needed in a template, the actual UTF encoding type of a string range can be obtained by ElementEncodingType.
{{{
	--
	-p
	}}}
The std.range module has many more range templates that can be used with D's other compile-time features. The following is a sampling:
{{{
    isInfinite: Whether the range is infinite
    hasLength: Whether the range has a length property
    hasSlicing: Whether the range supports slicing i.e. with a[x..y]
    hasAssignableElements: Whether the return type of front is assignable
    hasSwappableElements: Whether the elements of the range are swappable e.g. with std.algorithm.swap
    hasMobileElements: Whether the elements of the range are movable e.g. with std.algorithm.move
    hasLvalueElements: Whether the
elements of the range are lvalues
(roughly meaning that the elements
 are not copies of actual elements
 nor are temporary objects that are
 created on the fly)
	--
	-p
	}}}
Run-time polymorphism with inputRangeObject() and outputRangeObject()
{{{
    Being implemented mostly as templates, ranges exhibit compile-time polymorphism, which we have been taking advantage of in the examples of this chapter and previous chapters.
	--
	-p
	}}}
Phobos helps with this issue by inputRangeObject() and outputRangeObject(). (??) *
{{{
    inputRangeObject() allows presenting ranges as a specific kind of range of specific types of elements. With its help, a range can be used e.g.  as an InputRange of int elements, regardless of the actual type of the range.
      .
    Because of that flexibility, the object that it returns cannot be defined by auto.
      .
    As another example, when the range needs to be used as a ForwardRange of int elements, its type must be specified explicitly as ForwardRange!int:
	--
	-p
	}}}
    ----

Static Foreach (*) (????) ((**))

    ----
What is static foreach? (*)
{{{
    compile-time foreach
    iterates the loop at compile time and unrolls each iteration as separate pieces of code.
      (+The Example (=????))
    auto t = tuple(42, "hello", 1.5);
      .
    foreach (i, member; t) {
        writefln("%s: %s", i, member);
    }
	--
	-p
	}}}
'Although being very powerful, some properties of compile-time foreach may not be suitable in some cases: (= the rationale for static forage)
{{{
    each unrolling of the loop introduces a scope.
        = Although this can be desirable in some cases, it makes it impossible for code unrolled for one iteration to use code from other iterations.
    Compile-time foreach works only with tuples (including template arguments in the form of AliasSeq).
    Like regular foreach, compile-time foreach can only be used inside functions. For example, it cannot be used at module scope or inside a user-defined type definition.
    With compile-time foreach, it may not be clear whether break and continue statements inside the loop body should affect the compile-time loop iteration itself or whether they should be parts of the unrolled code.
	--
	-p
	}}}
static foreach is a more powerful compile-time feature that provides more control: (+Examples(**))
{{{
    static foreach can work with any range of elements that can be computed at compile time (including number ranges like 1..10).
        static foreach (n; FibonacciSeries().take(10).filter!isEven) {
            writeln(n);
        }
    static foreach can be used at module scope.
     static foreach does not introduce a separate scope for each iteration.
	--
	-p
	}}}
break and continue statements inside a static foreach loop require *
{{{
    labels for clarity.
    =(!) The break statements that are under each case clause must mention the associated switch statements by labels:
	--
	-p
	}}}
    ----

Parallelism

    ----
define parallelism (=in D)
{{{
    Most modern microprocessors consist of more than one core, each of which can operate as an individual processing unit.
    The features of the std.parallelism module make it possible for programs to take advantage of all of the cores in order to run faster.
      .
      .
    parallel: Accesses the elements of a range in parallel.
    task: Creates tasks that are executed in parallel.
    asyncBuf: Iterates the elements of an InputRange semi-eagerly in parallel.
    map: Calls functions with the elements of an InputRange semi-eagerly in parallel.
     ...
     ...
       .
     ...
     ...
	--
	-p
	}}}
To simulate long-lasting operations, the following examples call
{{{
    Thread.sleep() from the core.thread module.
	--
	-p
	}}}
determine the number of cores that are available on the system **
{{{
    std.parallelism.totalCPUs:
      .
    void main() {
        writefln("There are %s cores on this system.", totalCPUs);
    }
	--
	-p
	}}}
taskPool.parallel() // parallel()  (= does what?)
{{{
    accesses the elements of a range in parallel.
	--
	-p
	}}}
An effective usage (= of parallel() ) **
{{{
    is with foreach loops.
      = Merely importing the std.parallelism module and replacing students with parallel(students) in the program above is sufficient to take advantage of all of the cores of the system: **
	--
	-p
	}}}
te: a thread *
{{{
    = a flow of execution through certain parts of a program
    (+ 'Programs can consist of multiple threads that are being actively executed at the same time.
	--
	-p
	}}}
It is the responsibility of the programmer to call parallel() only when the operations applied to each element are independent for each iteration. *
{{{
    For example, if it were important that the messages appear in a certain order in the output, calling parallel() should be considered an error in the program above.
	--
	-p
	}}}
The programming model that supports threads that depend on other threads is called
{{{
    concurrency
	--
	-p
	}}}
The work unit size determines *
{{{
    the number of elements that each thread should execute at each of its iterations:
      = 'The distribution of threads to cores has some minimal cost.  This cost may sometimes be significant especially when the operations of the loop are completed in a very short time.
      In such cases, it may be faster to have each thread execute more than one iteration of the loop.
      .
    foreach (student; parallel(students, 2)) {
      The default value of work unit size is 100 and is suitable for most cases.
	--
	-p
	}}}
    ----

    ----
Operations that are executed in parallel with other operations of a program are called *
{{{
    tasks
    Tasks are represented by the type std.parallelism.Task.
	--
	-p
	}}}
task()  executeInNewThread()  yieldForce()
{{{
    task() constructs, executeInNewThread() starts, and yieldForce() waits for a task object.
	--
	-p
	}}}
'It prints the first letter of id to indicate which task it is working for.
{{{
    The anOperation() function
	--
	-p
	}}}
Since write does not output a new-line character, in order to observe the parallel execution of the following program, ____ is called to send the contents of the buffer to stdout even before reaching the end of a line.
{{{
    stdout.flush()
	--
	-p
	}}}
'The task function above has been specified as a template parameter to task() as task!anOperation.
{{{
    Although this method works well in most cases, as we have seen in the Templates chapter, each different instantiation of a template is a different type.
    This distinction may be undesirable in certain situations where seemingly equivalent task objects would actually have different types.
	--
	-p
	}}}
'Another overload of task() takes the function as its first function parameter instead: (??) *
{{{
    = 'As this method does not involve different instantiations of the Task template, it makes it possible to put such objects in the same array:
      A lambda function or an object of a type that defines the opCall member can also be used as the task function.
	--
	-p
	}}}
'As tasks are executed on separate threads, the exceptions that they throw cannot be caught by the thread that started them. *
{{{
     ...
     ...
     ...
    yieldForce() can be called in a try-catch block to catch the exceptions that are thrown by the task.
    Note that this is different from single threads: In single-threaded programs like the samples that we have been writing until this chapter, try-catch wraps the code that may throw. In parallelism, it wraps yieldForce():
	--
	-p
	}}}
Member functions of Task (!)
{{{
    = done  etc)
    executeInNewThread(): Starts the task in a new thread.
    executeInNewThread(int priority):
	--
	-p
	}}}
There are three functions to wait for the completion of a task:
{{{
    yieldForce():
      spinForce():  (for short tasks)
      workForce():  (prefer starting new tasks)
    (+ see more)
	--
	-p
	}}}
asyncBuf()
{{{
        auto elements = taskPool.asyncBuf(range, buffer_size);
	--
	-p
	}}}
    ----

    ----
std.algorithm.map **
{{{
    calls a function with the elements of a range one-by-one and returns a range that consists of the results of calling that function with each element.
    It is a lazy algorithm: It calls the function as needed.
	--
	-p
	}}}
std.algorithm.each
{{{
    generating side effects for each element, as opposed to producing a result from it. =like w. map)
	--
	-p
	}}}
The fact that std.algorithm.map operates lazily is very powerful in many programs. However, if the function needs to be called with every element anyway and the operations on each element are independent from each other, laziness may be unnecessarily slower than parallel execution. **
{{{
    taskPool.map() and taskPool.amap() from the std.parallelism module take advantage of multiple cores and run faster in many cases. **
	--
	-p
	}}}
std.algorithm.map takes **
{{{
    takes the function as its template parameter, and the range as its function parameter.
    auto result_range = map!func(range);
    The function may be specified by the => syntax as a lambda expression as we have seen in earlier chapters.
      .
    auto results = map!(a => a.averageGrade)(students);
	--
	-p
	}}}
taskPool.map() from the std.parallelism module (= the semi-eager variant) *(*)
{{{
    taskPool.map!averageGrade(students, 3);
      (+ free-standing helper function (?))
	--
	-p
	}}}
Parallel amap() **
{{{
    like map(), but fully eager.
      auto results = taskPool.amap!averageGrade(students);
    + It consumes more memory to gain speed.
	--
	-p
	}}}
reduce() from the std.algorithm module * **
{{{
    reduce() is the equivalent of std.algorithm.fold, which we have seen before in the Ranges chapter.
    (+ 'I recommend that you prefer fold() for non-parallel code as it can take advantage of UFCS in chained range expressions.)
      .
    it takes one or more functions as template parameters.
      Assigns the initial value to result
      Executes the expression result = func(result, element) for every element
      Returns the final value of result
    --
    For example, the sum of the squares of the elements of an array can be calculated as in the following program:
    void main() {
        writeln(reduce!((a, b) => a + b * b)(0, [5, 10]));
    }
	--
	-p
	}}}
taskPool.reduce() from the std.parallelism module can be used for taking advantage of all of the cores. *
{{{
    writeln("Result: ", reduce!aCalculation(0, [1, 2, 3, 4]));
    writeln("Result: ", taskPool.reduce!aCalculation(0, [1, 2, 3, 4]));
    + 'taskPool.reduce() should be used only under these considerations.'  ( <-- )
    writeln("Result: ", taskPool.reduce!aCalculation(0, [1, 2, 3, 4]));
	--
	-p
	}}}
Multiple functions and tuple results *
{{{
    std.algorithm.map(), taskPool.map(), taskPool.amap(), and taskPool.reduce() can all take more than one function, in which case the results are returned as a Tuple.
      auto results = map!(quarterOf, tenTimes)(values);
	--
	-p
	}}}
taskPool.reduce()  w. sever. opeeations (*)
{{{
    In the case of taskPool.reduce(), the initial values of the results must be specified as a tuple:
    taskPool.reduce!(foo, bar)(tuple(0, 1), [1, 2, 3, 4]);
	--
	-p
	}}}
TaskPool container.
{{{
    Behind the scenes, the parallel algorithms from the std.parallelism module all use task objects that are elements of a TaskPool container.
	--
	-p
	}}}
map(), amap(), and reduce() can take multiple functions and **
{{{
    return the results as tuples.
	--
	-p
	}}}
    ----

Concurrency (??)

    ----
The following are the differences between parallelism and concurrency:
{{{
    The main purpose of parallelism is to take advantage of microprocessor cores to improve the performance of programs.  Concurrency on the other hand, is a concept that may be needed even on a single-core environment. Concurrency is about making a program run on more than one thread at a time.  An example of a concurrent program would be a server program that is responding to requests of more than one client at the same time
    Concurrency is easy only when it is based on
        message passing.
        (as opposed to 
         lock-based data sharing.)
	--
	-p
	}}}
Concurrency Message:
{{{
    Data that is passed between threads
    Messages may be composed of any type and any number of variables.
	--
	-p
	}}}
Owner and Workers threads
{{{
	--
	-p
	}}}
spawn()
{{{
    takes a function pointer as a parameter and starts a new thread from that function.
	--
	-p
	}}}
The main difference between a thread that is started with spawn() and a thread that is started with task() is the fact that spawn() makes it possible
{{{
    for threads to send messages to each other.
     ...
     ...
     ...
	--
	-p
	}}}
____ puts limits on the number of threads that can exist at one time.
{{{
    Every operating system
        puts limits on the number of threads that can exist at one time.
	--
	-p
	}}}
A thread that is busily working at a given time is said to be ____ at that point in time.
{{{
    CPU bound
	--
	-p
	}}}
On the other hand, some threads spend considerable amount of their time waiting for some event to occur like input from a user, data from a network connection, the completion of a Thread.sleep call, etc. Such threads are said to be ____ at those times.
{{{
    I/O bound
	--
	-p
	}}}
If _____, then a program can afford to start more threads than the number of cores without any degradation of performance.
{{{
    the majority of its threads are I/O bound
	--
	-p
	}}}
    ----

    ----
____ returns the identifier of the current thread (+It is commonly called without the function parentheses)
{{{
    thisTid()
	--
	-p
	}}}
The return value of spawn(), which I have been ignoring until this point, is
{{{
    the id of the worker thread:
	--
	-p
	}}}
Conversely, the owner of a worker thread is obtained by
{{{
    the ownerTid() function.
	--
	-p
	}}}
Message Passing
{{{
    send() sends messages and receiveOnly() waits for a message of a particular type.
        (There is also prioritySend(), receive(), and receiveTimeout(), which will be explained later below.)
	--
	-p
	}}}
Values that are passed as parts of a single message appear as
{{{
    a tuple on the receiver's side.
    In such cases the template parameters of receiveOnly() must match the types of the tuple members:
      .
    If the types do not match, a MessageMismatch exception is thrown:
	--
	-p
	}}}
The exceptions that the worker may throw cannot be caught by the owner.
{{{
    One solution is to have the worker catch the exception to be sent as a message.
      (+ ex. 
	--
	-p
	}}}
'This program demonstrates how helpful message passing concurrency can be: Movements of robots are calculated independently by separate threads without knowledge of each other.
{{{
	--
	-p
	}}}
Expecting different types of messages
{{{
    receiveOnly() can expect only one type of message. receive() on the other hand can wait for more than one type of message.
    It dispatches messages to message handling delegates.
	--
	-p
	}}}
____ can also be passed to receive() as message handlers. **
{{{
    Lambda functions and objects of types that define the opCall() member function
      'There are three anonymous functions below that are passed to receive() as message handlers. Their curly brackets are highlighted:
	--
	-p
	}}}
    ----

    ----
Receiving any type of message *
{{{
    std.variant.Variant is a type that can encapsulate any type of data.
	--
	-p
	}}}
Waiting for messages up to a certain time
{{{
	--
	-p
	}}}
Exceptions during the execution of the worker
{{{
    As we have seen in the previous chapter, the facilities of the std.parallelism module automatically catch exceptions that have been thrown during the execution of tasks and rethrow them in the context of the owner.
    std.concurrency does not provide such a convenience for general exception types. However, the exceptions can be caught and sent explicitly by the worker.
    + it is also possible to receive OwnerTerminated and LinkTerminated exceptions as messages.
      .
      One thing that the worker can do is to catch the exception explicitly and to send it as a special error message.
      Another method would be to send the actual exception object itself to the owner.
	--
	-p
	}}}
(''The calculate() function below receives string messages, converts them to double, adds 0.5, and sends the result back as a message:
{{{
	--
	-p
	}}}
Detecting thread termination
{{{
    OwnerTerminated exception
    LinkTerminated exception
      The owner can catch the exception to do something special like terminating gracefully:
	--
	-p
	}}}
Mailbox management
{{{
    Every thread has a private mailbox that holds the messages that are sent to that thread.
    setMaxMailboxSize() is used for limiting the number of messages that a mailbox can hold.
      OnCrowding.block: The sender waits until there is room in the mailbox.
      OnCrowding.ignore: The message is discarded.
      OnCrowding.throwException: A MailboxFull exception is thrown when sending the message.
      A function pointer of type bool function(Tid): The specified function is called.
	--
	-p
	}}}
Priority messages
{{{
    prioritySend()
	--
	-p
	}}}
it is possible to assign names to threads, which are globally accessible from any thread.
{{{
    register(): Associates a thread with a name.
    locate(): Returns the thread that is associated with the specified name. If there is no thread associated with that name, then Tid.init is returned.
    unregister(): Breaks the association between the specified name and the thread.
      'The following program starts two threads that find each other by their names.
	--
	-p
	}}}
thread_joinAll()
{{{
    making the owner to wait for all of its workers to terminate
	--
	-p
	}}}
Consider concurrency only when (!)
{{{
    threads depend on operations of other threads.
	--
	-p
	}}}
    ----

    ----
Data Sharing Concurrency
{{{
    more than one thread reading from and writing to the same data. For example, the owner thread can start the worker with the address of a bool variable and the worker can determine whether to terminate or not by reading the current value of that variable.  Another example would be where the owner starts multiple workers with the address of the same variable so that the variable gets modified by more than one worker.
	--
	-p
	}}}
One of the reasons why data sharing is not safe is
{{{
    race conditions
	--
	-p
	}}}
A race condition occurs when
{{{
    more than one thread accesses the same mutable data in an uncontrolled order.
        + Also, although these examples use the std.concurrency module, the concepts of this chapter apply to the core.thread module as well.
	--
	-p
	}}}
Sharing is not automatic
{{{
    Unlike most other programming languages, data is not automatically shared in D; data is thread-local by default.
	--
	-p
	}}}
id that  cannot be passed between threads.
{{{
    The address of the mutable variable isDone (=in the example)
      + An exception to this rule is a variable that is defined as __gshared:
	--
	-p
	}}}
interacting with libraries of languages like C and C++ where data sharing is automatic by default. **
{{{
    __gshared is necessary when interacting with libraries of languages like C and C++
	--
	-p
	}}}
share mutable data between threads **
{{{
    Mutable variables that need to be shared must be defined with the shared keyword:
	--
	-p
	}}}
'immutable implies shared' (*)
{{{
    = since immutable variables cannot be modified, there is no problem with sharing them directly.
	--
	-p
	}}}
make a thread wait for all of its child threads to terminate.
{{{
    core.thread.thread_joinAll
	--
	-p
	}}}
    ----

    ----
One way of avoiding these race conditions is
{{{
    to mark the common code with the synchronized keyword.
    The effect of synchronized is to create a lock behind the scenes and to allow only one thread hold that lock at a given time.
	--
	-p
	}}}
Fortunately, in some cases program correctness can be ensured without the use of a synchronized block  (= can be expensive) *
{{{
    taking advantage of atomic operations (?)
	--
	-p
	}}}
When it is needed to synchronize more than one block of code,
{{{
    it is possible to specify one or more locks with the synchronized keyword.
	--
	-p
	}}}
'Note: If the shorter equivalents of the expression above are used (i.e.  ++(*value) and ‑‑(*value)), (??)
{{{
    then the compiler warns that such read-modify-write operations on shared variables are deprecated.
	--
	-p
	}}}
For more than one block to use the same lock or locks,
{{{
    the lock objects must be specified within the synchronized parentheses:
	--
	-p
	}}}
There is no need for a special lock type in D because **(*)
{{{
    any class object can be used as a synchronized lock.
	--
	-p
	}}}
'Class types can be defined as synchronized as well.
{{{
    This means that all of the non-static member functions of that type are synchronized on a given object of that class: *
	--
	-p
	}}}
When blocks of code need to be synchronized on more than one object, those objects must be
{{{
    specified together.
	--
	-p
	}}}
Deadlocking: A well known example of this problem is a function that tries to transfer money from one bank account to another.
{{{
    For this function to work correctly in a multi-threaded environment, both of the accounts must first be locked.
     However, the following attempt would be incorrect:
    Since the from objects correspond to A and B in the two threads respectively, the objects would be in locked state in separate threads, making it impossible for the other thread to ever lock its to object.
      .
    The solution to this problem is to define an ordering relation between the objects and to lock them in that order, which is handled automatically by the synchronized statement. *
    In D, it is sufficient to specify the objects in the same synchronized statement for the code to avoid such deadlocks:
	--
	-p
	}}}
    ----

    ----
shared static this() for single initialization and shared static ~this() for single finalization
{{{
    This would cause problems for shared module variables because initializing a variable more than once would be wrong especially in concurrency due to race conditions.  (That applies to immutable variables as well because they are implicitly shared.)
    The solution is to use shared static this() blocks, which are executed only once per program
      Similarly, shared static ~this() is for final operations that must be executed only once per program.
	--
	-p
	}}}
Another way of ensuring that only one thread mutates a certain variable is by using *
{{{
    atomic operations,
    functionality of which are provided by the microprocessor, the compiler, or the operating system.
	--
	-p
	}}}
The atomic operations of D are in the ____ module.
{{{
    core.atomic
	--
	-p
	}}}
two of core.atomic's essential functions **
{{{
    atomicOp
        The line above is the equivalent of the following line, with the difference that the += operation would be executed without interruptions by other threads (i.e.  it would be executed atomically):
        (Consequently, when it is only a binary operation that needs to be synchronized, then there is no need for a synchronized block, which is known to be slow because of needing to acquire a lock.)
           ((Note that there is no need for the Lock class anymore either:
      .
    cas
        The name of this function is the abbreviation of "compare and swap".
        Its behavior can be described as mutate the variable if it still has its currently known value.
	--
	-p
	}}}
In most cases, the features of the core.atomic module can be *
{{{
    several times faster than using synchronized blocks.
    + 'I recommend that you consider this module as long as the operations that need synchronization are less than a block of code. **(*)
	--
	-p
	}}}
((You may also want to investigate the core.sync package, which contains classic concurrency primitives in the following modules:
{{{
	--
	-p
	}}}
__gshared provides data sharing as in
{{{
    C and C++ languages.
	--
	-p
	}}}
A class can be defined as synchronized so that
{{{
    only one member function can be executed on a given object at a given time.
	--
	-p
	}}}
static this() is executed // shared static this() is executed ____ **
{{{
    static this() is executed once for each thread;
    shared static this() is executed once for the entire program.
	--
	-p
	}}}
    ----

fibers **

    ----
A fiber is **
{{{
    a thread of execution enabling a single thread to achieve multiple tasks.
      .
    Compared to regular threads that are commonly used in parallelism and concurrency, it is more efficient to switch between fibers.
    Fibers are similar to coroutines and green threads.
    ('Fibers enable multiple call stacks per thread. (!!)
	--
	-p
	}}}
a Call stack
{{{
    The storage space allocated for the local state of a function call is called a frame (or stack frame).
    As functions call other functions during the execution of a thread, their frames are conceptually placed on top of each other to form a stack of frames.
    The stack of frames of currently active function calls is the call stack of that thread.
	--
	-p
	}}}
The advantages of the call stack is especially clear for * **(*)
{{{
    recursive functions.
    ((+ 'Recursion greatly simplifies certain kinds of algorithms like the ones that are classified as divide-and-conquer.
        .
    Note: In practice, when the recursive function directly returns the result of calling itself, compilers use a technique called "tail-call optimization", which eliminates separate frames for each recursive call.
	--
	-p
	}}}
a recursion example (!)
{{{
    Let's consider the following function that calculates the sum of the elements of a slice.
    It achieves this task by calling itself recursively with a slice that is one element shorter than the one that it has received.
    The current result is carried over to the next recursion step as the second parameter:
    ((demonstr. (= 'Otherwise, the sum of the elements of a range should be calculated by std.algorithm.sum, which uses special algorithms to achieve more accurate calculations for floating point types.
	--
	-p
	}}}
The power of fibers is based on the fact that *
{{{
    although a fiber is not a thread, it gets its own call stack, effectively enabling multiple call stacks per thread.
	--
	-p
	}}}
te: The following are common operations of fibers. *
{{{
    A fiber starts its execution from a callable entity (function pointer, delegate, etc.) that does not take any parameter and does not return anything. For example, the following function can be used as a fiber function:
    A fiber can be created as an object of class core.thread.Fiber with a callable entity:
    Alternatively, a subclass of Fiber can be defined and the fiber function can be passed to the constructor of the superclass.
        fiber.call();
    Unlike threads, the caller is paused while the fiber is executing. *
    The execution state of a fiber is determined by its .state property:
        HOLD: The fiber is paused, meaning that it can be started or resumed.
        EXEC: The fiber is currently executing.
        TERM: The fiber has terminated. It must be reset() before it can be used again.
	--
	-p
	}}}
Fibers in range implementations
{{{
    Almost every range needs to store some information to remember its state of iteration.
	--
	-p
	}}}
While maintaining the iteration state is trivial for some ranges like FibonacciSeries, it is surprisingly harder for some others, e.g. recursive data structures like binary search trees. (??)
{{{
	--
	-p
	}}}
('the following recursive implementations of insert() and print() do not define any variables and are independent of the number of elements contained in the tree.
{{{
	--
	-p
	}}}
    ----

    ----
generate the elements of a given value range lazily. *
{{{
    std.range.iota
	--
	-p
	}}}
std.random.randomSample, std.random.randomShuffle
{{{
	--
	-p
	}}}
'I will not attempt to implement InOrderRange here but I encourage you to implement or at least research tree iterators.
{{{
    (Some implementations require that tree nodes have an additional Node* to point at each node's parent.)
	--
	-p
	}}}
The reason why recursive tree algorithms like print() are trivial *
{{{
    is due to the automatic management of the call stack.
    = The call stack implicitly contains information not only about what the current element is, but also how the execution of the program arrived at that element (e.g.
	--
	-p
	}}}
Fibers are useful for similar cases *
{{{
    = 'where using a call stack is much easier than maintaining state explicitly.
	--
	-p
	}}}
(testcase: implementing fib.series w. fibers)
{{{
	--
	-p
	}}}
(the fiber version of)  fibonacciSeries() cannot be used directly as a fiber function.
{{{
    Because fiber functions do not take parameters,
	--
	-p
	}}}
(writing the fib.example better with ranges) *
{{{
    The std.concurrency.Generator class addresses all of these issues.
    Also note that this time it is the std.concurrency.yield function, not the Fiber.yield member function that we used above.
	--
	-p
	}}}
Fibers in asynchronous input and output *
{{{
    As an example, let's imagine a system where users sign on to a service by connecting to a server and providing their name, email, and age, in that order.
	--
	-p
	}}}
    ----

    ----
There can be several designs that makes this service non-blocking, meaning that more than one user can sign on at the same time:
{{{
    Maintaining tasks explicitly:
    Maintaining state:
    Alternatively, a design based on fibers can employ one fiber per sign-on flow.
        ++ The next line to be executed is implied by the call stack.
        import core.thread;
	--
	-p
	}}}
Exceptions and fibers
{{{
	--
	-p
	}}}
The process of leaving functions and executing destructors of local variables due to a thrown exception is called
{{{
    stack unwinding.
	--
	-p
	}}}
If the exception is not caught, the fiber function terminates and the fiber's state becomes Fiber.State.TERM.
{{{
	--
	-p
	}}}
Although that may be the desired behavior in some cases, sometimes a fiber may need to communicate an error condition to its caller without losing its execution state.
{{{
    Fiber.yieldAndThrow allows a fiber to yield and immediately throw an exception in the caller's context.
    Instead of terminating the fiber and losing the entire sign-on flow, the fiber can catch the conversion error and communicate it to the caller by yieldAndThrow().
      .
    Wrapping that line with a try-catch statement inside an unconditional loop would be sufficient to keep the fiber alive until there is data that can be converted to a uint:
	--
	-p
	}}}
Cooperative multitasking (??)
{{{
    Unlike operating system threads, which are paused (suspended) and resumed by the operating system at unknown points in time, a fiber pauses itself explicitly and is resumed by its caller explicitly.
	--
	-p
	}}}
the kind of multitasking that the operating system provides is called
{{{
    preemptive multitasking
    and the kind that fibers provide is called cooperative multitasking.
	--
	-p
	}}}
In preemptive multitasking, the operating system allots a certain amount of time to a thread when it starts or resumes its execution.  Moving from one thread to another is called *
{{{
    context switching.
	--
	-p
	}}}
With fibers, the caller and the fiber execute *
{{{
    as parts of the same thread. (??)
      ..
    As a benefit, there is no overhead of context switching between the caller and the fiber.
    Another benefit of cooperative multitasking is that the data that the caller and the fiber exchange is more likely to be in the CPU's data cache. (= which further improves the performance of fibers)
	--
	-p
	}}}
'One obvious shortcoming of fibers is that only one core of the CPU is used for the caller and its fibers.
{{{
    It is possible to use different designs like the M:N threading model (hybrid threading) that employ other cores as well.
	--
	-p
	}}}
A fiber and its caller are executed *
{{{
    on the same thread (i.e. not at the same time).
	--
	-p
	}}}
    ----

(Memory Management)

    ----
I encourage you to research
{{{
    various memory management methods as well as the std.allocator module, which was still at experimental stage at the time of writing this book.
	--
	-p
	}}}
___ is useful when experimenting with memory. **
{{{
    The & (address-of) operator
	--
	-p
	}}}
The dynamic variables that are used in D programs live on
{{{
    memory blocks that are owned by the garbage collector (GC).
	--
	-p
	}}}
This algorithm is called garbage collection and an execution of the algorithm is called
{{{
    a garbage collection cycle.
	--
	-p
	}}}
The algorithm that the GC executes can roughly be described as the following.
{{{
    All of the memory blocks that can be reached directly or indirectly by pointers (including references) that are in the program roots are scanned.
    Any memory block that can be reached is tagged as being still in use and all the others are tagged as not being used anymore.
    The finalizers of objects and structs that live on inaccessible blocks are executed and those memory blocks are reclaimed to be used for future variables.
    The roots are defined as all of the program stack for every thread, all global and thread-local variables, and any additional data added via GC.addRoot or GC.addRange.
     ...
     ...
     ...
     ...
     ...
	--
	-p
	}}}
A GC is said to be "precise" if
{{{
    it knows exactly which memory contains pointers and which doesn't.
	--
	-p
	}}}
A GC is conservative if
{{{
    it scans all memory as if it were pointers.
	--
	-p
	}}}
D's GC is partially conservative, scanning only blocks that contain pointers, but it will scan all data in those blocks. For this reason, in some cases
{{{
    blocks are not ever collected, thereby "leaking" that memory.
	--
	-p
	}}}
____ are more likely to be targeted by "false pointers".
{{{
    Large blocks
	--
	-p
	}}}
In some cases it may be recommended to manually (!)
{{{
    free large blocks you are no longer using to avoid this problem.
      (= memory leaks)
	--
	-p
	}}}
'For that reason, no class member that refers to a dynamic variable should be accessed inside the destructor.
{{{
    = 'For example, a reference member of an object may be finalized before the object that contains that member.
      (= Note that this is very different from the deterministic destruction order of languages like C++.
	--
	-p
	}}}
    ----

    ----
A garbage collection cycle can be started for various reasons like
{{{
    needing to find space for more data.
	--
	-p
	}}}
However, it is possible to delay or dispatch garbage collection cycles as needed by the functions defined in the
{{{
    core.memory module.
	--
	-p
	}}}
It may be desired to delay the execution of garbage collection cycles during a part of the program where
{{{
    GC.disable disables garbage collection cycles and GC.enable enables them again:
	--
	-p
	}}}
If desired, the GC can be asked to give unused memory back to the operating system using
{{{
    GC.minimize():
	--
	-p
	}}}
System languages allow programmers to specify the memory areas where objects should live. Such memory areas are commonly called
{{{
    buffers
	--
	-p
	}}}
There are several methods of allocating memory.
{{{
    The simplest method would be using a fixed-length array:
    'Instead of ubyte, it is also possible to define such buffers as arrays of void, without any association to any type.
      Such arrays must be initialized by the special syntax =void:
	--
	-p
	}}}
. Additionally, the memory allocation functions of the C standard library are avaliable in the
{{{
    core.stdc.stdlib module.
	--
	-p
	}}}
____ allocates a memory area of the specified size pre-filled with all 0 values, and returns the beginning address of the allocated area:
{{{
    GC.calloc
	--
	-p
	}}}
Instead of arbitrary values like 100, the size of the memory area is usually calculated by
{{{
    multiplying the number of elements needed with the size of each element:
     ( like 25 ints )
	--
	-p
	}}}
There is an important difference for classes:
{{{
    The size of a class variable and the size of a class object are not the same.
    .sizeof is the size of a class variable and is always the same value: 8 on 64-bit systems and 4 on 32-bit systems.
    The size of a class object must be obtained by __traits(classInstanceSize):
	--
	-p
	}}}
When there is not enough memory in the system for the requested size, then
{{{
    a core.exception.OutOfMemoryError exception is thrown:
	--
	-p
	}}}
    ----

    ----
The memory areas that are allocated from the GC can be returned back to it using
{{{
    GC.free:
	--
	-p
	}}}
The destructors may be executed explicitly by calling
{{{
    destroy() for each variable.
	--
	-p
	}}}
Note that various internal mechanisms are used to call finalizers on class and struct variables during GC collection or freeing. The best way to ensure these are called is to *
{{{
    use the new operator when allocating variables.
    In that case, GC.free will call the destructors.
	--
	-p
	}}}
It is possible to extend a previously allocated memory area by
{{{
    GC.realloc.
    realloc() takes the previously allocated memory pointer and the newly requested size, and returns a new area:
	--
	-p
	}}}
It is possible to pass null as oldBuffer, in which case realloc() simply allocates new memory. (??)
{{{
	--
	-p
	}}}
It is possible to ____, in which case realloc() simply frees the memory.
{{{
    pass 0 as the new size
	--
	-p
	}}}
A potentially surprising aspect of GC.realloc is that
{{{
    even if the original memory has been allocated with GC.calloc, the extended part is never cleared. For that reason, when it is important that the memory is zero-initialized, a function like reallocCleared() below would be useful.
	--
	-p
	}}}
The function above uses ____ from the ____ module to clear the newly extended bytes.
{{{
    memset() from the core.stdc.string module
    memset() assigns the specified value to the bytes of a memory area specified by a pointer and a length.
	--
	-p
	}}}
GC.extend is not complicated like realloc();
{{{
    it applies only the first item above: If the memory area cannot be extended in-place, extend() does not do anything and returns 0.
	--
	-p
	}}}
    ----

Memory block attributes

    ----
The concepts and the steps of a GC algorithm can be configured to some degree for each memory block by *
{{{
    enum BlkAttr.
    BlkAttr is an optional parameter of GC.calloc and other allocation functions.
      NONE: The value zero; specifies no attribute.
      FINALIZE: Specifies that the objects that live in the memory block should be finalized.
    Normally, the GC assumes that the lifetimes of objects that live on explicitly-allocated memory locations are under the control of the programmer; it does not finalize objects on such memory areas.
    GC.BlkAttr.FINALIZE is for requesting the GC to execute the destructors of objects:
     ..
     ..
    NO_MOVE: Specifies that objects in the memory block should not be moved to other places.
      APPENDABLE: This is an internal flag used by the D runtime to aid in fast appending. You should not use this flag when allocating memory.
    ** NO_INTERIOR: Specifies that only pointers to the block's first address exist. This allows one to cut down on "false pointers" because a pointer to the middle of the block does not count when tracing where a pointer goes.
	--
	-p
	}}}
NO_SCAN: Specifies that the memory area should not be scanned by the GC.
{{{
    The byte values in a memory area may accidentally look like pointers to unrelated objects in other parts of the memory. When that happens, the GC would assume that those objects are still in use even after their actual lifetimes have ended.
    A memory block that is known to not contain any object pointers should be marked as GC.BlkAttr.NO_SCAN:
	--
	-p
	}}}
The values of enum BlkAttr are suitable to be used as **
{{{
    bit flags that we saw in the Bit Operations chapter. The following is how two attributes can be merged by the | operator:
    const attributes = GC.BlkAttr.NO_SCAN | GC.BlkAttr.NO_INTERIOR;
	--
	-p
	}}}
introducing unrelated memory blocks to the GC.
{{{
    GC.addRange
	--
	-p
	}}}
should be called before freeing a memory block by other means e.g. by core.stdc.stdlib.free.
{{{
    GC.removeRange
	--
	-p
	}}}
(In some cases, there may be no reference in the program to a memory block even if that memory block has been reserved by the GC.
{{{
    For example, if the only reference to a memory block lives inside a C library, the GC would normally not know about that reference and assume that the memory block is not in use anymore.
    GC.addRoot introduces a memory block to the GC as a root, to be scanned during collection cycles.
    All of the variables that can be reached directly or indirectly through that memory block would be marked as alive.
    The complement function GC.removeRoot should be called when a memory block is not in use anymore.
	--
	-p
	}}}
explicit memory allocation: 'Let's design a simple struct template that works like an array.
{{{
	--
	-p
	}}}
    ----

    ----
Alignment: By default, every object is placed at memory locations that are *
{{{
    multiples of an amount specific to the type of that object.
	--
	-p
	}}}
That amount (= how far apart objects are placed in memory) is called ____ of that type. *
{{{
    the alignment
    For example, the alignment of int is 4 because int variables are placed at memory locations that are multiples of 4 (4, 8, 12, etc.).
    Alignment is needed for CPU performance or requirements,
  because accessing misaligned memory addresses can be slower or cause a bus error.
    --
    In addition, certain types of variables only work properly at aligned addresses. **
	--
	-p
	}}}
The .alignof property of a type *
{{{
    is its default alignment value.
	--
	-p
	}}}
For classes, .alignof is *
{{{
    the alignment of the class variable, not the class object.
	--
	-p
	}}}
The alignment of a class object is obtained by
{{{
    std.traits.classInstanceAlignment.
	--
	-p
	}}}
(For correctness and efficiency, objects must be constructed at addresses that *
{{{
    match their alignments.
	--
	-p
	}}}
When the second object is placed at that address, there would be unused bytes between the two objects. Those bytes are called
{{{
    padding bytes:
	--
	-p
	}}}
The following formula can determine the nearest address value that an object can be placed at:
{{{
    (candidateAddress + alignmentValue - 1) / alignmentValue * alignmentValue
    For that formula to work, the fractional part of the result of the division must be truncated.
	--
	-p
	}}}
'That function template deduces the type of the object from its template parameter.
{{{
        Since that is not possible when the type is void*, the type must be provided as an explicit template argument for the void* overload.
	--
	-p
	}}}
'Let's define one more function template to calculate the total size of an object including the padding bytes that must be placed between two objects of that type:
{{{
	--
	-p
	}}}
    ----

    ----
Alignment is observed for members of user-defined types as well. There may be padding bytes between members so that the members are aligned according to their respective types. *
{{{
    The .offsetof property gives the number of bytes a member variable is from the beginning of the object that it is a part of.
	--
	-p
	}}}
Tip: One technique of minimizing padding is *
{{{
    ordering the members by their sizes from the largest to the smallest.
	--
	-p
	}}}
attribute for specifying alignments of variables, user-defined types, and members of user-defined types.
{{{
    The align attribute
    The value provided in parentheses specifies the alignment value.
      .
    the following definition would align S objects at 2-byte boundaries and its i member at 1-byte boundaries (1-byte alignment always results in no padding at all):
      .
    align (2)               // The alignment of 'S' objects
    struct S {
        byte b;
        align (1) int i;    // The alignment of member 'i'
        ubyte u;
    }
      .
    void main() {
        printObjectLayout!S();
    }
	--
	-p
	}}}
Although align can reduce sizes of user-defined types,
{{{
    there can be significant performance penalties when default alignments of types are not observed (and on some CPUs, using misaligned data can actually crash the program).
	--
	-p
	}}}
align can specify the alignment of ____ as well:
{{{
    variables
    align (32) double d;
	--
	-p
	}}}
However, objects that are allocated by new must always *
{{{
    be aligned at multiples of the size of the size_t type because that is what the GC assumes.
        For example, if size_t is 8 bytes long, than the alignments of variables allocated by new must be a multiple of 8.
	--
	-p
	}}}
Constructing variables at specific memory locations
{{{
    The new expression achieves three tasks:
      .
    Allocates memory large enough for the object. The newly allocated memory area is considered to be raw, not associated with any type or any object.
    Copies the .init value of that type on that memory area and executes the constructor of the object on that area. Only after this step the object becomes placed on that memory area.
    Configures the memory block so it has all the necessary flags and infrastructure to properly destroy the object when freed.
	--
	-p
	}}}
Variables can be constructed at specific locations with *
{{{
    std.conv.emplace.
	--
	-p
	}}}
Constructing a struct object at a specific location
{{{
    emplace() takes the address of a memory location as its first parameter and constructs an object at that location. If provided, it uses the remaining parameters as the object's constructor arguments:
    It is not necessary to specify the type of the object explicitly when constructing a struct object because emplace() deduces the type of the object from the type of the pointer.
	--
	-p
	}}}
    ----

    ----
Constructing a class object at a specific location
{{{
    ''Instead, the actual type of the object must be explicitly specified as a template argument of emplace().
    (Note: Additionally, a class pointer is a pointer to a class variable, not to a class object.
     For that reason, specifying the actual type allows the programmer to specify whether to emplace a class object or a class variable.) **(*)
    --
    The memory location for a class object must be specified as a void[] slice with the following syntax:
	--
	-p
	}}}
Ex: 'This will be useful to demonstrate how the address of a subsequent object can be determined depending on the size of the previous one.
{{{
	--
	-p
	}}}
'Normally, it must be ensured that there is always available capacity for objects.
{{{
    (= using checks)
	--
	-p
	}}}
'Note that the constructor argument of Parrot is specified after the address of the object. *
{{{
	--
	-p
	}}}
(('Instead of repeating the steps inside main() for each object, a function template like newObject(T) would be more useful.
{{{
	--
	-p
	}}}
Destroying objects explicitly
{{{
    For example, an object may be closing a File member in its destructor and the destructor may have to be executed immediately when the lifetime of the object ends.
    destroy() calls the destructor of an object:
        destroy(variable);
	--
	-p
	}}}
After executing the destructor, destroy() sets the variable to its
{{{
    .init state.
    !!: Note that the .init state of a class variable is null; so, a class variable cannot be used once destroyed.
	--
	-p
	}}}
Warning: When (destroy() is) used with a struct pointer, **
{{{
    destroy() must receive the pointee, not the pointer.
    Otherwise, the pointer would be set to null but the object would not be destroyed:
	--
	-p
	}}}
When destroy() receives a pointer, it is
{{{
    the pointer that gets destroyed (i.e. the pointer becomes null):
	--
	-p
	}}}
Constructing objects at run time by name (??)
{{{
    The factory() member function of Object takes the fully qualified name of a class type as parameter, constructs an object of that type, and returns a class variable for that object:
	--
	-p
	}}}
'Note that Object.factory() takes the fully qualified name of the type of the object.
{{{
    Also, the return type of factory() is Object; so, it must be cast to the actual type of the object before being used in the program.
	--
	-p
	}}}
    ----

User Defined Attributes (UDA) **

    ----
Any declaration (e.g. struct type, class type, variable, etc.) can be assigned attributes, which **
{{{
    can then be accessed at compile time to alter the way the code is compiled.
    User defined attributes is purely a compile-time feature.
	--
	-p
	}}}
assign the Encrypted attribute to the declaration of name: **
{{{
    @Encrypted string name;
	--
	-p
	}}}
Multiple attributes can be specified separately or as a parenthesized list of attributes. **
{{{
    @Encrypted @Colored string lastName;     // <- separately
    @(Encrypted, Colored) string address;    // <- together
	--
	-p
	}}}
An attribute can be *
{{{
    a type name as well as a value of a user defined or a fundamental type.
    However, because their meanings may not be clear, attributes consisting of literal values like 42 are discouraged:
	--
	-p
	}}}
The meaning of attributes (= is determined by what?) *(*) **
{{{
    is solely determined by the programmer for the needs of the program.
    The attributes are determined by __traits(getAttributes) at compile time and the code is compiled according to those attributes.
	--
	-p
	}}}
The following code shows how the attributes of a specific struct member (e.g. Person.name) can be accessed by __traits(getAttributes): **
{{{
	--
	-p
	}}}
Two other __traits expressions are useful when dealing with user defined attributes: *
{{{
    __traits(allMembers) produces the members of a type (or a module) as strings.
    __traits(getMember) produces a symbol useful when accessing a member.
	--
	-p
	}}}
Another useful tool is ____, which determines whether a symbol has a specific attribute. **
{{{
    std.traits.hasUDA
	--
	-p
	}}}
'The following static assert passes because Person.name has Encrypted attribute: *
{{{
    import std.traits;
        // ...
    static assert(hasUDA!(Person.name, Encrypted));
	--
	-p
	}}}
    ----

    ----
hasUDA can be used with *
{{{
    an attribute type as well as
    a specific value of that type.
	--
	-p
	}}}
The following static assert checks both pass because Person.name has Colored(Color.blue) attribute:
{{{
    static assert(hasUDA!(Person.name, Colored));
    static assert(hasUDA!(Person.name, Colored(Color.blue)));
	--
	-p
	}}}
Let's design a function template that prints the values of all members of a struct object in XML format. (**)
{{{
	--
	-p
	}}}
Because hasUDA requires symbols to work with, note how
{{{
    __traits(getMember) is used to get the member as a symbol (e.g.  Person.name).)
	--
	-p
	}}}
(The colorAttributeOf() function template can be implemented as in the following code:
{{{
	--
	-p
	}}}
(When the compile-time evaluations are completed, the printAsXML() function template would be instantiated for the Person type as the equivalent of the following function:
{{{
	--
	-p
	}}}
The benefit of user defined attributes **(*)
{{{
    being able to change the attributes of declarations without needing to change any other part of the program.
    For example, all of the members of Person can become encrypted in the XML output by the trivial change below:
      .
    Further, printAsXML() and the attributes that it considers can be used with other types as well: (??)
	--
	-p
	}}}
User defined attributes can be assigned to **
{{{
    any declaration.
	--
	-p
	}}}
User defined attributes can be accessed at compile time by ____ to alter the way the program is compiled. **
{{{
    hasUDA and __traits(getAttributes)
	--
	-p
	}}}
    ----
    
Operator Precedence
    
    ----
'For example, the following line contains N expressions chained with N operators:  a = b + c * d  **
{{{
    four expressions chained with three operators:
	--
	-p
	}}}
Unless specified otherwise, operators are *
{{{
    left-associative.
	--
	-p
	}}}
As another example, because postfix . has higher precedence than unary *,
{{{
    the following expression would first access member ptr of object o and then dereference it:
    *o.ptr      // ← dereferences pointer member o.ptr
    *(o.ptr)    // ← equivalent of the above
	--
	-p
	}}}
The programmer must specify the desired execution order with (!!) *
{{{
    parentheses:
    if ((a > b) == c) {
	--
	-p
	}}}
If two operators have the same precedence, then ____ determines which operator is executed first: **
{{{
    their associativity
	--
	-p
	}}}
Most operators are ____-associative; the one on the ____-hand side is executed first: *
{{{
    left
      .
    10 - 7 - 3;
    (10 - 7) - 3;    // ← equivalent of the above (== 0)
	--
	-p
	}}}
Precedence between bitwise operators and logical operators are specified by ____
{{{
    = are not(!) specified by the language:
    = 'Unordered operator groups'
    = The programmer must specify the desired execution order with parentheses:
	--
	-p
	}}}
(Although => is not an operator, it takes part in the table twice to specify how it interacts with operators on its left-hand side and right-hand side.
{{{
    (See More(!!))
	--
	-p
	}}}
Comma operator **
{{{
    is a binary operator.  It executes first the left-hand side expression then the right-hand side expression.
    The values of both expressions are ignored.
    The comma operator is most commonly used with for loops when the loop iteration involves mutating more than one variable:
	--
	-p
	}}}
    ----

    ----
1
{{{
    
	--
	-p
	}}}



DAli (cpp17 (**!)):
structs and functions  (= 'classes are just a convenience' )
Functional Programming
  string mixins


    ___cpptut1=
      TODO: - Clean Code(!)
            - bump pagenums 1((!))
      +Add|Adjust Ex.Code
         = acc. to cpp21, cpptpoint

Hello World!
{{{
    #include <iostream>
    using namespace std;
      .
    int main ()
    {
      cout << "Hello World!";
      return 0;
    }
	--
	cpptut1-p6
	}}}
Lines beginning with a hash sign (#) are _____
{{{
    directives for the preprocessor.
	--
	cpptut1-p6
	}}}
In this case the directive #include <iostream> tells the preprocessor ___
{{{
    to include the iostream standard file.
	--
	cpptut1-p6
	}}}
using namespace std;
{{{
    All the elements of the standard C++ library are declared within what is called a namespace, the namespace with the name std. So in order to access its functionality we declare with this expression that we will be using these entities.
	--
	cpptut1-p6
	}}}
cout << "Hello World!"; This line is a C++ statement. A statement is a simple or compound expression that ____
{{{
    that can actually produce some effect.
	--
	cpptut1-p7
	}}}
___ character is used to mark the end of the statement and in fact it must be included at the end of all expression statements in all C++ programs
{{{
	;
	--
	cpptut1-p6
	}}}
return 0;
{{{
    The return statement causes the main function to finish. return may be followed by a return code (in our example is followed by the return code 0).
    A return code of 0 for the main function is generally interpreted as the program worked as expected without any errors during its execution
	--
	cpptut1-p7
	}}}
Preprocessor directives must be specified in ___
{{{
    - in their own line and
    - do not have to end with a semicolon (;).
	--
	cpptut1-p9
	}}}
set some var.s
{{{
    a = 5;
    b = 2;
    a = a + 1;
    result = a - b;
	--
	cpptut1-p11
	}}}
    ----

    ----
Next you have a summary of the basic fundamental data types in C++, as well as the range of values that can be represented with each one:
{{{
	see more
	--
	cpptut1-p12
	}}}
declare a new variable
{{{
    int a;
    float mynumber;
	--
	cpptut1-p13
	}}}
declare more than one variable of the same type, **
{{{
    int a, b, c;
	--
	cpptut1-p13
	}}}
unsigned types can only represent positive values (and zero).
{{{
    unsigned short int NumberOfSisters;
    signed int MyAccountBalance;
	--
	cpptut1-p13
	}}}
short and long used alone as type specifiers.
{{{
    refer to their respective integer fundamental types: short is equivalent to short int and long is equivalent to long int.
	--
	cpptut1-p13
	}}}
signed and unsigned used as standalone type specifiers,
{{{
    =meaning the same as signed int and unsigned int respectively.
	--
	cpptut1-p13
	}}}
global vs local variable scope.
{{{
    A global variable is a variable declared in the main body of the source code, outside all functions, while a local variable is one declared within the body of a function or a block.
	--
	cpptut1-p14
	}}}
initialize a variable.
{{{
    //  c-like
    // type identifier = initial_value;
    int a = 0;
      .
    //  constructor initialization,
    //type identifier (initial_value);
    int a (0);
	--
	cpptut1-p15
	}}}
The C++ language library provides support for strings through the standard string class.
{{{
    This is not a fundamental type, but it behaves in a similar way as fundamental types do in its most basic usage.
	--
	cpptut1-p15
	}}}
    ----

    ----
A first difference betw. using strings and fundamental data types *
{{{
    in order to declare and use objects (variables) of this type we need to include an additional header file in our source code: <string> and have access to the std namespace
	--
	cpptut1-p16
	}}}
'initialization formats (that) are valid with strings:'
{{{
    string mystring = "This is a string";
        / /
    string mystring ("This is a string");
	--
	cpptut1-p16
	}}}
newline(?) in cpp
{{{
    mystring = "String 1";
    cout << mystring << endl;
	--
	cpptut1-p16
	}}}
For more details on C++ strings,
{{{
    you can have a look at the string class reference.
	--
	cpptut1-p16
	}}}
Literal constants can be divided in
{{{
    Integer Numerals,
    Floating-Point Numerals,
    Characters,
    Strings
    Boolean Values
	--
	cpptut1-p17
	}}}
octal // hexadecimal number
{{{
    75
     .
    0113
    0x4b
	--
	cpptut1-p17
	}}}
force int literals to be unsigned // long
{{{
    75
    75u
    75l
    75ul
	--
	cpptut1-p17
	}}}
If you explicitly want to express a float or long double numerical literal,
{{{
    you can use the f or l suffixes respectively: 3.14159L 6.02e23f
	--
	cpptut1-p18
	}}}
escape codes, eg. newline
{{{
	see table
      "Left \t Right"
	--
	cpptut1-p18,19
	}}}
    ----

    ----
Additionally, you can express any character by its numerical ASCII code by writing a backslash character (\) followed by
{{{
    the ASCII code expressed as an octal (base-8) or hexadecimal (base-16) number.
    \40
    \x20 or \x4A
	--
	cpptut1-p19
	}}}
String literals can extend to more than a single line of code by
{{{
    putting a backslash sign (\) at the end of each unfinished line.
	--
	cpptut1-p19
	}}}
Finally, if we want non-English or exotic character sets. @
{{{
    =if we want the string literal to be explicitly made of wide characters (wchar_t),
    instead of narrow characters (char), we can precede the constant with the L prefix:
      .
    L"This is a wide character string"
	--
	cpptut1-p19
	}}}
define your own names for constants
{{{
    #define identifier value
    For example:
      .
    #define PI 3.14159
    #define NEWLINE '\n'
	--
	cpptut1-p19,20
	}}}
If you append a semicolon character (;) at the end (of a preprocessor directive)
{{{
    it will also be appended in all occurrences within the body of the program that the preprocessor replaces.
	--
	cpptut1-p20
	}}}
With the const prefix you can
{{{
    declare constants with a specific type in the same way as you would do with a variable:
      .
    const int pathwidth = 100;
    const char tabulator = '\t';
	--
	cpptut1-p20
    }}}
operators: '='
{{{
    The assignment operator
	--
	cpptut1-p21
	}}}
The part at the left of the assignment operator (=) is known as
{{{
    the lvalue (left value) and the right one as the rvalue (right value).
	--
	cpptut1-p21
	}}}
The lvalue has to be
{{{
    a variable whereas the rvalue can be either a constant, a variable, the result of an operation or any combination of these.
	--
	cpptut1-p21
	}}}
    ----

    ----
The most important rule when assigning is @@
{{{
    the right-to-left rule: The assignment operation always takes place from right to left, and never the other way: a = b; This statement assigns to variable a (the lvalue) the value contained in variable b (the rvalue).
	--
	cpptut1-p21
	}}}
tip: the assignment operation can be used as the rvalue (or part of an rvalue)
{{{
    a = 2 + (b = 5); is equivalent to: b = 5; a = 2 + b;
    that means: first assign 5 to variable b and then assign to a the value 2 plus the result of the previous assignment of b (i.e. 5), leaving a with a final value of 7.
        +The following expression is also valid in C++: a = b = c = 5; It assigns 5 to the all the three variables: a, b and c.
	--
	cpptut1-p22
	}}}
not equals
{{{
	!=
	--
	cpptut1-p23
	}}}
Comparison Examples
{{{
    Suppose that a=2, b=3 and c=6,
    (a == 5)      //false
    (a*b >= c)    //true
    (b+4 > a*c)   //false
    ((b=2) == a   //true)
	--
	cpptut1-p24
	}}}
Logical operators: Not, And, Or * @
{{{
    !, &&, ||
      .
    !(5 == 5)
    !(6 <= 4)
    !true
    !false
	--
	cpptut1-p24
	}}}
Conditional operator
{{{
    condition ? result1 : result2
	--
	cpptut1-p25
	}}}
Comma operator ( , ) (??)
{{{
    used to separate two or more expressions that are included where only one expression is expected.
    When the set of expressions has to be evaluated for a value, only the rightmost expression is considered.
    For example, the following code: a = (b=3, b+2);
      .
    Would first assign the value 3 to b, and then assign b+2 to variable a. So, at the end, variable a would contain the value 5 while variable b would contain value 3.
	--
	cpptut1-p25
	}}}
Explicit type casting
{{{
    int i;
    float f = 3.14;
      --
    c-style
    i = (int) f;
      .
      .
    newer functional notation:
    i = int ( f );
           i = int(f);
	--
	cpptut1-p26
	}}}
returns the size in bytes of that type or object:
{{{
    a = sizeof (char);
      a = sizeof(char);
	--
	cpptut1-p26
	}}}
    ----


    ----
A stream is an object where * @@
{{{
    a program can either insert or extract characters to/from it.
	--
	cpptut1-p29
	}}}
By default, the standard output of a program is the screen, and the C++ stream object defined to access it is * @@
{{{
    cout
    cout is used in conjunction with the insertion operator, which is written as << (two "less than" signs).
      .
    cout << "Output sentence";
    cout << x;
	--
	cpptut1-p29
	}}}
print the message Hello, I am a C++ statement on the screen. (=tip: print mix of var. contents + string constants) * @
{{{
    cout << "Hello, " << "I am " << "a C++ statement";
      .
    print out a combination of variables and constants or more than one variable:
    cout << "Hello, I am " << age << " years old and my zipcode is " << zipcode;
	--
	cpptut1-p29
	}}}
using endl with buffered streams: *
{{{
    when it is used with buffered streams: the buffer is flushed.
	--
	cpptut1-p29
	}}}
cout will be an ____ stream in most cases
{{{
    unbuffered
    (=so you can generally use both the \n escape character and the endl manipulator in order to specify a new line without any difference in its behavior)
	--
	cpptut1-p29
	}}}
te: cin
{{{
    Standard Input
	--
	cpptut1-p29
	}}}
declare a variable of type int called age, + a second one that waits for an input from cin (the keyboard) in order to store it in this integer variable. @@
{{{
    int age;
    cin >> age;
	--
	cpptut1-p29
	}}}
// i/o example ** @@(@)
{{{
    // i/o example
    #include <iostream>
      .
    using namespace std;
        .
    int main () {
        int i;
        cout << "Please enter an integer value: ";
        cin >> i;
        cout << "The value you entered is " << i;
        cout << " and its double is " << i*2 << ".\n";
        return 0;
    }
	--
	cpptut1-p30
	}}}
You can also use cin to request more than one datum input from the user: @
{{{
    cin >> a >> b; is equivalent to:
    cin >> a; cin >> b;
    In both cases the user must give two data, one for variable a and another one for variable b that may be separated by any valid blank separator:
    a space, a tab character or a newline.
	--
	cpptut1-p30
	}}}
    ----

    ----
In order to get entire lines, we can use ** @
{{{
    the function getline, which is the more recommendable way to get user input with cin:
	--
	cpptut1-p30
	}}}
What's your name? Juan Soulixx + The Isotopes
{{{
	see more
	--
	cpptut1-p31
	}}}
string mystr ("1204"); int myint; stringstream(mystr) >> myint; @
{{{
    The standard header file <sstream> defines a class called stringstream that allows a string-based object to be treated as a stream.
    This way we can perform extraction or insertion operations from/to strings, which is especially useful to convert strings to numerical values and vice versa.
    For example(!), if we want to extract an integer from a string
      .
    Because we can use stringstream objects as if they were streams, we can extract an integer from it as we would have done on cin by applying the extractor operator (>>) on it followed by a variable of type int.
	--
	cpptut1-p31
	}}}
Instead of extracting numeric values directly from the standard input, we get lines from the standard input (cin) into a string object (mystr), and then we extract the integer values from this string into a variable of type int (quantity).
{{{
	see more =ex.
	--
	cpptut1-p31
	}}}
te: compound statement
{{{
    =another word for block.
    A block is a group of statements which are separated by semicolons (;) like all C++ statements, but grouped together in a block enclosed in braces: { }:
	--
	cpptut1-p34
	}}}
format of an if statement *
{{{
    if (condition) statement
      .
    if (x == 100)
      cout << "x is 100";
      .
    if (x == 100) {
      cout << "x is ";
      cout << x;
    }
      .
    if (x > 0)
      cout << "x is positive";
    else if (x < 0)
      cout << "x is negative";
    else
      cout << "x is 0";
	--
	cpptut1-p34,p35
	}}}
The while loop
{{{
    while (expression [is true]) statement
      .
      .
    #include <iostream>
    using namespace std;
      .
    int main ()
    {
      int n;
      cout << "Enter the starting number > ";
      cin >> n;
         .
      while (n>0) {
        cout << n << ", ";
        --n;
      }
         .
      cout << "FIRE!\n";
      return 0;
    }
	--
	cpptut1-p35
	}}}
do-while loop example (*)
{{{
    number echoer
      .
    The do-while loop is usually used when the condition that has to determine the end of the loop is determined within the loop statement itself, like in the previous case, where the user input within the block is what is used to determine if the loop has to end.
	--
	cpptut1-p36
	}}}
The for loop format
{{{
    for (initialization; condition; increase) statement;
      .
    // countdown using a for loop
      .
    #include <iostream>
    using namespace std;
    int main ()
    {
      for (int n=10; n>0; n--) {
        cout << n << ", ";
      }
      cout << "FIRE!\n";
      return 0;
    }
      .
      .
    For example we could write: for (;n<10;) if we wanted to specify no initialization and no increase; or for (;n<10;n++) if we wanted to include an increase field but no initialization
    using the comma operator (,) (=expression separator) we can specify more than one expression in any of the fields included in a for loop,
       suppose that we wanted to initialize more than one variable in our loop:
    for ( n=0, i=100 ; n!=i ; n++, i-- )
    {
      ....
    }
	--
	cpptut1-p36
	}}}
          ----

          ----
te: Jump statements.
{{{
	eg. break
	--
	cpptut1-p38
	}}}
The continue statement
{{{
    causing the program to jump to the start of the next|following iteration.
	--
	cpptut1-p38
	}}}
The goto statement
{{{
    allows to make an absolute jump to another point in the program.
    The destination point is identified by a label, which is then used as an argument for the goto statement. A label is made of a valid identifier followed by a colon (:).
	--
	cpptut1-p38
	}}}
exit
{{{
    is a function defined in the cstdlib library.  The purpose of exit is to terminate the current program with a specific exit code. Its prototype is: void exit (int exitcode);
    0 generally means execution success
	--
	cpptut1-p39
	}}}
The selective structure: switch.
{{{
	see more
	--
	cpptut1-p39
	}}}
The switch statement is a bit peculiar within the C++ language because
{{{
    it uses labels instead of blocks.
	--
	cpptut1-p40
	}}}
+If you need to check ranges or values that are not constants,
{{{
    use a concatenation of if and else if statements.
	--
	cpptut1-p40
	}}}
8
{{{
	
	--
	cpptut1-p41
	}}}
9
{{{
	
	--
	cpptut1-p41
	}}}
    ----

    ----
1
{{{
	
	--
	cpptut1-p41
	}}}
2
{{{
	
	--
	cpptut1-p41
	}}}


Functions I **  p41
  +its relat. to main *
void functions (+calling)  p45
by val.||by ref. (=pointers)  p47
param. default val.s  p48
overloaded functions  p50
inline functions  p50
 recursive use of functions  p50
 (Declaring Function Prototypes **)  p52  #+to place where
--
Arrays  p54   int billy[5];
 initialize array
 int billy[5] = { 16, 2, 77, 40, 12071 };
access val.s of an array  p55
Multidim. Arrays  p56
 int jimmy[3][5];  p56
array as parameters (to a function)  p58
--
char. sequences =The String-Class  p60
Pointers *  p63   reference &  dereference * @
declaring pointer variables  p65
  pointers and arrays  p67
initialize pointers  p68
Pointer Arithm.  p69
 pointers to pointers,  void pointers (*)  p71
null pointers, pointers to functions  p72
 Dynamic Memory  new new[]  p74
delete delete[]  (=pointers|memory(??))  p75
 malloc etc  p76
--
Data Structures (=Structs)  p77 *(*)
pointers to structures  p79
nesting structures  p81   -> (??)
--
 other data types  (typedef)  p82
unions *  p82
anonymous unions  p83
Enums  p84
-- --
Classes I  p86
constructors and destructors  p88
 overloading constructors  p90
 Default Constructor  p91
 pointers to classes  p92
 classes defined w. struct and union  p93
--
Classes II  Overloading Operators  p95
 the keyword this (**)  p97
static members  p98
--
Friendship and Inheritance  p100   friend functions
friend classes  p101
 inheritance between classes  p101
(inheritance from the base class  p104)
Multiple Inheritance  p105
--
Polymorphism  p107
 pointers to base classes
Virtual members  p108
Abstract base classes  p109
-- --
Templates,  function templates  p113
class templates  p116
Template specialization  p117
 non-type parameters for templates  p118
Templates and multiple-file projects  p119
--
Namespaces  p120
using
namespace alias  p122
Namespace std
--
Exceptions  p123
 exception specifications  p124
standard exceptions
 --
Type Casting
implicit | explicit conversion  p127
dynamic_cast
static_cast
reinterpret_cast
const_cast
typeid  p131
--
Preprocessor Directives  p133
macro definitions (#define, #undef)
Conditional inclusions (#ifdef, #ifndef, #if, #endif, #else and #elif)  p134
line control (#line)  p135
#error (=directive)
#include ****(!!)  (=source file inclusion)
Pragma directive  (#pragma)
predefined macro names ( __LINE__  File Date Time  ...)
--
Input/Output w. Files  p138
open a file **!(!)
closing a file  p140
text files (**)   iostream, fstream**
checking state flags  p141
 get and put stream pointers
  tellg() tellp()  seekg() seekp()
Binary files
buffers and synchronization


  ___Freec01_h5c3 **

	----
1
{{{
	
	--
	freec01-p14
	}}}
2
{{{
	
	--
	freec01-p14
	}}}



  ___JDir14

	----
fråga i två dialogrutor: =hur många dagar man vill hyra bil  samt hur mycket det kostar per dag.  (+beräkna den totala kostnaden och visa den i en tredje dialogruta.
{{{
    import static javax.swing.JOptionPane.*;
      .
    public class BilHyra {
      public static void main (String[] arg) {
        int antalDagar;
        double dagsPris;
        double totPris;
        String indata;
        indata = showInputDialog("Antal dagar?");
        antalDagar = Integer.parseInt(indata);
        indata = showInputDialog("Pris per dag?");
        dagsPris = Double.parseDouble(indata);
        totPris = dagsPris * antalDagar;
        showMessageDialog(null, "Totalt pris: " + totPris);
      }
    }
	--
	jdir14-p30
	}}}
fyra variabler (i programmet bilhyra)
{{{
    antalDagar, dagsPris, totPris och indata.
	--
	jdir14-p30
	}}}
"vanliga" tal som kan innehålla decimaldel
{{{
    reella tal
	--
	jdir14-p30
	}}}
typomvandla svaret (t.ex. 3) i var antalDagar (=fr. string till int) *
{{{
    antalDagar = Integer.parseInt(indata);
	--
	jdir14-p30
	}}}
omvandla "475.50" till ett numeriskt värde av lämpl. typ
{{{
    dagsPris = Double.parseDouble(indata);
	--
	jdir14-p30
	}}}
Till varje standardtyp finns ____ som innehåller hjälpmedel för att hantera värden av den typen.
{{{
    en motsvarande klass som t.ex. Integer och Double
     = Metoderna parseInt och parseDouble är exempel på sådana hjälpmedel.
	--
	jdir14-p30
	}}}
beräkna totPris för progr. bilhyra
{{{
    totPris = dagsPris * antalDagar;
	--
	jdir14-p30
	}}}
Resultatet (av beräkn.) visas  i en dialogruta  (+textsammanslagning)
{{{
    showMessageDialog(null, "Totalt pris: " + totPris);
      // + implicit typomvandling till text
	--
	jdir14-p30
	}}}
när man adderar ett tal till text *
{{{
	= talet omvandlas automatiskt till text
	--
	jdir14-p30
	}}}
    ----

    ----
progr: pris * enheter  (+rabatt om handlat över viss summa)
{{{
    import static javax.swing.JOptionPane.*;
    public class Pris {
      h@ public static void main (String[] arg) {
        String indata;
        indata = showInputDialog("Antal?");
        int antal = Integer.parseInt(indata);
        indata = showInputDialog("Pris per styck?");
        double perSt = Double.parseDouble(indata);
        double pris = perSt * antal;
        double rabatt;
        if (pris > 1000) {
          rabatt = pris * 0.10;
          pris   = pris - rabatt;
        }
        showMessageDialog(null, "Totalt pris: " + pris);
      }
    }
	--
	jdir14-p33
	}}}
if-test *: Om pris lägre än 1000 **
{{{
	if (pris > 1000) {
	  rabatt = pris * 0.10;
	  pris   = pris - rabatt;
	}
	--
	jdir14-p33
	}}}
initiera variabler direkt i deklarationen. *
{{{
    int antal = Integer.parseInt(indata);
	--
	jdir14-p33
	}}}
te: variabel initierad inne i en metod *
{{{
    en s.k. lokal variabel),
	--
	jdir14-p33
	}}}
lokal variabel med ej definierat värde innehåller
{{{
    ett odefinierat skräpvärde.
	--
	jdir14-p34
	}}}
Man kan ha ____(=antal) satser innanför klamrarna i en if-sats.
{{{
    = hur många satser som helst
	--
	jdir14-p34
	}}}
if-sats m. else-del *
{{{
    if (pris > 1000) {
      rabatt = pris * 0.10;
      pris   = pris - rabatt;
    }
    else
      showMessageDialog(null, "Ingen rabatt, tyvärr");
	--
	jdir14-p34
	}}}
showMessageDialog(null,
{{{
    ??	
	--
	jdir14-p34
	}}}
Notera speciellt att när klamrar finns med runt satserna efter if(, så)
{{{
    skall det inte stå något semikolon framför else,
    men när klamrar saknas skall det finnas ett semikolon.
	--
	jdir14-p34
	}}}
    ----

    ----
1
{{{
	
	--
	jdir14-p35
	}}}
2
{{{
	
	--
	jdir14-p35
	}}}



__R

	----
exit R
{{{
    q()
	--
	r01-p1
	}}}
.RData
{{{
	an installation file to save along in your statistics directory
	--
	r01-p1
	}}}
'5' at the interactive prompt
{{{
	returns the value 5
	--
	r01-p1
	}}}
4
{{{
	
	--
	r01-p1
	}}}




__haskly

	----
great place to ask questions if you're feeling stuck.
{{{
    The channel #haskell on the freenode network
	--
	-p
	}}}
In imperative languages you get things done by
{{{
    giving the computer a sequence of tasks and then it executes them.
	--
	-p
	}}}
In purely functional programming you don't tell the computer what to do as such but rather
{{{
    you tell it what stuff is.
	--
	-p
	}}}
examples of this 'what things is' paradigm
{{{
    The factorial of a number is the product of all the numbers from 1 to that number, the sum of a list of numbers is the first number plus the sum of all the other numbers, and so on.
    You express that in the form of functions.
	--
	-p
	}}}
You also can't set a variable to something and then set it to something else later.
{{{
    = If you say that a is 5, you can't say it's something else later because you just said it was 5.
    So in purely functional languages, a function has no side-effects.
	--
	-p
	}}}
if a function is called twice with the same parameters, it's guaranteed to return the same result.  That's called
{{{
    referential transparency
      .
    and not only does it allow the compiler to reason about the program's behavior, but it also allows you to easily deduce (and even prove) that a function is correct
    and then build more complex functions by gluing simple functions together.
	--
	-p
	}}}
lazy
{{{
    Haskell is lazy. That means that unless specifically told otherwise, Haskell won't execute functions and calculate things until it's really forced to show you a result.
        That goes well with referential transparency and it allows you to think of programs as a series of transformations on data.
        It also allows cool things such as infinite data structures.
	--
	-p
	}}}
Haskell is ____ typed.
{{{
    statically
    When you compile your program, the compiler knows which piece of code is a number, which is a string and so on.
    That means that a lot of possible errors are caught at compile time.
	--
	-p
	}}}
If you say a = 5 + 4 (=how to specify the types of variables) *
{{{
    it can figure that out by itself (=via type inference)
	--
	-p
	}}}
    ----

    ----
Haskell is elegant and concise.
{{{
    Because it uses a lot of high level concepts, Haskell programs are usually shorter than their imperative equivalents.
	--
	-p
	}}}
What you need to dive in (=start writing programs in Haskell)
{{{
    A text editor and a Haskell compiler.
    .hs files + GHC compiler
	--
	-p
	}}}
interactively interact with scripts.
{{{
	used GHC for interactive work
     =  ghci
	--
	-p
	}}}
load functions for interactive work in ghci **
{{{
    :l myfunctions
      (=from myfunctions.hs)
	--
	-p
	}}}
reload the current script. *
{{{
	:l filename again
        //
    :r
	--
	-p
	}}}
tip: The usual workflow for me when playing around in stuff is
{{{
    defining some functions in a .hs file, loading it up and messing around with them and then changing the .hs file, loading it up again and so on.
	--
	-p
	}}}
negating numbers. If we want to have a negative number,
{{{
    it's always best to surround it with parentheses.
     =Doing 5 * -3 will make GHCI yell at you but doing 5 * (-3) will work just fine.
	--
	-p
	}}}
boolean and, boolean or, noolean not **
{{{
    &&
    ||
    not
     (=negates a True or a False)
	--
	-p
	}}}
Testing for equality *
{{{
    5 == 5
    5 /= 4  **
	--
	-p
	}}}
    ----

    ----
Note: you can do 5 + 4.0 because
{{{
    5 is sneaky and can act like an integer or a floating-point number.  4.0 can't act like an integer, so 5 is the one that has to adapt.
	--
	-p
	}}}
You may not have known it but we've been using functions now all along.  (?/*(*))
{{{
    * is a function that takes two numbers and multiplies them.
    = an infix function  (which is the most common for functions dealing with numbers)
	--
	-p
	}}}
Most functions that aren't used with numbers are
{{{
    prefix functions.
	--
	-p
	}}}
In Haskell, functions are called by **(*) **
{{{
    writing the function name, a space and then the parameters, separated by spaces.
    ghci> succ 8 9
    ghci> min 3.4 3.2 3.2
	--
	-p
	}}}
has the highest precedence of them all.
{{{
    Function application
    ghci> succ 9 + max 5 4 + 1 16
    ghci> (succ 9) + (max 5 4) + 1 16
      (= same thing)
	--
	-p
	}}}
get the successor of the product of numbers 9 and 10, (!!)
{{{
    succ (9 * 10)
	--
	-p
	}}}
If a function takes two parameters, we can also call it as an infix function by *
{{{
    surrounding it with backticks.
    92 `div` 10
      (= clearer than div 92 10)
	--
	-p
	}}}
bar (bar 3)
{{{
    = It means that we first call the function bar with 3 as the parameter to get some number and then we call bar again with that number.
	--
	-p
	}}}
def. funct. that adds  = x + x **(*) **
{{{
    doubleMe x = x + x
    Save this as baby.hs or something.
    Now navigate to where it's saved and run ghci from there.  Once inside GHCI, do :l baby. Now that our script is loaded, we can play with the function that we defined.
    [1 of 1] Compiling Main ( baby.hs, interpreted ) Ok, modules loaded: Main.
	--
	-p
	}}}
    ----

    ----
make a function that takes two numbers and multiplies each by two and then adds them together.
{{{
    doubleUs x y = x*2 + y*2
	--
	-p
	}}}
doubleUs x y = doubleMe x + doubleMe y
{{{
    This is a very simple example of a common pattern you will see throughout Haskell. Making basic functions that are obviously correct and then combining them into more complex functions.
    This way you also avoid repetition.
	--
	-p
	}}}
Functions in Haskell don't have to be in any particular order, so it doesn't matter if you define doubleMe first and then doubleUs or if you do it the other way around.
{{{
    = ??
	--
	-p
	}}}
make a function that multiplies a number by 2 but only if that number is smaller than or equal to 100 **
{{{
    doubleSmallNumber x = if x > 100 then x else x*2
	--
	-p
	}}}
The difference between Haskell's if statement and if statements in imperative languages is that *
{{{
    the else part is mandatory in Haskell.
      = In imperative languages you can just skip a couple of steps if the condition isn't satisfied
      but in Haskell every expression and function must return something.
    Another thing about the if statement in Haskell is that it is an expression.
	--
	-p
	}}}
is 5 an expression?
{{{
    5 is an expression because it returns 5,
    4 + 8 is an expression,
    x + y is an expression because it returns the sum of x and y.
      .
    Because the else is mandatory, an if statement will always return something and that's why it's an expression.
	--
	-p
	}}}
Note the ' at the end of the function name. *
{{{
    That apostrophe doesn't have any special meaning in Haskell's syntax.
    We usually use ' to either denote a strict version of a function (one that isn't lazy) or a slightly modified version of a function or a variable.
	--
	-p
	}}}
conanO'Brien (= in the function name we didn't capitalize Conan's name.
{{{
    That's because functions can't begin with uppercase letters.
	--
	-p
	}}}
When a function doesn't take any parameters, we usually say it's a *
{{{
    definition (or a name).
	--
	-p
	}}}
    ----

    ----
the most used data structure ( it can be used in a multitude of different ways to model and solve a whole bunch of problems.
{{{
    Lists
	--
	-p
	}}}
In this section we'll look at (= concerning lists) *
{{{
    the basics of lists,
    strings (which are lists) and
    list comprehensions.
	--
	-p
	}}}
In Haskell, lists are *
{{{
    a homogenous data structure.
    = It stores several elements of the same type.
	--
	-p
	}}}
Doing let a = 1 inside GHCI (!!)
{{{
    is the equivalent of writing a = 1 in a script and then loading it.
	--
	-p
	}}}
Define a list in ghci *
{{{
    ghci> let lostNumbers = [4,8,15,16,23,42]
    ghci> [4,8,15,16,23,42]
	--
	-p
	}}}
strings are
{{{
    just lists of characters.
      =  "hello" is just syntactic sugar for ['h','e','l','l','o'].
	--
	-p
	}}}
putting two lists together. **(*)
{{{
    using the ++ operator.
    [1,2,3,4] ++ [9,10,11,12]
      ..
    Even if you're adding an element to the end of a list with ++, you have to surround it with square brackets so it becomes a list.
	--
	-p
	}}}
adding the strings 'hello' and 'world' // 'wo' + 'ot'  **
{{{
    "hello" ++ " " ++ "world" "hello world"
    ['w','o'] ++ ['o','t']
	--
	-p
	}}}
tip: Watch out when repeatedly using the ++ operator on long strings.
{{{
    '(even if you append a singleton list to a list,
       (= if the first list is really long
	--
	-p
	}}}
    ----

    ----
putting something at the beginning of a list (= instantaneous.) **
{{{
    using the : operator (also called the cons operator)
    ghci> 'A':" SMALL CAT"
    ghci> 5:[1,2,3,4,5]
      .
    (= takes a number and a list of numbers or a character and a list of characters,
	--
	-p
	}}}
( [1,2,3] is actually just syntactic sugar for
{{{
    1:2:3:[]
	--
	-p
	}}}
get an element out of a list by index **
{{{
    ghci> "Steve Buscemi" !! 6
      'B'
	--
	-p
	}}}
____ can also contain lists.
{{{
    = Lists can also contain lists.
	--
	-p
	}}}
Lists can be compared if *
{{{
    the stuff they contain can be compared.
    When using <, <=, > and >= to compare lists,
       they are compared in lexicographical order.
    ghci> [3,2,1] > [2,1,0] True
	--
	-p
	}}}
take a list and return its head.
{{{
    ghci> head [5,4,3,2,1]
      5
	--
	-p
	}}}
7
{{{
    
	--
	-p
	}}}



__haskmueut

Basic Principles of Programming
Computation by Calculation

	----
Thus the first step in programming is answering the question,
{{{
    “What problem am I trying to solve?” Once the problem is understood, a solution must be found.
	--
	haskmueut-p22
	}}}
one may discover several solutions, so a way to measure success is needed.
{{{
    There are various dimensions in which to do this, including correctness (“Will I get the right answer?”) and efficiency (“Will it run fast enough, or use too much memory?”).
	--
	haskmueut-p22
	}}}
'what a program means.' = 'The execution of Haskell programs is perhaps best understood as
{{{
    computation by calculation.
    Programs in Haskell can be viewed as functions whose input is that of the problem being solved, and whose output is the desired result—
	--
	haskmueut-p23
	}}}
    ----

    ----
defining a function to perform (a calculation) for any numbers x , y, and z **(!)
{{{
    simple x y z = x ∗ (y + z )
	--
	haskmueut-p25
	}}}
[[In mathematical notation this definition(=the fn 'simple') might be written differently,
{{{
    simple(x, y, z) = x × (y + z)
    simple(x, y, z) = x · (y + z)
    simple(x, y, z) = x(y + z)
	--
	haskmueut-p25
	}}}
call the function 'simple' **
{{{
    simple 3 9 5
	--
	haskmueut-p25
	}}}
unfolding a function definition: (!)
{{{
    3 is substituted for x , 9 for y, and 5 for z on the right-hand side of the definition of simple.
	--
	haskmueut-p25
	}}}
'evaluates to' (=in the function context)
{{{
    simple 3 9 5 is said to evaluate to 42.
	--
	haskmueut-p25
	}}}
“simple 3 9 5 evaluates to 42.”
{{{
    simple 3 9 5 =⇒ 42
	--
	haskmueut-p25
	}}}
    ----

    ----
'One can also use calculation to (!!)
{{{
    prove properties about programs.
        For example, it should be clear that for any a, b, and c, simple a b c should yield the same result as simple a c b.
        For a proof of this, one calculates symbolically; that is, using the symbols a, b, and c rather than concrete numbers such as 3, 5,and 9:
      .
    simple a b c
    ⇒ a ∗ (b + c)
    ⇒ a ∗ (c + b)
    ⇒ simple a c b
	--
	haskmueut-p25
	}}}
((formal direction +'might perform them before a program is run if it thinks that it might make the program run faster).
{{{
	  .
      .
    (+commutativity
	--
	haskmueut-p26
	}}}
(te: 'a fold calculation.
{{{
    = 'for proving properties about programs, such “backward reasoning” is quite important.
	--
	haskmueut-p26
	}}}
(((When one wishes to make the justification for each step clearer, whether symbolic or concrete, a calculation can be annotated with more detail, as in:
{{{
    simple a b c
    ⇒ {unfold }
    a ∗ (b + c)
    ⇒ {commutativity }
    a ∗ (c + b)
    ⇒ {fold }
    simple a c b
	--
	haskmueut-p26
	}}}
([[Proving properties of programs is another theme that will be repeated often in this text.
{{{
    = 'Computer music applications often have some kind of a mathematical basis, and that mathematics must be reflected somewhere in your program.
	--
	haskmueut-p26
	}}}
'But how do you know that you got it right?  '= the properties of y. programs
{{{
    Proof by calculation is one way to connect the problem specification with the program solution.
        Proving complex properties of large, complex programs is not easy—and rarely if ever done in practice—but that should not deter you from proving simpler properties of the whole system,
        or complex properties of parts of the system, since such proofs may uncover errors, and if not, at least give you confidence in your effort.
	--
	haskmueut-p26
	}}}
the idea of computing everything by calculation may seem odd at best, and naı̈ve at worst. (!)
{{{
    How does one write to a file, play a sound, draw a picture, or respond to mouse-clicks?
	--
	haskmueut-p27
	}}}
([[Exercise 1.1 Write out all of the steps in the calculation of the value of simple (simple 2 3 4) 5 6
{{{
	--
	haskmueut-p27
	}}}
([[Exercise 1.2 Prove by calculation that simple (a − b) a b =⇒ a2 − b2.
{{{
	--
	haskmueut-p27
	}}}
    ----

    ----
Expressions and Values **
{{{
    In Haskell, the entities on which calculations are performed are called expressions,
    and the entities that result from a calculation—i.e. “the answers”— are called values.
        (+ 'It is helpful to think of a value just as an expression on which no more calculation can be carried out—
	--
	haskmueut-p27
	}}}
Examples of expressions include (!)
{{{
    atomic (meaning, indivisible) values such as the integer 42 and the character ’a’, which are examples of two primitive atomic values.
        + The next chapter introduces examples of userdefined atomic values, such as the musical note names C , Cs, Df , etc., which in music notation (....)
	--
	haskmueut-p28
	}}}
In addition, there are structured expressions (i.e., **
{{{
    made from smaller pieces) such as the list of pitches [C , Cs, Df ], the character/number pair (’b’, 4)
        (lists and pairs are different in a subtle way, to be described later),
    and the string "Euterpea".
	--
	haskmueut-p28
	}}}
what is it that also makes the structured expressions [C , Cs, Df ] and (’b’, 4) values [***(!)]
{{{
    Each of these structured expressions is also a value, since by themselves there is no further calculation that can be carried out.
    + 'As another example, 1 + 2 is an expression, and one step of calculation yields the expression 3, which is a value, since no more calculations can be performed.
	--
	haskmueut-p28
	}}}
((Sometimes, however, an expression has only a never-ending sequence of calculations.
{{{
    'For example, if x is defined as: x =x +1
	--
	haskmueut-p28
	}}}
(expressions that) result in a never-ending sequence of calculations. (=are said to ___  + notated by the symbol __)  (!!)
{{{
    said to not terminate, or diverge.
    +  the symbol ⊥
	--
	haskmueut-p28
	}}}
name|pronounc. of symbol ⊥ (!)
{{{
    pronounced “bottom,”
    used to denote values of non-terminating expressions(!)
      --
    +(!) 'This means that every diverging computation in Haskell denotes the same bottom value,
        (= 'reflecting the fact that, from an observer’s point of view, there is nothing to distinguish one diverging computation from another.
	--
	haskmueut-p28
	}}}
    ----

types

    ----
simple description of types *
{{{
    One can think of types as sets of expressions (or values),
        in which members of the same set have much in common.
	--
	haskmueut-p29
	}}}
examples of types (!)
{{{
    Examples include the primitive atomic types Integer (the set of all integers)
    and Char (the set of all characters),
    the user-defined atomic type PitchClass (the set of all pitch classes, i.e. note names),
    as well as the structured types [Integer ] and [PitchClass ]
    (the sets of all lists of integers and lists of pitch classes, respectively),
    and String (the set of all Haskell strings).
	--
	haskmueut-p29
	}}}
Ex. Type Signatures (*)
{{{
    Cs :: PitchClass
    42 :: Integer
    ’a’ :: Char
    "Euterpea" :: String
    [C , Cs, Df ] :: [PitchClass ]
    (’b’, 4) :: (Char , Integer )
	--
	haskmueut-p29
	}}}
a type signature  is (!)
{{{
    association of an expression with its type (= only in t.s.expressions??)
        +(!!) Details: Note that the names of specific types are capitalized, such as Integer and Char , but the names of values are not, such as simple and x .
        + test, teSt, and tEST are all distinct names for values, as are Test , TeST , and TEST for types.
	--
	haskmueut-p29
	}}}
chars | strings (**)
{{{
    Literal characters are written enclosed in single forward quotes (apostrophes), as in ’a’, ’A’, ’b’, ’,’, ’!’, ’ ’ (a space), and so on.  + (There are some exceptions,
	--
	haskmueut-p30
	}}}
The “::” should be read
{{{
    “has type,” as in “42 has type Integer
	--
	haskmueut-p30
	}}}
    ----

    ----
spec.ing the list | pair type (!!)
{{{
    Note that square braces are used both to construct a list value (the left-hand side of (::) above), and to describe its type (the right-hand side above).
    Analogously, the round braces used for pairs are used in the same way.
	--
	haskmueut-p30
	}}}
types of the items contained in a list or pair (**(*))(!!)
{{{
    all of the elements in a list, however long, must have the same type, whereas the elements of a pair can have different types.
	--
	haskmueut-p30
	}}}
the type system: =ex. of an ill-typed.  expression (*)
{{{
    it does not make much sense to add together two characters, so the expression ’a’+’b’ is ill-typed.
        (= H. will tell you if your program is well-typed before you run it. This is a big advantage, since most programming errors are manifested as type errors.
	--
	haskmueut-p30
	}}}
Specidy  function (that) takes values of one type—T1 , say—as input, and returns values of (possibly) some other type—T2 , say—as output. ** **
{{{
    In Haskell this is written T1 → T2 ,
     --
    If there is more than one argument, the notation is extended with more arrows.
	--
	haskmueut-p30
	}}}
a function taking one input type and returning another is said to ____
{{{
	
	--
	haskmueut-p30
	}}}
Define both input and output types for fn simple to be integer *(*)
{{{
    simple :: Integer → Integer → Integer → Integer
    simple x y z = x ∗ (y + z )
	--
	haskmueut-p30
	}}}
    ----

    ----
([on explicitly specifying types of functions for a planned system ((!))
{{{
    good habit to first write down the type of each function you are planning to define, as a first approximation to its full specification—a way to grasp its overall functionality before delving into its details.
	--
	haskmueut-p31
	}}}
The normal use of a function is referred to as
{{{
    function application.
        For example, simple 3 9 5 is the application of the function simple to the arguments 3, 9, and 5.
	--
	haskmueut-p31
	}}}
Details: Infix functions(= like plus) are often called *  (+are disting. by,  +1 exception)
{{{
    operators
        + distinguished by the fact that they do not contain any numbers or letters of the alphabet.
    Thus ˆ!  and ∗# : are infix operators, whereas thisIsAFunction and f9g are not
      .
    ((Note: only exception is ' ))
    f' and ' are valid names, but not operators.
	--
	haskmueut-p31
	}}}
when referring to an infix operator as a value, (!)**
{{{
    = enclosed in parentheses, such as when declaring its type,
    (+) :: Integer → Integer → Integer
	--
	haskmueut-p31
	}}}
understand an expression such as f x + g y **(!)
{{{
    function application always has “higher precedence” than operator application, so that f x + g y is the same as (f x ) + (g y).  **
    
	--
	haskmueut-p31
	}}}
    ----

abstraction, naming (etc)

    ----
example of abstraction in programming
{{{
    In programming this is done when a repeating pattern of some sort occurs, and one wishes to “separate” that pattern from the “particular instances” in which it appears.
	--
	haskmueut-p32
	}}}
associate the name pi with the number 3.141592653589793 **(*)
{{{
    pi :: Double
    pi = 3.141592653589793
	--
	haskmueut-p32
	}}}
pitch class A in the fourth octave. **
{{{
    in Euterpea one simply writes (A, 4)
        (= “concert A”
	--
	haskmueut-p32
	}}}
+define concert A and A 440 as vars ((!!())
{{{
    concertA, a440 :: (PitchClass, Octave)
    concertA = (A, 4) -- concert A
    a440 = (A, 4) -- A440
      .
    note! several different names can be given to the same value— (*)
	--
	haskmueut-p32
	}}}
nested + multiline comments (!)
{{{
    {-this is a comment -}
	--
	haskmueut-p32
	}}}
set type signatures for two vars (=in one single expression)  (*)
{{{
    concertA, a440 :: (PitchClass, Octave)
    [[+ 'two names having the same type can be combined into the same type signature, separated by a comma. (????)
	--
	haskmueut-p33
	}}}
    ----

    ----
_ to the pow. of
{{{
    x :: Float
    x = f (pi ∗ r ∗∗ 2) + g (pi ∗ r ∗∗ 2)
	--
	haskmueut-p34
	}}}
“hide” def. of 'area' w.in the def. of x (= if will not be used anywhere else) [**]  ((= make local enclosed function)) (*)
{{{
    = 'This will avoid cluttering up the namespace, and prevents area from clashing with some other value named area.
    let expression:
    x = let area = pi ∗ r ∗∗ 2
        in f area + g area
    --
    mel :: Music Pitch
    mel = let hNote d p = note d p :=: note d (trans (−3) p)
          in hNote qn p1 :+: hNote qn p2 :+: hNote qn p3
	--
	haskmueut-p35,p38
	}}}
Details: An equation such as c = 42 is called **(*)!
{{{
    a binding
	--
	haskmueut-p35
	}}}
another way of saying you cannot rename variables in Haskell (**(*))
{{{
    never to give more than one binding for the same name
      .
    a = 42
    a = 43
	--
	haskmueut-p35
	}}}
music value that represents the playing of m1 and m2: following | simultaneously (**)
{{{
    m1 :+: m2
        m1 followed by m2
    m1 :=: m2
        m1 and m2 simult.
	
	--
	haskmueut-p36
	}}}
    ----

    ----
harmonize the melody  note qn p1 :+: note qn p2 :+: note qn p3
{{{
    mel = (note qn p1 :=: note qn (trans (−3) p1 )) :+:
          (note qn p2 :=: note qn (trans (−3) p2 )) :+:
          (note qn p3 :=: note qn (trans (−3) p3 ))
	--
	haskmueut-p37
	}}}
define function to harmonize notes ** (!)
{{{
    hNote :: Dur → Pitch → Music Pitch
    hNote d p = note d p :=: note d (trans (−3) p)
      .
      (plus the thought process of how to abstract this from the previous example) **
	--
	haskmueut-p37
	}}}
(+Define mel as three applications of the function hNote)
{{{
    mel :: Music Pitch
    mel = hNote qn p1 :+: hNote qn p2 :+: hNote qn p3
	--
	haskmueut-p37
	}}}
(('Again using the idea of unfolding described earlier in this chapter, it is easy to prove that this definition is equivalent to the previous one.
{{{
	 (??)
	--
	haskmueut-p37
	}}}
[hNote as functional abstraction (+can be seen as a generalization of naming)]
{{{
    area r1 is just a name for pi ∗ r1 ∗∗ 2, hNote d p1 is just a name for note d p1 :=: note d (trans (−3) p1 ), and so on.
	--
	haskmueut-p37
	}}}
Stated another way, named quantities such as area, pi, concertA, and a440 defined earlier can be thought of as
{{{
    functions with no arguments.
	--
	haskmueut-p37
	}}}
    ----

    ----
one form of data abstraction (= using a data structure to be able to take var num. of notes for fn) (**(!))
{{{
    using a list
	--
	haskmueut-p38
	}}}
add a single element x to the front of a list of pitch classes 'xs' (whose type is [PitchClass ] ) **(**)
{{{
    x : xs
        = equivalent to C : (Cs : (Df : [ ])), which can also be written C : Cs : Df : [ ] since the infix operator (:) is right associative.
	--
	haskmueut-p38
	}}}
a+b+c: 'in situations where the (associativity)parentheses are left out it’s usually the case that the operator is mathematically associative, meaning
{{{
    that it doesn’t matter which interpretation is chosen.
        = (a+b)+c (in which case + would be “left associative”) or a+(b+c)
	--
	haskmueut-p39
	}}}
2 ∗ a + b is interpreted as ____ in Haskell.
{{{
    (2 ∗ a) + b
	--
	haskmueut-p39
	}}}
[[Returning now to the problem of defining a function (call it hList) to turn a list of pitches into a sequential composition of harmonized notes, one should first express what its type should be:
{{{
    hList :: Dur → [Pitch ] → Music Pitch
      .
    To define its proper behavior, it is helpful to consider, one by one, all possible cases that could arise on the input.
    hList d [ ] = rest 0
      .
    hList d (p : ps) = hNote d p :+: hList d ps
    Note that this part of the definition of hList is recursive—it refers to itself!
      .
      .
    hList :: Dur → [Pitch ] → Music Pitch
    hList d [ ]      = rest 0
    hList d (p : ps) = hNote d p :+: hList d ps
	--
	haskmueut-p39,p40
	}}}
basic hs. pattern matching
{{{
    ([] only matches the empty list, and p : ps will successfully match any list with at least one element, while naming the first element p and the rest of the list ps).
        If the match succeeds, the right-hand side (=w. a function) is evaluated and returned as the result of the application.
    [+ If it fails, the next equation is tried, and if all equations fail, an error results.
      (++)
	--
	haskmueut-p40
	}}}
Given this(??) definition of hList the definition of mel can be rewritten as: (????)
{{{
    mel = hList qn [p1, p2, p3] (??)
        + 'One can prove that this definition is equivalent to the old via calculation: (??)
	--
	haskmueut-p40,p41
	}}}
Haskell's resources in regard to lists (!)
{{{
    Lists are perhaps the most commonly used data structure in Haskell, and there is a rich library of functions that operate on them. (**)
	--
	haskmueut-p41
	}}}
    ----

    ----
Haskell Equality vs. Euterpean Equality
{{{
	
	--
	haskmueut-p41
	}}}
2
{{{
	
	--
	haskmueut-p41
	}}}



___lpy3_1condens


Learn Python 3 **!

paper-notes page 1 - - - -

packaging programs  @@!
{{{
	progr.pyc  /  frozen binary (=bytecode of proj. + PVM)
	}}}
use etc. of frozen binaries  @@!
{{{
	- readily distributable gui-programs
    - web
        etc
	}}}
stopping/interrupting command-line py-prompt  @@!
{{{
	c-d (unix)  c-z (windows)
	}}}
import (+test) module/file: eg. "pwd" (=at interactive prompt) **!  @@!
{{{
	import os
	os.getcwd()  #lpy p103+
	}}}
run shell commands etc from python (=python's commandline)  @@!
{{{
	os.system
	}}}
    ----
	----
remember: =why one must use print statements in files
{{{
	=expression results are not automatically echoed (*)
	}}}
py-path on unix  @@t
{{{
	/usr/bin/python3  (or eg. /usr/local/bin/python )
	}}}

(tip: interactive prompt + indentation)  @!
{{{
	(=no indentation needed at interactive prompt (except of course for nested code(??)))
	}}}
break out of statements at command line  @@!
{{{
	c-c  #=interrupt
	}}}
print os/platform (*)  @@!
{{{
	import sys
	print(sys.platform)
	}}}
when must(!) files be named .py?  @!t
{{{
	=files for importing
	}}}
python-scripts as executable scripts on unix **  @@!
{{{
	#!/usr/bin/python3
	#!/usr/bin/env python3
	}}}
    ----
	----
(minitrick for portable scripts between unix and windows)  @@!
{{{
	python script.py  (**)
	}}}

run python on mac (??)  @
{{{
	PythonLauncher (in MacPython)
	}}}
location of generated pyc-files in py 3.2+  @@!
{{{
	__pychache__ dir in proj. dir
	}}}
Read + Return next Line fr. Stdin (like unix read) ***(*)  @@!
{{{
	py 2: raw_input()
	py 3: input()
	}}}
read fr. stdin + prompt-string ***(*)  (like 'read -p')  @@!
{{{
	input("Press Enter!")
	}}}
save std-input fr. reader in var. **!  @@!
{{{
	nextinput = input()
	}}}
example w. stdin + unix input redirection (**)  @!
{{{
	python reader.py < input.txt  p117
	}}}
    ----
	----
wh. to allow clickstart for programs (!)  @@!
{{{
	wh. debugged + error redirected to file (eg. log file)
	}}}
design of program w. modules  (@@(@)*)  @@!
{{{
	=one main/top level file/script (=that starts/launches the progr.)
	}}}
run script again (=in session)  (?)  @@!
{{{
	from imp import reload
	reload(script1)
	}}}

teterm: the function/use of modules **!  @@!
{{{
	as a package of var.names (=attributes)  #=known as a name space
	}}}
teterm: def. of 'attribute' (*)
{{{
	a var-name attached to a specific obj. (**)  #='like a module'
	}}}
the two ways to import var. 'title' from "myfile" (p121)
{{{
	import myfile
	myfile.title  #echoes 'the meaning of life'

	from myfile import title
	title  # --"--

	}}}
what does 'from' do?
{{{
	copies module's var.s  =becomes simple var.s in the recipient
	}}}
echo list of all var.s/names(*) avail. inside a module ****!!!  (eg. an imported one)  @@ @@!!
{{{
	dir(module)  #=gives builtins à la __doc__ + ordinary var.s
	}}}
	popular testing technique in py-classes **
{{{
	using imports and reloads
	}}}
    ----
	----
(example use of exec)
{{{
	exec(open('script1.py').read())
	}}}

Python development in Eclipse
{{{
	install PyDev
	}}}
Netbeans
{{{
	+VSCode, PyCharm, Eric  etc  p132
	}}}
Debugging Python code (@@)
{{{
	insert print statements  + pdb c-line dbugger
	}}}
Launching interactive pdb-session  @@(@@)!
{{{
	by importing, or as toplevel script  (python -m)
	}}}
    ----
	----
pdb: run function(/function to run(??)) after exception occurs (=get information fr. time of the error)  *!
{{{
	'postmortem' =   pdb.pm()
	}}}
interactive mode for pdb  @@
{{{
	pdb -i
	}}}

Tools for Help and Documentation *(***)  @@@@!
{{{
	dir(), PyDoc, help
	}}}
    ----
	----
 reposit. for py-extensions (***)  @@!
{{{
	PyPi
	}}}



pylearn start =chapter 4, first intro (*!)

teterm: (approxim.) Definition of object in python ***!!  @@!
{{{
	pieces of memory w. values and sets of operations assoc. to it
	}}}
teterm: What do expressions do? ***!  @@!
{{{
	create and process objects (****)
	}}}
(Why is C/C++ progr. more tedious and error prone?) *
{{{
	most work goes into implementing objects (also known as data structures)* to represent y. components +search/access-routines etc
	}}}
explain 'the syntax used to code their literals'  (from the book  eg. like numbers) **
{{{
	=the expressions that generates those obj.s, eg. numbers
	}}}
    ----
	----
'strongly typed' (vs(??)) 'dynamically typed'
{{{
	only operations for the active type are valid  p148
	}}}
convert to string + length for string *  @@!
{{{
	str()  len() 
	}}}
'babushka'-nested function calls  **  @@!
{{{
	len(str(2 ** 100))
	}}}

repr vs str display/printing  @@!
{{{
	6.28300000004 vs. 6.283  (=in py2.7)  p150
	}}}
pi and square root (*)  @@!
{{{
	(import math)
	math.pi  math.sqrt(85)
	}}}
random nr  @@!
{{{
	import random
	random.random()
	random.choice([1,2,3])
	}}}
second char. of string in var 's' ****!!  #eg. "spam"  @@!
{{{
	s[1]
	}}}
assign string 'Spam' to var 's'  **
{{{
	s = 'Spam'
	}}}
last / sec. to last char of var. 's'  *!  @@!
{{{
	s[-1]  s[-2]
	}}}
example: arbitr. expression in indexing--square brackets ***!!!  @@!
{{{
	s[len(s)-1]
	}}}
    ----
	----
teterm: sequence  @@!
{{{
	positionally ordered collection of other objects
	}}}

slicing: get 'am' from Spam (in var 's')   @@!
{{{
	s[2:4]
	}}}
slicing: get 'pam' from Spam (in var 's')  **  @@!
{{{
	s[1:]
	}}}
slicing: get 'Sp' from Spam (in var 's')  *  @@!
{{{
	s[0:2]  s[:2]
	}}}
    ----
	----
slicing: get 'Spa' from Spam (in var 's')  **  @@!  @@!
{{{
	s[:-1]  #=all but last char
	}}}
slicing: Complete copy w. slicing  (*)  @@!
{{{
	s[:]
	}}}



p 152 ++  (!!(**))

Slicing a String Returns __  (**)
{{{
	a slice, which is a New Object (*)
	 --
	lpy3_n2-p152
	}}}
"You can't change a string in place(=immut.), but ___"  @@!
{{{
	build new string
	+ assign back to the same name
	 --
	(+= the old obj. later gets
	 cleaned up/collected by python)
			 --
			 --
	[+Can(!) actually be changed
			(=if 8 bits(ascii) or lower(!!))
	--
			- expand into list of chars,
				 change, join back w.
	 nothing between
			- use newer bytearray type
				 (=in py 2.6+)            ]
	 --
	lpy3_n2-p153,154
	}}}
Mutable and Immutable Types (in Python) (*!)  @@! !!!!
{{{
	- lists
	- dicts
	- sets
	- - - -
	- numbers
	- strings   #although can
				 actually(!) be changed
	- tuples
	 --
	lpy3_n2-p153
	}}}
Type(eg. string)specific Methods: find, replace  @@! (reformulate)
{{{
	Objects (like strings)
	 have operations (eg. methods)
	 attached to the obj.
			--
	[=triggered by
	 'call-syntax' (!*) ]
	--
	S = 'Spam'
	S.find('pa')
	S.replace('pa', 'XYZ')
			--
	lpy3_n2-p154
	}}}
(some more string methods: split, upper, alpha, rstrip)  @@! @@!
{{{
	line = 'aaa,bbb,ccccc,dd'
	line.split(',')
	 --
	S = 'spam'
	S.upper()
	S.isalpha()		# True
	 --
	line = 'aaa,bbb,ccccc,dd\n'
	line.rstrip()
				--
	+ can combine 2 operations  ***(*)
	line.rstrip().split(',')
	 --
	lpy3_n2-p155
	}}}
sneak-peak: string formatting (*(*))   + use cases/examples (**)
{{{
	 (classic / pre 2.6):
	'%s, eggs, and %s' % ('spam', 'SPAM!')
			-- --
	 newer syntax (+num.s optional
			 in later pythons:
	'{0}, eggs, and {1}'.format('spam', 'SPAM!')
	'{}, eggs, and {}'.format('spam', 'SPAM!')
				 --
	 --  good for: numeric reports (**)
	 --
	# Separators, decimal digits
	'{:,.2f}'.format(296999.2567)
				'296,999.26'
	# Digits, padding, signs
	'%.2f | %+05d' % (3.14159, −42)
				'3.14 | −0042'
	 --
	lpy3_n2-p155
	}}}
tip: generic vs type specific operations  (='Python’s toolset is layered')  @@!@@(!)
{{{
	generic operations that span
	multiple types
	show up as built-in functions
	or expressions (e.g., len(X) , X[0] ),
	 --
	but type-specific operations
	are method calls (e.g., aString.upper() ).
	 --
	lpy3_n2-p155
	}}}
    ----
	----
'Although seq.operat.s are generic...' +Tip/Rule(*)
{{{
	(=seq. operations on strings)
	 --
	=methods are not(!!) generic
	 --
	lpy3_n2-p155
	}}}

    @@@@@@@

LIST ALL METHODS + ASSIGNED VAR.S (FOR OBJECT, EG. 'S') *********** (!!)  @@!
{{{
	dir(S)
	 --  eg. output:
	['__add__', '__class__', '__contains__', '__delattr__', '__dir__', '__doc__',
	'__str__', ...... '__subclasshook__', 'capitalize', 'casefold', 'center', 'count',
	 ....
	'isalnum', 'isalpha', 'isdecimal', 'isdigit', 'isidentifier', 'islower',
	'isnumeric', 'isprintable', 'isspace', 'istitle', 'isupper', 'join', 'ljust',
	 ....
	 ....
	}}}
(pre: Use of __add__ etc (****))  @@!
{{{
	represent the implementation
			of the string object
			and are available
			to support customization.
	(=overloading of methods
	 for custom classes etc)
	--
	The __add__ method of strings, for example,
	is what really performs concatenation (**)
	 --
	lpy3_n2-p156
	}}}
LIST/SHOW HELP FOR METHOD (LIKE STRING-REPLACE) ******* (!!)  @@!
{{{
	help(S.replace)   *****
	 --
	lpy3_n2-p156
	}}}
'help is part of __'  @@!
{{{
	='a handful of interfaces
	 to a system of code that
	 ships w. python
	known as PyDoc
	--
	 (= tool for extracting documentation
			from objects (!))
	--
	++ Can render reports in html
	 =for viewing by/in web browser (**)
			 --
	lpy3_n2-p157
	}}}
dir/help + eg. str, list, dict (=Espec. for help)  @@!
{{{
	=Recommended/Often best to ask
	for a specific method
	 --
	eg. for method 'replace' on strings ****
				 help(str.replace)  ****
	--
	(=help often most(!!) complete
	 method of obtaining information) (**(!!))
			--
	lpy3_n2-p157
	}}}
    ----
	----
show ascii(etc) num for char **  @@!
{{{
	ord('\n')
	 --
	lpy3_n2-p157
	}}}
string quotes (+recommendation)
{{{
	single or double quotes
	(=most programmers prefer single-quotes)
	}}}
"""-Strings (**!)  @@!
{{{
	eg. embedding multiline strings
	like:
	- html, xml, json  (etc)
	- Commenting out Block Tempor. (**!!)
	 --
	+Py replaces the newlines in """-blocks
	 w. '\n' (**)
	 --
	lpy3_n2-p157,158
	}}}
Unicode in 3.X Strings (!!**)
{{{
	=the normal str-type
	handles unicode in Py 3.X
	--
	 (+MORE CONCERNING U-CODE (######))
			--
	lpy3_n2-p158
	}}}
(raw-strings)
{{{
	eg. turns off '\' for escaping
	(=useful for windows-path_strings)
	 --
	lpy3_n2-p158
	}}}

 (byte strings / byte array)
{{{
	b'spam'
	 --
	lpy3_n2-p158
	}}}
Coding non-ascii char.s w. Hex/Ucode Escape-seq.s (**!!)  [ 'What these values mean...' (??) ]  @@!
{{{
	\x \u \U   eg. Ä
			\xc4    (=the only format
				 accepted by byte-strings)
			\u00c4
			\U000000c4
	 --
	'sp\xc4\u00c4\U000000c4m'
	 --
	lpy3_n2-p159
	}}}
    ----
	----
u'x' (etc)  @@!
{{{
	in 2.X
	 normal and u-codestrings can be
	 mixed (often)
	in 3.X
	 normal and bytestrings
	 cannot be mixed (=w.out
	 explicit conversion)
			--
	lpy3_n2-p159
	}}}
encoding + decoding + files
{{{
	'text is encoded to bytes
	 when stored in a file'
			-- and
	'decoded into char.s (=code points
	 when read back into memory'
	--
			 (+processing text as string
				once it is loaded)
	 --
	(+files are content-specific
	 in 3.X  (ucode/str  vs  binary))
	lpy3_n2-p159
	}}}
'no need to learn trickier string coding concepts until __'
{{{
	=using more complex char.s/char-types
	 than ascii (!*)
			--
	lpy3_n2-p160
	}}}
REGEX AND PATTERN MATCHING (****)  @@!
{{{
	import re
	match = re.match('Hello[ \t]*(.*)world', 'Hello   Python world')
	match.group(1)
			 'Python')
			 --
	match = re.match('[/:](.*)[/:](.*)[/:](.*)', '/usr/home:lumberjack')
	match.groups()
			 ('usr', 'home', 'lumberjack')
	re.split('[/:]', '/usr/home/lumberjack')
			 ['', 'usr', 'home', 'lumberjack']
	--
	 re.match.group(1)
	 re.match.groups()
	 re.match.split(.....
			 --
	lpy3_n2-p160 (**)
	}}}
(+OTHER MORE ADVANCED MATCHING/PARSING SCHEMES(**))  @@!
{{{
	- xml
	- hmtl
	- natural language analysis
	}}}


___LPY3

	----
1
{{{
	
	--
	LPY3-p149
	}}}
2
{{{
	
	--
	LPY3-p149
	}}}



 ___arlang_bzmini_1



	___svg_svbwebapp1 *

"SVG uses familiar technologies"  ??
{{{
	'markup, DOM, scripting, styling'  svb-p3(??)
	}}}
(teterm: RIAs)
{{{
	Rich Internet Applications  svb-p3
	}}}
(Smil vs Js for animation)
{{{
	declarative  vs  scripting  svb-p3
	}}}
[general version of svg  browsers seek to implement(=core subset of)(*)]  @
{{{
	svg 1.1  svb-p5
	}}}
first file: (="Hello Svg(!)") (**)  @@
{{{
	<svg xmlns="http://www.w3.org/2000/svg">
	  <circle r="50"/>
	</svg>
				--
	}}}
(<path>-example 1)  @
{{{
	<path d="M 10 150 C 200 80 350 300 450 100" id="B"
			stroke="black" fill="none" stroke-width="4"/>
	svb-p8
	}}}
(<use>-example 1)
{{{
	the Animated flower w. gradient-petals(!)
	svb-p9
	}}}
"because 3, 7 and\n8 are relatively prime" ****
{{{
	svb-p10
	}}}
(some basic Smil-animation examples (=look for code))
{{{
	svb-p10
	}}}
	----
	----
link to svbapps website (=some more interesting examples??)
{{{
	http://cs.sru.edu/~svg  svb-p6
	}}}

(combination example of clipping and smil animation)  @
{{{
	'Its attribute clip-path="url(#CPST)"
	references the element <clipPath id="CPST">, ...'
	 --
	svb-p11
	}}}
((animation of text following a path **!))
{{{
	svb-p13  <textPath> (+ startOffset)
	}}}
[SVG CLOCK**] (js + svg/smil animation)
{{{
	svb-p14--15 ****(****)
	}}}
<replicate> (??)
{{{
	svb-p17+(+) (=candidate) (**)
	}}}
[non-rectangular tiling (*!)]  #using scripting
{{{
	svb-p18
	}}}
[A web application for Drawing Graphs (**)]
{{{
	svb-p19++
	}}}
	----
	----
((Building the web app menu systems + dial. boxes etc))
{{{
	custom, or D3, pergola  etc
	svb-p20
	}}}

svbwebapp (=examples etc)
- - - - - - - - - - - -
start(**) - - - - - - -

first file: (="Hello Svg(!)") (**)  @@
{{{
	<svg xmlns="http://www.w3.org/2000/svg">
	  <circle r="50"/>
	</svg>
	--
	svb-p21
	}}}
te: Self-terminating Tag (*)
{{{
	eg. <circle ... />
	--
	svb-p22
	}}}
te: Types of Attributes (+some examples) [!]
{{{
	- regular attributes   #='egenskaper'
	(eg. geometrical attrib.s  (x, cx, width etc))
	- presentation-attributes   #='graf|vis. framställn'
	(eg. paint-attrib.s  (fill, stroke-width, display, opacity))
	--
	svb-p22...
	}}}
(example: required attrib.s in the <svg>-elem. (for an svg docum))
{{{
	xmlns="http://www.w3.org/2000/svg"
			#=necessary for most browsers to be able to
				display the code as svg
	(=tells browser it will be speaking
			a new dialect of xml (=not just html as standard))
	}}}
svg screen coord.s: "the drawing space is also called the __ plane"  (!)
{{{
	= 'the Cartesian plane'
	}}}
svg screen coord.s: Origo (=x,y-point 0,0) (**(*))
{{{
	= upper left screen corner **
	--
	svb-p23
	}}}
Coord.num for screen corner oppos. to origo (=lower right corner) (**(!))
{{{
	determined by pixels (=fr. screen resolution)
	 --
	eg. 800,640, 951,651, 1440,900   240,320 (=older mobiles)
	svb-p23
	}}}
	----
	----
(what determines coord.num of three corners (=except origo) (**)
{{{
	number of screen pixels
	=that determine resolution of the screen (*(!))
	}}}


___TUT_START (*****(!!!))
	#=Start Testing Code w./in Browser (!!!(****))
	## NOTE!! LAST SPACE IN CODE MAY NOT BE ALLOWED(!!(!))
	
## + Note(!!): Watch the tab- shiftwidth(etc)-settings in Vim (????(/**(*)))

hello.svg: Move Circle to middle of screen **(!)  @
{{{
	<svg xmlns="http://www.w3.org/2000/svg">
	  <circle r="50" cx="50%" cy="50%" />
				<!-- ' ' before end tag is ok(??/!!) -->
	</svg>
	--
	svb-p24
	}}}
hello.svg: 'set radius as fixed proportion of browsers width' (=a quarter)
{{{
	<svg xmlns="http://www.w3.org/2000/svg">
	  <circle r="25%" cx="50%" cy="50%" />
	</svg>
	--
	svb-p24
	}}}
hello.svg: set circle color to orange (**!!)
{{{
	<svg xmlns="http://www.w3.org/2000/svg">
	  <circle r="25%" cx="50%" cy="50%" fill="darkorange" />
	</svg>
	--
	svb-p24
	}}}
hello.svg: set circle stroke-color to orange (+w. hexcode) (*!(!))  @@
{{{
	<svg xmlns="http://www.w3.org/2000/svg">
	  <circle r="25%" cx="50%" cy="50%"
			fill="none" stroke="#e60" stroke-width="25" />
	</svg>
	--
	svb-p25
	}}}
two superimposed circles   =describe code + document  order ((**))  @(!!!)
{{{
	first circle in code		behind|at bottom  in image
	last circle in code			 above|in front  in image
			--
			#(eg.  start of code  = bottom of graph. image)
	--
	svb-p25
	}}}
[Common svg-functionality that requires namespacing (**(!!)) ]  @@
{{{
	linking, eg. with xlink
			(=very common in svg-doks)
	--
	--  [eg. include at top of dok(**) -->> ]
	--
	<svg xmlns="http://www.w3.org/2000/svg"
	  xmlns:xlink="http://www.w3.org/1999/xlink" >
	--
	svb-p25,p26
	}}}
hello.svg: Draw two(!) circles, one w. light green fill (!!)
{{{
	<svg xmlns="http://www.w3.org/2000/svg"
		  xmlns:xlink="http://www.w3.org/1999/xlink" >
	  <circle cx="30%" cy="50%" r="25%"
		  fill="lightgreen" stroke="#e60" stroke-width="25"/>
	  <circle cx="50%" cy="50%" r="25%"
		  fill="none" stroke="#e60" stroke-width="25"/>
	</svg>
	}}}
Tut: Recreate Circle + Rect + Oval(=ellipse)  #'Accomplishing a given effect'  (****)
{{{
	TODO(!!!!): INSERT (+STUDY) CODE FR. PAGE 28(!!!!)
	<svg xmlns="http://www.w3.org/2000/svg"
		  xmlns:xlink="http://www.w3.org/1999/xlink" >
	  <title>Collage involving &lt;rect&gt; , &lt;circle&gt; and &lt;ellipse&gt; </title>
	  <circle cx="50%" cy="50%" r="25%" fill="none"
		  stroke="#e60" stroke-width="25"/>
	  <rect x="10%" width="80%" y="50%" height="10%"
		  fill="#8ff" stroke="black" stroke-width="6" />
	  <ellipse cx="50%" cy="50%" rx="10%" ry="40%" fill="yellow" fill-opacity=".45"
		  stroke="purple" stroke-width="15" />
	</svg>
	--
	  tip: (test values + 'actually measure the drawing on the screen')
	  http://granite.sru.edu/~ddailey/svg/lesson3.svg
	--
	svb-p26--p28
	}}}
attrib. for setting opacity (*)  @
{{{
    #=for rect, circle, polygon, ellipse, path (etc)
	-- --
	fill-opacity=".45"
	 --
	full opac. = "1.0"
	  # += 1.0 default value (!!)
	--
	svb-p28,p29
	}}}
	----
	----
setting diff. opac. for stroke | opac.
{{{
	stroke-opacity
	fill-opacity
	}}}


'Chapter 2 - Creating and Editing SVG Graphics'

te: 'tesselation(s) of the plane' ((!!))
{{{
	logical grouping and reusing of related graphics
	+ pulling together into reusable tiling pattern
	}}}
'The Six Basic Shape-Elements' (**(!))  (@)
{{{
	<line>
	<rect>
	<circle>
	<ellipse>
	 --
	<polyline>
	<polygon>
	--
	svb-p32
	}}}
draw a Basic Green Line (**!)  @
{{{
	<line x2="300" y2="100" stroke="green"
			stroke-width="10" stroke-linecap="round" />
	--
	svb-p32,p33
	}}}
	----
	----
val.s for x1 y1 etc (=for line)  #if not explic. specified  (+most common def.value **)
{{{
	'Note': Most svg shape prop.s have init|default-val.s
	--
	+Most(!) shape positional prop.s init-val.s = 0
	--
	svb-p33
	}}}
draw simple polygon w. default col (=black) (*)  (@)
{{{
	<polygon points="850,75 850,325 742,262 742,137" />
	--
	svb-p33
	}}}
'Brief Review of SVG Presentation Atributes'  (!)
{{{
	(eg. display, visibility, font, letter-spacing)
	  --
	'SVG presentation attributes can help you quickly set the paint and geometrical values of SVG elements,, apply gradients, filters, and clipping,, and control the interactive behavior.'
	--  quick overview of some:
	 - stroke    set color (=rgb, HSL( in %) **)
	 - stroke-width
			tip: explic. specif. unit (px, cm, etc)
	   (note: units specif. in outermost <svg>-tag is inher. by all descendants)
	 - stroke-opacity
	 - stroke-dasharray
	 - stroke-linecap
	 - stroke-linejoin
	  --
	 - fill    =col. of shape|text  (**)
	 - fill-opacity
	 - fill-rule    (nonzero (=def.) | evenodd)
	--
	svb-p33,p34
	}}}

Rectangles **  @
{{{
	<rect>
	  width
	  height
	  x y      =pos. in relat. to top-left corner of svg canvas (**)
	  ry
	  rx       #same as ry if not specified
	--
	<rect x="50" y="50" width="300" height="170" rx="90" ry="50"
		  stroke="darkseagreen" stroke-width="10"
		  fill="lightgray" fill-opacity="0.6" />
	--
	svb-p34
	}}}
Ellipse  @
{{{
	rx ry		=vert/hor. radius(!!)
	 cx cy		 =set midpoint-pos
	--
	<ellipse cx="110" cy="55" rx="70" ry="35"
			 stroke="darkseagreen" stroke-width="0.8"
	  fill="lightgray" fill-opacity="0.6" />
	--
	svb-p35
	}}}
polyline and polygon (*)  #+some color-names (!!)
{{{
	// open
	<polyline points="200,60 240,230 310,230 350,60"
			  fill="lightcyan" fill-opacity="0.7" stroke="darkviolet"
			  stroke-width="25" stroke-linecap="round" stroke-opacity="0.2" />
	// closed
	<polygon points="100,50 115,120 150,150 115,180 100,250 85,180 50,150 85,120"
			 fill="darkorange" fill-opacity="0.5" stroke="papayawhip"
			 stroke-width="20" stroke-opacity="0.7" stroke-linejoin="miter"/>
	--
	papayawhip
	navy
	tomato
	seagreen
	  https://www.w3schools.com/cssref/css_colors.asp
	  (=css color names supported by all browsers)
	--
	svb-p36
	}}}
	----
	----
(Experimenting w. Line and Triangle-examples)
{{{
	--
	svb-p36--p38
	}}}


<PATH>  *****
	#Drawing Commands:
		L = line
		Q = quadratic curve
		C = cubic curve
		A = arc
		 H
		 V
		S
		T
(+tip: Use softw. (like Inks) since math and geometric calculations can be quite complex)

More Advanced Drawing-Command (=can mimic all other shapes etc)  @@
{{{
	<path>  (**)
	--
	can take attrib.s like fill, stroke, dash array
	 --
	(+borrows features|ideas fr. 'turtle graphics'
		=fr. the Logo Progr.lang)
	 --
	svb-p38
	}}}
Drawing Complex Multi-instruction Shapes w. Path (**(!!))  @
{{{
	Can draw (=w.in a single path) **
	 - pen-up|pen-down movements
	 - quadr.|qubic béz-curves (*)
	  - ellipt. arcs
	just like the h5 <canvas> element
	--
	The separ. instrutions are called
		- subcommands (**)  (of the path object)
	--
	--
	path subcommands are stored in
		the 'data attrib.' (d) of the <path>
	--
	svb-p38
	}}}
Draw w. Path: Set Orig-point + Draw simple Line (**)  @@
{{{
	d="M 50 50 L 150 150"
	d="M 50,50 L 150,150"
	  #'Move pen to (+) Pen down'
	  # ('the Pen Down-command')
	--
	  #commas recomm. for legib.
	--
	<path stroke="black"
		  d="M 50 50 L 150 150"/>
	<path d="M 150 50
		  L 250 150 350 100"/>
	#=cmd-letter can be omitted
	  if used more than once in succession
	#(+M-cmd foll. by coord.pairs =implicit LineTo-cmds (*!)
	--
	svb-p39(63)
	}}}
Draw w. Path: Transforming(=Moving) **(!)  (+demonstr. fillrule)  @@
{{{
	<path d="M 70,290 L 150,150 200,250 40,250 100,150 170,290"/>
	<path d="M 70,290 L 150,150 200,250 40,250 100,150 170,290"
		  fill-rule="evenodd" transform="translate(250,0)"/>
	  # = 'the translate-method of the transform-attrib.' (****(!))
	--
	 (+more info ab. fill properties
		http://www.w3.org/TR/SVG/painting.html#FillProperties )
	--
	svb-p40(64)
	}}}
Draw w. Path: closing path **  (=the 'triangle + small square'-ex.)  @
{{{
	<path d="M 100,350 300,100 500,350 z" fill="none" stroke="black" stroke-width="20"/>
	<path d="M 250,320 250,220 350,220 350,320 z" fill="none" stroke="black" stroke-width="20"/>
	--  #or, draw square as subpath (!!)
	<path d="M 100,350 300,100 500,350 z
				   M 250,320 250,220 350,220 350,320 z"
			  fill="none" stroke="black" stroke-width="20" />
	--
	svb-p41(65)
	}}}
tip: advantage of using (slightly harder var. of) drawing square as subpath of triangle (=rather than as two separ. paths) (*)
{{{
	=can use evenodd (eg. so graphics underneath can show through "square hole") **
	--
	<path d="M 100,350 300,100 500,350 z
	M 250,320 250,220 350,220 350,320 z"
	  fill="#ff8" stroke="black" stroke-width="15" fill-rule="evenodd"/>
	--
	svb-p42(66)
	}}}
Draw w. Path: Quadratic Béz. Curve / ** Spline *!  (+(!!) Setting an ID (*****))  @
{{{
	 (+tip-link =wikip. on quadratic curves)
	--
	 - set init-point (with M)
	 - set 'aim-point'(=bez. handle)
	 - set pos. of endpoint
	--
	<path d="M 100 200 Q 200,400 300,200" fill="none" stroke="blue" />
	--
	svb-p42...(66)--p44
	 --
	(++ 'Drawing the Red Evenodd-Flower|sharp trefoil/triskelion' (**)
	<path fill="red" fill-rule="evenodd"
	  d="M 70 140 Q 150,0 200,100 Q 40,100 100,0 Q 170,140 70 140"/>
	--
	--  (+superimposed example w. 'grey angled + brown star')
	--     (=Linear vs Quadratic)
	--
	<path id="H" fill="#bbb" fill-rule="evenodd"
	  d="M 70 140 L 150,0 200,100 L 40,100 100,0 L 170,140 70 140"/>
			--
	<path id="X" fill="#b42" fill-rule="evenodd"
	  d="M 70 140 Q 150,0 200,100 Q 40,100 100,0 Q 170,140 70 140"/>
	}}}
	----
	----
Draw w. Path: (Drawing 'THE TULIP'(**) w. Cubic Curves (**))
{{{
	See More ((!!))
	--
	svb-p46(70)
	}}}

Draw Smooth Béz.Curve / Quadratic Béz.Curve (**) (!)
{{{
	smooth b.curve      S
	smooth quadratic b.curve     T
	--
	 (+= 'automatic reflection    svb-p47(71)
	 --
	 d="M 0,50 s 10,0 0,20 C 20,20 0,0 0,0"
	--
	svb-p46(70), svb-p54(78) *
	}}}
Draw w. Path: Drawing Arcs (**)
{{{
	=the Arcs subcommand of Path
	--
	syntax:
	  A rx ry XAR large-arc-flag sweep-flag x y
		XAR='x axis rotation'
		fl=0  #small angul. orientat. of larger a-segm.
		fl=1  #large --"...  (=greater than 180°)
		fs=0  #angul. orientat. (??)  positive
		fs=1						  negative
	--
	svb-p47(71)
	}}}
Draw w. Path: Arc Example (='draw simple spiral w. arcs' (**))  (!)
{{{
	<svg width="600" height="400" viewBox="0 0 400 300">
	<path stroke="darkslategray" stroke-width="6" fill="none"
	  stroke-linecap="round"
	  d="M50,100
		A100,50 0 0 1 250,100
		A80,40 0 0 1 90,100
		A60,30 0 0 1 210,100
		A40,20 0 0 1 130,100
		A20,10 0 0 1 170,100" />
	</svg>
	}}}
Draw w. Path: Draw Horiz./Vert. Lines (**)
{{{
	H/h V/v
	}}}
Draw w. Path: PATH COMMANDS REF.TABLE (**!!)
{{{
	=SEE MORE (****(!!))
	--
	svb-p48(72)  #****
	}}}
	----
	----
Draw w. Path - Tut: 'Drawing the Grey+Green small Wave-Tile' (**(*!))  +=Absolute / Relative Path-Commands *****(**)
{{{
	(=see webpage for code)
	+ Relative Commands are Lowercase ***** (eg. v, l, q, c, a, t, s)
	--
	  (+BNF (Backus-Naur Form))
	--
	svb-p49
	}}}

LINKING ****(*******)

Common Method for Accessing/Reusing SVG(etc) images|graphics *****  @@!!
{{{
	reference other svg(+png/jpg) images via Linking
	--
	<image xlink:href="GrandMothersParty-121YO.png" x="340" y="0" width="140"
	  height="160" opacity="0.5"/>
	--
	svb-p50(74),  svb-p53(77),p54(78) ****
	}}}
'The Eye'-Example (=draw eye-shape w.  2 Groups + Linked Jup.Image (for the iris)) *******
{{{
	<g id="eye">
	  <ellipse  >
			.
	  <g id"iris">
		<circle  >
		<image  >
	  </g>
	</g>
	
	--
	svb-p50(74),p51(75)
	}}}
(give image describing text-bubble (etc?))  @
{{{
	alt="Nasa Photo of Jupiter"
	--
	}}}
tip use of grouping  (@)
{{{
	= eg. so several objects follow same movement driven by interaction (=the eye-group following mouse movements, etc) (**(!))
	(, assigning onclick event to entire group etc)
	}}}
(Comments)
{{{
	<!-- A comment -->
	--
	svb-p50(74)
	}}}
REUSING EXISTING ELEMENT / GRAPHICS *****(**)  @@ @@
{{{
	referencing graphics w. the <use> element:
	 --
	<!-- Draw the upper-right rectangle. -->
	<rect fill="#ada1d9" fill-opacity="1" fill-rule="nonzero"
	  stroke="#32287d" stroke-width="10" stroke-linecap="butt"
	  stroke-linejoin="bevel" stroke-miterlimit="4" stroke-opacity="0.4"
	  id="rectangle" width="20" height="20" x="90" y="-10" />
			--
	<!-- Reuse the first rectangle element and move it to a different position. -->
	<use x="" y="" xlink:href="#rectangle" />
	--
	svb-p51(75)
	}}}
Tut Patterns: 'Create grid-pattern w. rectangles' ****(!!)  @@  @
{{{
	<defs>
	  <pattern id="Pattern01" width="10" height="10" patternUnits="userSpaceOnUse">
		<rect width="10" height="10" fill="#FFFFFF" stroke="#000000" stroke-width="0.1"/>
	  </pattern>
	</defs>
		--
	(+to use the patt, set y. elem.s fill-attrib. to the id of the patt.
	 (=using the url()-method (***(*))) )
		--
	<rect id="Background" x="0" y="0" width="100%" height="100%"
	  fill="url(#Pattern01)" stroke-width="0.5" stroke="#000000" />
	--
	svb-p76
	}}}
Tut/'Study': 'Designing a Reusable Pattern' (**(!))
{{{
    SEE MORE (!!! (=Group ID, viewbox, aspectratio (etc)) )
	--
	svb-p52(76)
	}}}
	----
	----
Use w. transform (=mirror dashed line 90°) (**!)  @@
{{{
	<use stroke-opacity="1"
		   transform="rotate(90, 50, 50)"
			 xlink:href="#patternLine1"
			 id="patternLine2" />
	--
	svb-p53
	}}}
draw path using 'relative' coordinates (**)  @
{{{
	  d="m 0,50 10,0 0,20 20,20 0,0 0,0 20,0 0,10"
	}}}
(tut: creating a bg-grid (**!))
{{{
	svb-p58(82)
	}}}


	evince -p 35 ~/Empire/Doks/pick/svbwebapp.pdf &
	evince -p 1 ~/dropbox-legacy/svgrefx2-2021.pdf &

	konqueror ~/Dropbox/rsc/samples/code/svg/test.svg &
	----
	~/Empire/Doks/svglearn.pdf
	~/legacy/doc_newest2019/svglearn_files/
	----
	Drasner
	svganim-velocity
	w3schools-tut (*)



-- =p52(76) ++ -----
	viewBox="0 0 400 300" preserveAspectRatio="none"
	patternUnits="userSpaceOnUse"
	id-name examples ; layer1, patternLine1, path3389
		patternRect-upperRight, patternPath-lowerLeft
		gridPatternWithTesselation
		chapter2-ShapesPatternsGroupsUse
		grid, coords, gridPattern
		TODO(!!): FILTER AND INCLUDE COMPLETE SAMPLE-LIST OF ID-NAMES (=for inspir and reference)
	transform="rotate(90, 50, 50)"     p53,p54 (****)  @
	<text x="3" y="9" font-size='8'>(0,0)</text>  @
	letter-spacing, font-kerning   p60(84)
	 (svg 2: format flowed text)	#+bring svg's treatm. 
									 into more compliance w. css

	<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink">
		<text x="20px" y="55px" font-family="Verdana" font-size="43pt">Hello World!</text>  @
	</svg>
	fill    #set text col./pattern

	<linearGradient id="g">   p62(86)  @
	  <stop offset="0" stop-color="#870"/>
	  <stop offset=".2" stop-color="#520"/>
	  <stop offset=".4" stop-color="#000"/>
	  <stop offset=".6" stop-color="#840"/>
	  <stop offset=".8" stop-color="#210"/>
	  <stop offset="1" stop-color="#832"/>
	</linearGradient>   #+use the spec.d grad. for a stroke

	font-family="serif" font-stretch="ultra-expanded" stroke-dasharray="10 5"  @
	rotate="-25 -20 -15 -10 -5 0 5 10 15 20"
	textLength="90" lengthAdjust="spacingAndGlyphs" font-style="oblique"
	text-decoration="overline" font-size="50" x="5" y="65%" font-weight="bold"

	(textorizer)
	<tspan>   group and assoc. char.s, sentences, parag.s  @
	fill='rgb(200,242,254)'    p63(87)
	'Demonstrate text properties'
	Text / Shape on Path    <textPath> / <mpath>    p64(88)    #tip: define curve w.in defs (=uses the shape, w.out rendering it)  **
		startOffset   #+can be animated w. SMIL  (=for text crawling across path) **   p65(89)  @
	<tref>   =reuse text fr. w.in/outside the dok (**)   p65
	RGB values can be created as functional values between 0 and 255, or as percentages, such as rgb(255, 0, 0) or rgb(100%, 0, 0)    p66
	((the broader topic of visual perception and information transmission))   p67
	'Applying Gradients to a Path ****    p67
		<linearGradient>, <radialGradient>  @
				stop offset=  (decimalskala fr. 0 till 1,  eller %    eg. ".25")
		x1, x2, y1, y2,     cx cy
	stop-opacity="0.5"    p70
		gradientTransform"=rotate(.....
	(+Tut: Draw some Rect.s  + fill w. gradient-patterns ****)    p70(94)
	[Rotating Cyl. Barber-pole    p71-72]  @
	  (weaving threads--example  ????)     #(aha)  @
	<clipPath>  p73-    #=clipping a bitmap image  @
	  (tut: clipping image w. pattern of circles|ellipses)
	('clipping can use simple shapes, not groups or 'use' ')
	( +'more complex patt.s can be used w. <mask> )
	<mask>   p75++  (****)  @
	tut: 'Colored Rays' + Clipping and Masking  (****)   p76
				#+define mask: =black, white, shades of grey **(*!)  @
			(('clip paths behaves like cookie-cutters' vs 'masks =like light-filters'))
	(tip: clip outside clip path only ; set fill rule to evenodd on the clipping object, or w. mask(??(/*)) )

	********
	Transform-methods: translate, scale, rotate, skewX, skewY ******(***) !!!   p77(101)++++  @
		transform="translate(50,10)"  @
	(tip: often easiest to apply translate first, then other transforms)
			rotate can take up to three parameters
	Tut: 'Create 2.5D w. transformation and opacity (**!)'   p79  @
		  <use xlink:href="#scene" mask="url(#hazeIca)"  @
			  transform="scale(1 -1) translate(30 -210) skewX(-20) skewY(5)"/>

	using the Transform matrix(a, b, c, d, e, f)   p80    (tip transform in Inks + watch values)  @
	Add Style using CSS    p81   (+tut: Styling Bar-chart)
			<style type="text/css">		___css_style  @
	<?xml-stylesheet href="bookStyles.css" type="text/css"?>   #=external style-sheet  @

	Using Media Queries to Enhance Usability (eg. adjust size based on device screen resol.   ****   p82(106) )		___css  ___mediaquery

	newer css3 capabilities ; 2d-transforms, transition eff.s    #+maybe new:  svg-filters, animation, gradients, transforms  @
	http://openclipart.org/Wikimedia Commons  http://commons.wikimedia.org/wiki/Category:SVG  http://ian.umces.edu/symbols/  http://thenounproject.com/
	'An author who is concerned about accessibility  can annotate each drawn element with its own descriptors'
	  ('semantic elements and features'  (nav, section, article, aside, header, footer, address) )  @
	  (( 'besides the shape elements, you can use metadata and microdata elements such as title, desc (description), RDF, microdata, and data attributes' ))    p84    (+see svg 1.1 spec for metadata )
	(tut: create a simple svg web interface)   #including: set h/w to %-values    p85(!)
	Tahoma    ___font   ___css ___mediaquery  @



	Three Ways of Animating SVG (**!!) ; declarative animation(w. smil / css) , and scripting (=w. js)   p89(113)  *******(**** !!!!!)  @
	definition of declarative animation (and programming) ; tell device wh. end result should be + leave details of implem. up to the client software  #(+using markup rather than script)
	SUCCESS ANIMATING W. SMIL!!(!) (=see testcode for smil-animation in testfile.svg ) ***** (**!!)  #works in konq, firefox (etc)     p90(114)    (+SEE MORE(??) AB. SMIL-ANIMATION IN SVG-SPEC.S)  @  @
	attributeName, dur [seconds], values="20;90;20" (etc), repeatCount [indefinite, 5(=times) etc]    p91(115)  ******
	('animation-type  rotate'  (*)   p92)   #='pulsating ovals(??)
	  'two animated gears'  (=external code)
	change scale, pos, rot. of an object (**!) ; <animateTransform> (**)   p93(117)

	Animate Color (**) ; <animateColor>(=deprec) || <animate> + with color-names ***********   p94(118)

	<animateMotion>  **  ;  p95(119)   # =move svg content along a given path
	'Multivalued Interpolation' (=anim. sever. val.s at once)   p96
	INTERACTING W. ANIMATION (=run anim.actions wh. clicking on obj.s etc) ************* ; p98(122)  (**)  #mouseclicks, rollovers, trigger svg-anim fr. script, trigger scripts to run upon completion of svg-anim  *******   #+using a group as the clickable object (*!)  @
	 <set attributeName="opacity" to=".75" begin="G.click" />  @
	 (Make ellipse appear + later dissappear  using Set) **   p99  @
	 using mouseover + mouseout  ***    p100(124)   #signal to the user that the button is live(!)
		G.click   AM.end
	  (pointer-events="none")  @
	 begin="G.click+3"
	   ("countdown-block")
	( display  is  block vs none )

	SCRIPTING SVG (**(!!)) ************** ; p101(125)  @
			(tip: w3c-dok  "an svg primer for today's browsers"(?))
	ex: create objects wh. clicking, build obj.s w. random val.s for their attrib.s, let users modif. obj.attrib.s (=nontrivially), let user adjust directions/veloc.s for obj.s, detect distance betw. moving obj.s on screen, build 3d-rendering of cylinder tumbling, 'build sth that acts like a <select>-obj. in html'(??)  @
			#+perhaps in svg 2: decl. access to random val.s, collis.detection, enhanced 3d-capab.s

	Simple Scripting Starter Ex. ******* ("hello") ; p102(126)  @
	http://srufaculty.sru.edu/david.dailey/svg/simpleTemplate.svg  #template for scripting

	'Using Script to Find an Object and Change Its Attributes'   p103(127) +  @
	  setAttribute(), setAttributeNS() [!!!]     @
	('GENERAL APPROACH FOR CHANGING FILL-COL. OF OBJ.' ********* ; p105(129) )  @
	'editing/setting "non-existent" attrib.s (!)'
		('Both fire the function  Here() ')
	((attrib.s can be set w. smil, but can be better (cross-browser etc) w. scripting))  @

	EXAMPLE OF ANIMATING THINGS W. JS (****) ; p107(131)  #=change text + color of a click-button (**)  @

	Add New Content to Svg Dok w. Scripting   **** ; p109(133)   createElementNS(), cloneNode()  @
		(+first  .addEventListener( . . . . ) )   =DOM LEVEL  >  0  (**(*))  @
	(+Tip: Combining Scripting w. Declarative Ánimation ) *******************   #+using Math.random (etc)   (***********)

	"Cloning nodes can save a lot(!!) of Code (****)'  p111(135)  @
			(('It is the group element that actually sends the event to the function'))
	  evt.currentTarget  @
	Evaluating Nodes (getAttribute)  p113  @

	'SVG DOM'  (setAttributeNS(), createElementNS(), appendChild(), firstChild()  (etc))
		getElementsByTagNameNS()

	Removing Content   p117  @
	(place text inside circle-object)

	Measurements  = getBBox(), getTotalLength(), getPointAtLength(), and viewBox, because all are helpful in scripting when you need to be precise about element positioning
	(eg. use to  'fit a bunch of starlike objects together in a box')   (=group into a grid (****))

	getTotalLength() and getPointAtLength(), which can be used to calculate positions along complex curves
		
		viewBox
	brief review about relative coordinates in SVG    p130(154)  @
		(+ 'make sure the text and graphics retain similar relations to one another regardless of the screen’s size or aspect ratio:')

	Messages Between SMIL and Script   p132(156) ******* ( beginElement (smil) <--> onend (js) )
		+Example (**)
	(+MORE EXAMPLES (**)  -  p135(159) )

	Ways of Putting SVG in HTML  ****  (embed, object, iframe, img  or  HTML5(!) )
		(putting html in svg)    <object>
	(( getSVGDocument() ))
	SVG INLINE IN HTML5 ****   p141


	SVG Filters  -  p145    ( <filter>, the basic primitives, utility-filters, lighting-effects, combining filters )
											<feGaussianBlur>
		<feColorMatrix>
				+Animating(*)
		<feComponentTransfer>
		<feMorphology>
		<feConvolveMatrix>
															  <feFlood> (etc)
															    (=Create Drop shadows etc)  @
															  Turbulence ****
																								<feComposite> (etc) (****)

	D3
	 pergola
	raphaël
	PolyMaps
	carto:net
	(jquery)
	(dojo)
	(sencha)
		svg-edit
			mugeda
			pilat
	
	grapher
	scion
	batik
	SmilScript  @

	<replicate>

	Oxygen
	 html-kit

	* Chrome Developer Tools  @
	* Opera Dragonfly
	* Firefox Firebug
	* Mozilla SeaMonkey
	* Komodo Edit
	* Notepad++
	* TextPad
	* Eclipse
	* gEdit
	* Safari Web Inspector  @
	* WebDwarf

	The OpenStreetMap-Project (**)  @


	CASE STUDIES (????(/**(?)))    p215(239)
		(pergola, d3 review, polymaps, interactive multiple documents application (*** clock.js  etc) , 
		   mapping application)
	(adding interactivity to the d3 stream window)
		define a transitions-menu (??/**)
			worm.js
		mapping applic.   p235(259)  @

	GeoJSON     p242(266)  @




	___FreecStart


	___jsEloq

	----
The easiest way to run the example code in the book, and to experiment with it, ...
{{{
    look it up in the online version of the book at https://eloquentjavascript.net.
    There, you can click any code example to edit and run it and to see the output it produ
    es. To work on the exercises, go to https://eloquentjavascript.net/ code, which provides starting code for each coding exercise and allows you to look at the solutions.
	--
	jseloq-p19
	}}}
JavaScript uses ____ number of bits to store a single number value.
{{{
    64
	--
	jseloq-p23
	}}}
299,800,000 in scientific notation
{{{
    2.998e8
	--
	jseloq-p24
	}}}
4
{{{
	
	--
	jseloq-p24
	}}}
5
{{{
	
	--
	jseloq-p24
	}}}

    ___zzzz

 ___Philto  (+cont. w. Verktl. (etc) )


	__shotwell

	----
Shotwell supports ____ (= what file formats)
{{{
    jpeg, png, tiff, bmp, gif, webp and raw photo files.
	}}}
supported video file formats
{{{
    Container formats: Ogg,
    QuickTime, MP4, AVI.
        .
    Codecs: Theora, Quicktime,
    MPEG-4, Motion JPEG.
	}}}
import photo files from your hard disk into Shotwell,
{{{
    Alternatively, click File > Import From Folder... and select the folder containing the photos you want to import.
	}}}
If you do not want Shotwell to recurse into subfolders while importing photos
{{{
    uncheck the Recurse Into Subfolders checkbox on the bottom of the file dialog.
	}}}
(when importing photo files) Shotwell will ask ____
{{{
    whether you want to copy the photo files to your library folder or to import them in place without copying the files.
	}}}
directly import the photos and copy them.
{{{
    hold down Ctrl while dragging photos in,
	}}}
directly import the photos without copying them.  @
{{{
    hold down Ctrl+Shift while dragging photos in,
	}}}
The View > Extended Information command  @
{{{
    Ctrl+Shift+X
	}}}
Photo views (!)
{{{
    When you select any collection in the sidebar, Shotwell displays all photos in the collection in the main window area.
	}}}
    ----

    ----
adjusts the viewing size of the image thumbnails.  @
{{{
	+ / -
	}}}
view a photo full-window
{{{
    by double-clicking on it.
	}}}
When viewing a photo in full-window mode, you can zoom by pressing the following keyboard shortcuts:  @
{{{
    Ctrl+0 for the full image, Ctrl+1 for 100% (1 photo pixel = 1 screen pixel), and Ctrl+2 for 200% (1 photo pixel = 2x2 screen pixels).
	}}}
Shotwell offers a fullscreen mode to display photos.  @
{{{
    press F11.
	}}}
pin the toolbar down
{{{
	=button
	}}}
The sidebar on the left side of the Shotwell window lists various views of your library. (!!)
{{{
    The Last Import view 
    The Flagged 
    The Saved Search 
    The Events folder 
    The Tags folder 
	}}}
Saved Search 
{{{
	allows you to sort your library by many criteria.
	}}}
To give an event a name rather than referring to it by its date, (!)
{{{
    select the event, click Events > Rename Event... and enter a new name.
	}}}
To create a new event, (@)
{{{
    select the photos you would like in the new event and click Events > New Event.
	}}}
    ----

    ----
To merge events, (!)
{{{
    select Events from the sidebar, then, while holding down Ctrl click on the events you want to merge in the main window area. Finally, click Events > Merge Events.
	}}}
change the event sort order,
{{{
    click View > Sort Events and select either > ascending or descending.
	}}}
Change the photo used to represent each event (the key photo) (!)
{{{
    select the photo and choose Photos > Make Key Photo for Event.
	}}}
Flagging a photo (+Purpose)  @@
{{{
   use the Ctrl+G or / shortcut keys.
      --
    you might flag all photos which need visual adjustment, or all photos which you want to share with a friend.
    useful because you can operate on all flagged photos as a set.  For example, you can select the Flagged view and then upload all flagged photos to a publishing service.
	}}}
assign each photo a rating from 1-5 stars,  @@
{{{
    press any of the shortcut keys 1, 2, 3, 4 or 5 to assign a rating.
	}}}
mark the photo(s) as rejected // completely clear the rating(s)  for photos  @@
{{{
    press 9 // 0
	}}}
set a different rating filter (=normally Shotwell displays all photos except rejected photos.)  @(@)
{{{
    View > Filter Photos menu
    - display only photos rated with 3 stars or higher, 
    - display all photos including those marked rejected.
     --
    The Shotwell icon on the toolbar displays the current rating filter and can also be used to set the filter.
	}}}
increase or decrease a photo's rating  @@
{{{
    the keyboard shortcuts < and >.
	}}}
    ----

    ----
delete photos entirely from your hard disk. (=the 'two trashes')
{{{
    a photo, when deleted, is first put into Shotwell's trash.
    If you delete it from Shotwell's trash, it is put into your computer's trash.
    If you delete it from your computer's trash the photo is finally and irretrievably deleted from your computer.
	}}}
Removing photos from the library (!(?))
{{{
    choose Edit > Remove From Library.
	}}}
(Emptying or restoring the trash folder)
{{{
    Select the Trash entry in the
    Sidebar and Shotwell will display
    all photos that have been marked
    for removal or deletion.
        .
    In the Trash view, the following commands are available:
        .
    Delete Delete the selected photos
    from the trash folder.
        .
    Restore Restore the selected photos
        .
    Empty trash Delete all photos from the trash folder.
	}}}
Deleting or emptying Trash
{{{
    Only Remove  Remove photos from the library but leave the photos in their location on the computer.
       .
    Trash file  Remove photos from the
    library and delete them from the
       .
    Cancel Do nothing.
	}}}
There are two ways to search in Shotwell:  @@
{{{
    The search bar allows you to quickly search the current view for certain criteria.  c-f | f8
        --
    find, show and hide photos and videos based on title, tag, rating or other options.
        .
        .
    Saved Searches feature more complex search criteria and persist in the sidebar between sessions.
	}}}
To begin searching (w. c-f),  @
{{{
    simply enter a search keyword in the text box, or click on Flagged, Rating or Type.
        .
    The text search matches your keywords across tag names, photo or video titles and photos' original filenames.
    The Flagged, Rating and Type buttons allow you to filter your collection by whether photos are flagged, their current number of stars, and whether the items shown are images, videos, or raw camera files, respectively.
	}}}
Create a new saved search  @@
{{{
    hitting Ctrl+S.
        .
    The dialog box allows you
    to enter a name for the search and
      .
      .
    select whether you want to meet
    Any, All, or None of the criteria
      .
    Each row represents a search criterion.
    Use the + button to add more rows, and the - button to remove a specific row.
    The combo box on the left of each row selects the type of criteria.
	}}}
The sidebar on the left of the window lists various ____
{{{
    views of your library.
	}}}
add new tags to photos,  @@
{{{
    select the photos you would like to tag,
    Type Ctrl+T.
	}}}
    ----

    ----
give photo several tags,  @@
{{{
    When you use Ctrl+T or Tags > Add Tags... you can type in the names of one or more tags, separated by commas.
	}}}
rename a tag  @(@)
{{{
    selecting that tag in the sidebar and choosing Tags > Rename Tag "[name]"..., by rightclicking
	}}}
change which tags are associated with a particular photo,  @
{{{
    select that photo, choose Tags > Modify Tags... or right-click on a photo and select Modify Tags... and edit the comma separated list.
	}}}
remove a tag from one or more photos,  @(@)
{{{
    select that tag in the sidebar, then select the photos you would like to remove, and choose Tags > Remove Tag "[name]" from Photos or right-click on the photos an select Remove Tag "[name]" from Photos.
	}}}
To delete a tag entirely,  (@)
{{{
    select that tag in the sidebar and choose Tags > Delete Tag "[name]" or by right-click and select Delete Tag "[name]".
	}}}
tags that can help you to sort your tag list in ways that better match how you work or think (for example, you can store location tags like "Mountains" or "Beach" under a parent tag "Places")  @!(?)
{{{
    Hierarchial tags
	}}}
create a new subtag  @(!)
{{{
    right-click on a tag and select New.
	}}}
change a photo's title,  (!)
{{{
    select the photo and click Photos > Edit Title..., or press F2.
	}}}
adjust the date and time of photos, (=inside sh.well, or to external file)
{{{
    select the photos you would like to adjust, choose Photos > Adjust Date and Time... and select a new date and time.
	}}}
    ----

 (!!!!)

    ----
quick way to automatically adjust the brightness and contrast of your photo.  (@)
{{{
    Clicking on the Enhance button
        +can then improve the adjustments by clicking on the Adjust button.
	}}}
Color adjustments (!!)
{{{
    The Adjust button opens a floating window with a histogram and sliders to adjust a photo's exposure, saturation, tint, temperature, and shadows.
        + 'The histogram' .... (=the Enhance button)
	}}}
correct under- or over-exposed photos.
{{{
	Exposure
    Changes the brightness to make it look like the photo was exposed for a longer or shorter time.
	}}}
correct flat-looking photos or photos where the difference between bright and dark spots seems too big.
{{{
    Contrast
	}}}
Changes how vivid colors look =If your photo looks gray and washed out,
{{{
    Saturation
	}}}
useful for correcting photos taken with the wrong ____ setting, which typically have an unnatural color cast. For example, photos taken outdoors with ____ set to "Tungsten" may have a blue cast.
{{{
    Tint
	}}}
Changes how "warm" or "cool" the picture looks. Use this to make cold, depressing scenes look more lively, for example.
{{{
    Temperature
	}}}
Use this to make cold, depressing scenes look more lively, for example.
{{{
    Temperature
    Changes how "warm" or "cool" the picture looks.
	}}}
    ----

    ----
makes shadowy areas appear lighter. Use this to make detail more visible if it's obscured by the darkness of a shadow.
{{{
    Shadows
	}}}
These sliders change how light the brightest white is and how dark the darkest black is. Use them to change the contrast of the photo. Photos which look washed out should particularly benefit from changing these settings.
{{{
    Intensity Threshold (sliders on the histogram)
	}}}
Cropping  (!!)
{{{
    fullscreen mode.
        =Crop button on the toolbar.
      .
    Tip:
    You can also constrain the crop box to one of many common sizes.  Choose a size from the drop-down list that suits your needs. If you press the flip button next to it, the orientation of the constraint will switch (from landscape to portrait).
	}}}
the rule of thirds
{{{
	See More
    (=obj.s at crossings of lines forming 3x3 grid)
	}}}
use an external editor to do additional work on a photo.
{{{
    GIMP and UFRaw
        Photos > Open With External
	}}}
in full-window view: to show the original photo rather than the externally-edited one.  (@)
{{{
    press and hold the Shift key in full-window view
	}}}
Removing red-eye
{{{
    use the Red-eye tool.
        - Drag the circle over the affected pupil, adjust its size with the slider control, and press Apply.
	}}}
Rotate or flip a photo  @@
{{{
    - rotate left: Shift+Ctrl+R or [
    - rotate right: Ctrl+R or ]
    If you select more than one image, you can rotate all of them at the same time.
	}}}
tool that allows photos to be leveled and straightened.  @
{{{
    The straighten tools
        keyboard shortcut Ctrl+A.
	}}}
tip about metadata (such as tags and titles)  (!!)
{{{
    Shotwell can optionally write metadata (such as tags and titles) to photo files. For more information, see the section Photo files.
	}}}
    ----

    -- Sharing Photos --

    ----
export photos from Shotwell  (!!)
{{{
    Alternatively, select a set of photos and choose the File > Export... command or press Shift+Ctrl+E,
	}}}
size, pixel size etc wh. Image will be exporting
{{{
    - A scaling constraint (which means how Shotwell will decide to scale the photos down), and the desired pixel size.
        (+see more)
	}}}
help to save your privacy (etc)  @
{{{
    - The option whether you like to export metadatas such as tags or ratings.  This can help to save your privacy if you have geolocation tags or tags which shouldn't be seen by anyone.
        If selected, Shotwell will write tags, titles, and other metadata to the new files.
	}}}
print multiple images in one page;
{{{
    select multiple images, choose File > Print..., and in the Print dialog, choose the Image Settings tab. In Image Settings, choose one of the multiple-image-per-page options under Autosize.
	}}}
Publishing to the Web  @
{{{
    Through the use of plugins, Shotwell can publish photos and videos to the following services, each of which requires an account:
     - Flickr
     - Google Photos
     - YouTube (videos only)
     - Tumblr (Photos only)
     - Any site running the Piwigo photo gallery software (photos only)
       .
    Preferences + click on the Plugins tab
    - cs-p
	}}}
Sending photos
{{{
    using the GNOME desktop's Send To mechanism, which lets you send photos via email, instant messaging or in other ways.
         .
    You can optionally choose to send the files in a compressed format.
	}}}
Set a desktop background or slideshow @@!
{{{
    File > Set as Desktop Background.
    File > Set as Desktop Slideshow....  Shotwell will prompt you for a slideshow delay, which can be any interval up to one day in length.  The background slideshow will proceed even when Shotwell is not running.
	}}}
see a sideshow of any collection in Shotwell, @@!
{{{
    navigate to that collection and select View > Slideshow or press F5.
     (+dur, transit, trans. dur.)
	}}}
    ----

    ----
If you no longer want the missing files to be part of your Shotwell collection (perhaps because you deleted them),  ((@@))
{{{
    go to the Missing Files view, select the photos and then click Remove From Library.
	}}}
Shotwell normally stores its database and photo thumbnails in ____  @@ @@
{{{
    the directory ~/.shotwell . This directory does not hold photos, but the database in this directory contains a list of all the photos in the Shotwell library.
	}}}
advanced Library feature, *(*)  @@ @@
{{{
    it's possible for you to have multiple Shotwell libraries, each of which has its own set of photos.
        Each library needs its own database directory. To launch Shotwell with an alternate library, specify an alternate database directory on the cmdline
          .
        shotwell -d [library-directory]
	}}}
    ----

The library directory (**(!)) ; Where Sh.w. stores|looks for y. Images (=is usually the Pictures directory in your home directory,,  Set in Pref.s)



	__thunar

    ----
1
{{{
	
	}}}
2
{{{
	
	}}}


	__dolphin


	__EmmetVim
    (+=Can handle Svg(=Xml) too??(**))

    ----
Emmet is ____
{{{
    an editor plugin for high-speed HTML, XML, XSL (or any other structured code format) coding and editing.
	}}}
Emmet main syntaxes (*)
{{{
    emmet-html-expression-syntax
    emmet-csd-expression-syntax
	}}}
Abbreviation engine has a modular structure which allows you to expand abbreviations into different languages.  Emmet currently supports ____
{{{
    CSS, HTML, XML/XSL and HAML, Slim languages via filters (see |emmet-filter|).
	}}}
    ----

    ----
Basic Expansion **: <h1></h1>
{{{
	h1 + c-h ,
	}}}
Insert in alr. Done tag *: class="global" into <div>
{{{
	
	}}}
3
{{{
	
	}}}

base
next level
num


     __Ffox (=newest shortlist) *

. {{{

	save open tabs
	  as bookmarks (=in dir)		cs-d
	bookm. toolbar					c-b
	organize bm.s					cs-o

  ----Tabs-Navig.--- **
	Search in open Tabs ***(*)		% search
	Flip betw. curr/last
	  Tab // list recent Tabs ****	c-tab(=tap) // t-cab(Hold*)
	Full list open Tabs **(*)		cs-tab
	-- -
	Sel. Tabs					c-1 .. c8  |  c-9  **

	open link in
	  new tab (active) **			cs-click
	--- " --- bg tab *				c-click / c-ent
	last / next vis.
	  link  in new tab **(*)		c-back/next **

	find  +next/prev. **			c-f  ent/s-ent  # c-g / f3
	find link on page (*)			' + search
	search-engine shortcut
	  (+set custom shortname) *		@wikipedia + search   # @wik
	(next/prev. s-engine)
	 [open search-res. in
	   new tab				a-ent]
  ----
    Search in:
		bookm.					*
		tabs (**)				%
		url/webaddr.			$
	   --
		in tagged				+
		in suggestions(??/*)	?
	
	download-manager				cs-y

	next/prev. 'frame'				f6

}}}

     __websearch *

     DuckDuck
(search_results about cats or dogs)				cats dogs
results for exact term 'cats and dogs'			"cats and dogs"
Fewer dogs in results **(!)						cats -dogs
More dogs in results *(!)						cats +dogs

DuckDuckGo supports search syntax you can use to fine-tune your queries.	 Search operators:
Example 	Result
cats filetype:pdf 	PDFs about cats. Supported file types: pdf, doc(x), xls(x), ppt(x), html
dogs site:example.com 	Pages about dogs from example.com
cats -site:example.com 	Pages about cats, excluding example.com
intitle:dogs 	Page title includes the word "dogs"
inurl:cats 	Page url includes the word "cats"
Search directly on other sites:

    Use \ to go to directly to the first search result. For example, \futurama
    Use ! to search other sites' search engines directly. Remember, though, because your search is actually taking place on that other site, you are subject to that site’s policies, including its data collection practices. For example, !a blink182 searches Amazon.com for blink182. There are thousands of sites covered!

Instant Answers:
    Add news to your searches to generate Instant Answer news results. For example, LeBron James news
    Add map to your search to generate Instant Answer map results. For example, Philadelphia map
    Find out more about Instant Answers!

Safe search:
    Add !safeon or !safeoff to the end of your search to turn on and off safe search for that search.


((++ Legacy GSearch-Tips (**!!)))


     __evince
       (=pull in newest nanolist(!))


     __Okular


    __ed

	----
red can ____
{{{
    - can only edit files in the current directory
    - cannot execute shell commands.
	--
	edinfo
	}}}
basic ed editing ()
{{{
    FILE is read into the editor's buffer
    Upon quitting 'ed', any changes not explicitly saved with a 'w' command are lost.
    --
    edinfo
	}}}
A typical command mode command might look like: (=replace all occurences of a string) **
{{{
    ,s/OLD/NEW/g
	--
	edinfo
	}}}
primary means of adding text to a file (*)
{{{
    =When an input command, such as 'a' (append), 'i' (insert) or 'c' (change), is given, 'ed' enters input mode.
	--
	edinfo
	}}}
Input mode is terminated by ___ **
{{{
    entering a single period ('.') on a line.
    (='.Enter')
	--
	edinfo
	}}}
In general, 'ed' commands consist of ____
{{{
    [address[,address]]command[parameters]
    The address(es) indicate the line or range of lines to be affected by the command.
	--
	edinfo
	}}}
basic structure of ed-commands
{{{
	
	--
	edinfo
	}}}
    ----

    ----
start ed (*)
{{{
    ed (flags) file
	--
	edinfo
	}}}
start ed w. the default prompt ('*')
{{{
    ed P
	--
	edinfo
	}}}
run Unix shell ('sh') commands from inside 'ed'
{{{
    *!date
	--
	edinfo
	}}}
capture the command output to a temporary location called a "buffer"
{{{
    *r !cal -m 137
	--
	edinfo
	}}}
print lines of the whole buffer (**)
{{{
    ,p
	--
	edinfo
	}}}
write the buffer contents to a file named 'junk'
{{{
    *w junk
	--
	edinfo
	}}}
comment out commands
{{{
    # cmds
	--
	edinfo
	}}}
quit ed
{{{
	q
	--
	edinfo
	}}}
printing the whole buffer **
{{{
	
	--
	edinfo
	}}}
Select line 2 for editing.
{{{
	2
	--
	edinfo
	}}}
    ----

    ----
replace 'filvers' with 'silver', and print the result.
{{{
    s/filvers/silver/p
	--
	edinfo
	}}}
tip: ways of specifying the line(s) to edit
{{{
    - line's number,
    - sequence in the buffer. (??)
    - specified a unique string in the line, e.g., '/filvers/',
    --
    edinfo
	}}}
Add title 'Sonnet' to end / beg. of file **(!)
{{{
    a Sonnet (Ent)
    0a Sonnet
	--
	edinfo
	}}}
move line 5 to top of file (+echo)
{{{
    5m0p
	--
	edinfo
	}}}
te: current address
{{{
	=the active line
    (=last line, or last affected lin)
    (+ed' maintains a "current address" which is typically supplied to commands as the default address when none is specified.)
	--
	edinfo
	}}}
write file + quit
{{{
	wq Ent
	--
	edinfo
	}}}
When 'ed' opens a file, the current address is initially set to ____
{{{
    the address of the last line of that file.
	--
	edinfo
	}}}
the move command 'm' sets the current address to ____
{{{
    the address of the last line moved.
	--
	edinfo
	}}}
start ed w. the output of a shell command, eg. cal
{{{
	ed !cal
	--
	edinfo
	}}}
    ----

    ----
Print an informative help message describing the options and exit.
{{{
	ed -h
	--
	edinfo
	}}}
when can the '--loose-exit-status' option be useful?
{{{
    can be useful when 'ed' is invoked as the editor for crontab.
	--
	edinfo
	}}}
Specifies a command prompt string
{{{
    '-p STRING'
	--
	edinfo
	}}}
toggled showing the prompt string (=fr. inside ed)
{{{
	P  (=command)
	--
	edinfo
	}}}
This option may be useful if 'ed''s standard input is from a script.
{{{
    '-s' '--quiet' '--silent'
	--
	edinfo
	}}}
'-v' '--verbose' Verbose mode  =toggle fr. inside ed
{{{
	H
	--
	edinfo
	}}}
ed Exit status:
{{{
    0 if no errors occurred; otherwise >0.
	--
	edinfo
	}}}
An address range separated by a semicolon (';').  **
{{{
    In a semicolon-delimited range, the current address ('.') is set to the first address before the second address is calculated.
    This feature can be used to set the starting line for searches if the second address contains a regular expression.
	--
	edinfo
	}}}
Addresses can be omitted on either side of the comma or semicolon separator. If only the first address is given in a range, then ____
{{{
    then the second address is set to the given address.
    If only the second address is given, the resulting address pairs are '1,addr' and '.;addr' respectively.s
    + If ....
	--
	edinfo
	}}}
    ----

    ----
The current through last lines in the buffer.
{{{
    ';'
	--
	edinfo
	}}}
regex search
{{{
	/ and ?
	--
	edinfo
	}}}
mark line w. x + go back **
{{{
	kx  'x
	--
	edinfo
	}}}
adding or subtracting the indicated number of lines to or from address.
{{{
	+ | -
	--
	edinfo
	}}}
prints all lines containing STRING (=regex)
{{{
    g/STRING/
	--
	edinfo
	}}}
include a ] // - in CHAR-CLASS,
{{{
    it must be the first character.
	--
	edinfo
	}}}
CHAR-CLASSes to specify sets of characters:
{{{
    [:alnum:] [:cntrl:] [:lower:]  (etc)
	--
	edinfo
	}}}
[.COL-ELM.] [=COL-ELM=]
{{{
	=see more
	--
	edinfo
	}}}
Defines a (possibly null) subexpression RE.
{{{
    '\(RE\)'
	--
	edinfo
	}}}
    ----

    ----
the regular expression ____ matches the string 'abcabc',
{{{
    '\(a.c\)\1'
	--
	edinfo
	}}}
The '*' operator sometimes yields unexpected results.
{{{
	(see more)
	--
	edinfo
	}}}
Matches the single character regular expression or subexpression immediately preceding it at least N and at most M times.
{{{
    '\{N,M\}' '\{N,\}' '\{N\}'
	--
	edinfo
	}}}
If any of these forms occurs first in a regular expression or subexpression,
{{{
    then it is interpreted literally (i.e., the regular expression '\{2\}' matches the string '{2}', and so on).
	--
	edinfo
	}}}
'\`' '\'' Unconditionally matches the beginning '\`' or ending '\'' of a line.
{{{
	see more
	--
	edinfo
	}}}
matches the strings 'abc', 'adc' and 'ac'.
{{{
    the regular expression 'a[bd]\?c'
	--
	edinfo
	}}}
Matches the single character regular expression or subexpression immediately preceding it one or more times.
{{{
    '\+'
	--
	edinfo
	}}}
Matches the beginning or ending (null string) of a word.
{{{
    '\bhello\b'
	--
	edinfo
	}}}
+ 'not at word boundary', 'word char', 'not word char'
{{{
	\b  \w  \W
	--
	edinfo
	}}}
    ----

    ----
If a command's parameters extend over several lines,
{{{
	
	--
	edinfo
	}}}
then each line except for the last must be terminated with a backslash ('\').
{{{
    If a command's parameters extend over several lines,
	--
	edinfo
	}}}
most commands accept a print suffix,
{{{
    which is any of 'p' (print), 'l' (list), or 'n' (enumerate),
	--
	edinfo
	}}}
The 'e', 'E', 'f', 'r', and 'w' commands take an optional FILE parameter,
{{{
    The 'e', 'E', 'f', 'r', and 'w' commands
	--
	edinfo
	}}}
aborting the current command and returning the editor to command mode.
{{{
    An interrupt (typically <Control-C>)
	--
	edinfo
	}}}
Changes line/range of lines  +curr. line *
{{{
    '(.,.)c'
    The addressed (implic. or explic.)  lines are deleted from the buffer, and text is inserted in their place.
    current address is set to the address of the last line entered or, if there were none, to the new address of the line after the last line deleted
      --
    The lines deleted are copied to the cut buffer.
	--
	edinfo
	}}}
delete line/lines *
{{{
    '(.,.)d'
    (+similar rules as for c)
	--
	edinfo
	}}}
Open/Edit FILE,
{{{
    'e FILE'
    (+current address is set to the address of the last line in the buffer)
	--
	edinfo
	}}}
Edits FILE unconditionally (=like vim's e!)
{{{
    'E FILE'
	--
	edinfo
	}}}
    ----

    ----
Sets the default filename to FILE. If FILE is not specified, then the default unescaped filename is printed.
{{{
    'f FILE'
	--
	edinfo
	}}}
All the addressed lines matching a regular expression RE are marked. Then the given COMMAND-LIST is executed for each marked line,
{{{
    '(1,$)g/RE/COMMAND-LIST'
      --
    The first command of COMMAND-LIST must appear on the same line as the 'g' command.
    The other commands of COMMAND-LIST must appear on separate lines.
    All lines of a multi-line COMMAND-LIST except the last line must be terminated with a backslash ('\').
	--
	edinfo
	}}}
'-G',
{{{
	see more
	--
	edinfo
	}}}
For each matching line, the line is printed, the current address is set, and the user is prompted to enter a COMMAND-LIST.
{{{
    '(1,$)G/RE/'
	--
	edinfo
	}}}
The format of COMMAND-LIST
{{{
    same as that of the 'g' command.  
    A single '&' repeats the last non-null command list.
	--
	edinfo
	}}}
It is recommended that ed scripts begin with this command to aid in debugging.
{{{
    'H' =Toggles the printing of error explanations. +By default, explanations are not printed.
	--
	edinfo
	}}}
Inserts text in the buffer before the addressed line. *
{{{
    '(.)i'
	--
	edinfo
	}}}
Joins the addressed lines,
{{{
    '(.,.+1)j'
	--
	edinfo
	}}}
kx-marks are cleared/deleted when ___
{{{
    the marked line is deleted or otherwise modified.
	--
	edinfo
	}}}
    ----

    ----
List/Echo line + The current address is set to the address of the last line printed. *
{{{
    '(.,.)l'
	--
	edinfo
	}}}
The addressed lines are moved to after the right-hand destination address. (including, can use 0)
{{{
    '(.,.)m(.)'
	--
	edinfo
	}}}
Prints the addressed lines, preceding each line by its line number + The curr. address is set to the address of the last line printed.
{{{
    '(.,.)n'
	--
	edinfo
	}}}
Prints the addressed lines + curr. address is set to the address of the last line printed.
{{{
    '(.,.)p'
	--
	edinfo
	}}}
Quits 'ed' unconditionally.
{{{
    'Q'
	--
	edinfo
	}}}
Reads FILE (or output fr. shell cmd) and appends it after the addressed line. The current address is set to the address of the last line read or, if there were none, to the addressed line.
{{{
    '($)r FILE'
	--
	edinfo
	}}}
____ in s-REPLACEMENT is replaced by the currently matched text.
{{{
    An unescaped '&' in REPLACEMENT
	--
	edinfo
	}}}
If REPLACEMENT consists of a single ___ then REPLACEMENT from the last substitution is used. *
{{{
	'%'
	--
	edinfo
	}}}
A line can be split by including ____
{{{
    a newline escaped with a backslash ('\') in the REPLACEMENT.
	--
	edinfo
	}}}
    ----

    ----
Repeats the last substitution.
{{{
    '(.,.)s'
	--
	edinfo
	}}}
wh. repeating last subst: causes the RE of the last search to be used instead of the RE of the last substitution (=if happened after last subst.)
{{{
    The 'r' suffix
	--
	edinfo
	}}}
Copies (i.e., transfers) the addressed lines to after the right-hand destination address.
{{{
    '(.,.)t(.)'
    The current address is set to the address of the last line copied.
	--
	edinfo
	}}}
Undoes the effect of the last command that modified anything in the buffer (=toggle betw. last and curr. state) (!)
{{{
	u
	--
	edinfo
	}}}
similar to the 'g//G' commands, but for NOT matching (*)
{{{
	v  V
    '(1,$)v/RE/COMMAND-LIST'
	--
	edinfo
	}}}
Writes the addressed lines to FILE. // --"-- = Append (**)
{{{
    '(1,$)w FILE'
     '(1,$)W FILE'
	--
	edinfo
	}}}
Writes the addressed lines to FILE, and then quit
{{{
    '(1,$)wq FILE'
	--
	edinfo
	}}}
puts the contents of the cut buffer to after the addressed line. The current address is set to the address of the last line copied.
{{{
    '(.)x'
	--
	edinfo
	}}}
Copies (yanks) the addressed lines to the cut buffer.
{{{
    '(.,.)y'
    The cut buffer is overwritten by subsequent 'c', 'd', 'j', 's', or 'y' commands. The current address is unchanged.
	--
	edinfo
	}}}
    ----

    ----
Scroll.
{{{
    '(.+1)zN'
	--
	edinfo
	}}}
repeat the previous '!COMMAND'.
{{{
	!!
	--
	edinfo
	}}}
an unescaped '%' (=for !CMDS) is replaced by ____
{{{
    by the default filename.
	--
	edinfo
	}}}
Begins a comment; the rest of the line, up to a newline, is ignored. If a line address followed by a semicolon is given, then the current address is set to that address. (??)
{{{
    '(.,.)#'
	--
	edinfo
	}}}
Prints the line number of the addressed line.
{{{
    '($)='
	--
	edinfo
	}}}
'(.+1)<newline>'
{{{
    An address alone prints the addressed line.
    A <newline> alone is equivalent to '+1p'.
    The current address is set to the address of the printed line.
    --
    edinfo
	}}}
If the terminal hangs up, 'ed' attempts to write the buffer to the file ___
{{{
    'ed.hup' or, if this fails, to '$HOME/ed.hup'.
	--
	edinfo
	}}}
binary file: If the last line has been modified, _______ prevents appending a newline to a binary file.
{{{
    reading an empty file, for example /dev/null,
	--
	edinfo
	}}}
error =prints a '?' and returns to command mode. An explanation of the last error can be printed with the ____ command.
{{{
    'h' (help)
	--
	edinfo
	}}}
Attempting to quit 'ed' or edit another file before writing a modified buffer ____
{{{
	fails w. error first time
     +succeeds on sec. attempt, silently
	--
	edinfo
	}}}
    ----


    ----
vad visar ed när fil öppnas?
{{{
    antalet tecken (339) + sätter osynliga markören på sista raden
	--
	ednotes1_drs
	}}}
vilken rad är den aktiva raden efter att man redigerat en rad m de flesta kommandon
{{{
    For most of these commands, the last line to be changed will become the new current line.
	--
	ednotes1_drs
	}}}
skriv ut felmedd. från alla comm. efter tryckn.
{{{
	H
	--
	ednotes1_drs
	}}}
ange tecken som visar att du är vid kommandoprompten
{{{
    ed -p:
    alias ed='ed -p:'
	--
	ednotes1_drs
	}}}
will give you a ‘:’ prompt and save you the trouble of hitting the ‘H’ key at the beginning of your session.
{{{
    ed -vp:
	--
	ednotes1_drs
	}}}
go to first line (first line becomes current editing line)
{{{
	1 Ent
	--
	ednotes1_drs
	}}}
move two lines backwards.
{{{
    -2/^2
	--
	ednotes1_drs
	}}}
hela filen/alla rader
{{{
    , / 1,$ / %
	--
	ednotes1_drs
	}}}
nuv. t.o.m. sista raden
{{{
    ; / .,$
	--
	ednotes1_drs
	}}}
    ----

    ----
nästa/förra raden som inneh. samma regex som sist /-sökn.  (obs.  sökn. verkar forts. =wraparound
{{{
    //  /  ??
	--
	ednotes1_drs
	}}}
prints current line
{{{
	p  /  .p
	--
	ednotes1_drs
	}}}
prints first line
{{{
    1p
	--
	ednotes1_drs
	}}}
prints every line in the file
{{{
    ,p
	--
	ednotes1_drs
	}}}
prints line before current one.
{{{
    -1p
	--
	ednotes1_drs
	}}}
prints line from current one until last one.
{{{
    .,$
	--
	ednotes1_drs
	}}}
print every line showing its line number.
{{{
    1,$
    ,n
	--
	ednotes1_drs
	}}}
print current line showing its line number.
{{{
    n
	--
	ednotes1_drs
	}}}
ändra från nuv. rad till resten av stycket
{{{
    .,/^$/d   .,/^$/c
	--
	ednotes1_drs
	}}}
    ----

    ----
Visa alla rader i filen
{{{
    :,
    %p
	--
	ednotes1_drs
	}}}
skriv ut nästa rad
{{{
    Enter
	--
	ednotes1_drs
	}}}
visa radnummer för nuv. rad
{{{
    .=
	--
	ednotes1_drs
	}}}
stäng utan att spara
{{{
    Q // qq
	--
	ednotes1_drs
	}}}
ändra namn på fil/visa defaultnamnet på fil
{{{
    f fil // f
	--
	ednotes1_drs
	}}}
öppna annan fil utan att spara nuv. (vim=:e!)
{{{
    E / ee
	--
	ednotes1_drs
	}}}
spara ut rad 1-4 som ny fil
{{{
    :1,4w nyfil
	--
	ednotes1_drs
	}}}
lägg till rad 3-5 sist i filen nyfil
{{{
    :3,5W nyfil
	--
	ednotes1_drs
	}}}
läs in innehållet från /etc/hosts till under aktiv rad i nuv. filen
{{{
    :r /etc/hosts
	--
	ednotes1_drs
	}}}
    ----

    ----
flytta till rad 1 innan kör kommandot på den (kommandot change)
{{{
    :1c
	--
	ednotes1_drs
	}}}
appends after second line.
{{{
    :2a
	--
	ednotes1_drs
	}}}
insert line BEFORE(!) line nr 4
{{{
    :4i
	--
	ednotes1_drs
	}}}
move first line after the end of the file.
{{{
    :1m$
	}}}
sätt märket a på rad 3
{{{
    :3ka
	--
	ednotes1_drs
	}}}
visa rad m. märke a
{{{
    'ap
	--
	ednotes1_drs
	}}}
byt ut 'old' mot 'new' i hela buffern
{{{
    ,s/old/new/g
	--
	ednotes1_drs
	}}}
Visa alla rader som innehåller mönstret 'ken.*'
{{{
    g/ken.*/p
	--
	ednotes1_drs
	}}}
flytta alla rader som innehåller mönstret 're' till sist i filen
{{{
    :g/re/m$
	--
	ednotes1_drs
	}}}
skicka rad x till y till/genom(?) skalkommando
{{{
    1,5w !cmd
	--
	ednotes1_drs
	}}}
    ----

    ----
KÖR SKRIPTET TESTSKRIPT PÅ FILEN TEST.TXT ***
{{{
    ed test.txt < edscript
        .
    =alla kommandon o ändringar man kan göra manuellt kan man lägga i en fil, o köra på en annan fil m.hj.a ed
        .
    tip(!): ed changes a file ‘in place’. so do not rely on unportable sed -i to do this.
	--
	ednotes1_drs
	}}}
tip: use HERE docs to do little ed scripts:
{{{
    ed $filename
        <<EDIT
        a asdfasdf . w q
        EDIT
	--
	ednotes1_drs
	}}}
    ----


  __csound_Introd *

	----
Csound works by *
{{{
    first translating a set of text-based instruments, found in the orchestra file, into a computer data-structure that is machine-resident.
    Then, it performs these user-defined instruments by interpreting a list of note events and parameter data that the program "reads" from:
    a textbased score file, a sequencer-generated MIDI file, a real-time MIDI controller, real-time audio, or a nonMIDI devices such as the ASCII keyboard and mouse.
	--
	-p
	}}}
the results can be saved as *
{{{
	played in real-time or save to disk  as a file
	--
	-p
	}}}
This entire process (ie. a processing a score file save to disk) is referred to as
{{{
    "sound rendering"
	--
	-p
	}}}
Typically, we give the two files the same name and differentiate between them by
{{{
    a unique three letter extension —
    .orc for the orchestra file and
    .sco for the score file.
	--
	-p
	}}}
Naming is up to you. In this chapter I have called the files
{{{
    etude1.orc and etude1.sco, etude2.orc and etude2.sco, etude3.orc and etude3.sco, etc.
    These "etude" orchestras contain six instruments each (instr 101 — 106, instr 107 — 112, instr 113 — 118, etc.).
    From these multi-instrument orchestras I have also created a set of single instrument orchestras to make it easier for you to isolate and experiment on individual instruments.
    These are named after the instrument number itself (101.orc and 101.sco, 102.orc and 102.sco, 117.orc and 117.sco, etc.).
	--
	-p
	}}}
The Orchestra File The Csound orchestra file consists of two parts: **
{{{
    the header section and
    the instrument section.
	--
	-p
	}}}
In the header section you define *
{{{
    the sample and control rates that the instruments will be rendered and you specify
    the number of channels in the output.
      .
    The orchestral header that we will use throughout the text is:
      .
    sr = kr = ksmps = nchnls =
    44100 4410 10 1
	--
	-p
	}}}
The Instrument Section In Csound, instruments are defined (and thus designed) by **
{{{
    interconnecting "modules" or opcodes that either generate or modify signals.
	--
	-p
	}}}
These signals(=the opcodes) are represented by **
{{{
    symbols, labels or variable names that can be "patched" from one opcode to another.
	--
	-p
	}}}
    ----

    ----
Individual instruments are given (=ass an identifier)
    and are delimited by ___ *
{{{
    a unique instrument number and are delimited by the instr and endin statements.
	--
	-p
	}}}
In the Csound orchestra file, the syntax of a generic opcode statement is: **
{{{
	Output
    Opcode
      .
    Arguments, ... , ...
      .
    ; Comments (optional)
      .
      .
    In the case of the oscil opcode, this translates into the following syntax:
    Output a1 oscil
    Amplitude Frequency F-table # ; Comment 10000, 440, 1 ; oscillator
	--
	-p
	}}}
Sound Design Etude 1: A Six Instrument Orchestra etude1.orc etude1.sco In our first orchestra file instr 101 uses a table-lookup oscillator opcode, oscil, to compute a 440 Hz sine tone with amplitude of 10000.
{{{
    A block diagram of instr 101 is show in figure 1.2 and the actual Csound orchestra code for this instrument is shown in figure 1.3.
      .
    a1
      .
    instr 101 ; SIMPLE OSCIL oscil
    10000, 440, 1 out a1 endin
      .
    Figure 1.3 Orchestra code for instr
    101, a fixed frequency and
    amplitude instrument using Csound’s
    table-lookup oscillator opcode, oscil.
	--
	-p
	}}}
Connections and layout of the Example opcode 101 **(!)
{{{
    The block diagram of instr 101 clearly shows
      how the output of the oscillator, labeled a1,
      is "patched" to the input of the out opcode
      that writes the signal to the hard-disk.
	--
	-p
	}}}
Csound renders instruments
{{{
    line-by-line, from top to bottom.
	--
	-p
	}}}
Input + Output arguments are on * (=which sides of the opc-name?)
{{{
    input on the right of the opcode name.
    Outputs are on the left.
       =  <<--
	--
	-p
	}}}
the input arguments to the oscillator are set at 10000 (amplitude), 440 (frequency) and 1 (for **
{{{
(for the function number of the waveshape template that the oscillator "reads").
	--
	-p
	}}}
The oscillator opcode renders the sound 44100 times a second with these settings and writes the result into the variable named a1.
{{{
	see more
	--
	-p
	}}}
In this way, variable names function like "patch cords" on a traditional analog synthesizer.
{{{
    The sample values in the local-variable a1 can then be read as inputs by subsequent opcodes, such as the out opcode.
    In this way, variable names function like "patch cords" on a traditional analog synthesizer.
    And with these "virtual patch cords" one can route audio and control "signals" anywhere in an instruments using them to:
        set a parameter to a new value,
        dynamically control a parameter (like turning a knob), or
        as an audio input into some processing opcode.
	--
	-p
	}}}
    ----

    ----
We have replaced the oscil opcode with more powerful synthesis opcodes such as: **
{{{
    foscil — a simple 2-oscillator FM synthesizer,
    buzz — an additive set of harmonicallyrelated cosines,
    pluck — a simple waveguide synthesizer based on the Karplus-Strong algorithm,
    grain — an asynchronous granular synthesizer and
    loscil — a sample-based wavetable synthesizer with looping.
	--
	-p
	}}}
In fact, these six signal generating opcodes (oscil, foscil, buzz, pluck, grain and loscil) represent *
{{{
    the core synthesis technology behind many of today’s most popular commercial synthesizers.
	--
	-p
	}}}
One might say that in Csound, a single opcode
{{{
    is an entire synthesizer! Well... maybe not a very exciting or versatile synthesizer, but... in combination with other opcodes, Csound can, and will, take you far beyond any commercial implementation.
	--
	-p
	}}}
Like the orchestra file, the score file has two parts: *
{{{
    tables and notes.
	--
	-p
	}}}
In the first part, ((eg. tables)) (** (????))
{{{
    In the first part, we use Csound’s mathematical functiondrawing subroutines (GENS) to directly "generate" function-tables (f-tables) and/or fill them by "reading" in soundfiles from the hard-disk.
	--
	-p
	}}}
In the second part, we type in the note-statements.
{{{
    These note-events "perform" the instruments and pass them performance parameters such as frequency-settings, amplitudelevels, vibrato-rates and attack-times.
	--
	-p
	}}}
Csound’s function generating subroutines are called
{{{
    GENS
	--
	-p
	}}}
number of generating subroutines in csound
{{{
    (more than 20)
	--
	-p
	}}}
GENs: 'optimized to compute a specific class of functions or wavetables.'
{{{
    For example,
        the GEN5 and GEN7 subroutines construct functions from segments of exponential curves or straight lines;
    the GEN9 and GEN10 subroutines generate composite waveforms made up of weighted sums of simple sinusoids;
    the GEN20 subroutine generates standard "window" functions such as the Hamming window and the Kaiser window that are typically used for spectrum analysis and grain envelopes; **
    the GEN21 subroutine computes tables with different random distributions such as Gaussian, Cauchy and Poison; and
    the GEN1 subroutine will transfer data from a pre-recorded soundfile into a function-table for processing by one Csound’s opcodes such as the looping-oscillator loscil.
	--
	-p
	}}}
    ----

    ----
For instance, since instr 106 used the sample-based looping oscillator, loscil, I needed to load a sample into the orchestra.
{{{
    I chose GEN1 to do it.
      (+one more example)
	--
	-p
	}}}
the syntax of the Csound function statement (f-statement) is: *
{{{
    f numberload- table- GEN parameter1parameter...; time size Routine comment
	--
	-p
	}}}
If we wanted to generate a 16 point sinewave, we might write the following f-statement: *
{{{
    f 101 0
    16 10 1
    ; a sinewave
	--
	-p
	}}}
As you can see, a sinewave drawn with 16 points of resolution is not particularly smooth.
{{{
    Most functions must be a "power-of-2" in length.
      .
    =For synthesized wavetables, we typically specify function table sizes between 512 (5 K) and 8192 (8 K).
	--
	-p
	}}}
In our first score, etude1.sco, we define the following functions using GEN10, GEN20 and GEN1:
{{{
	f 1 0
    f 2 0
    f 3 0
    f 4 0
    4096 10 1 4096 10 1 .5 .333 .25 .2
.166 .142 .125 .111 .1 .09 .083
.076 .071 .066 .062 4097 20 2 1 0 1
"sing.aif" 0 4 0
	--
	-p
	}}}
Both f 1 and f 2 use GEN10 to fill 4 K tables (4096 values) with:
{{{
    one cycle of a sinewave (f 1) and with the first 16 harmonics of a sawtooth wave (f 2).
      (++)
	--
	-p
	}}}
(Note that the length of f 4 is specified as 0.
{{{
    This tells the GEN1 subroutine to "read" the actual length of the file from the "header" of the soundfile "sing.aif."
	--
	-p
	}}}
As in the orchestra file, each note-statement in the score file occupies
{{{
    a single line.
	--
	-p
	}}}
note statements are also called
{{{
    i-statements
	--
	-p
	}}}
    ----

    ----
In Csound one must always be aware of the fact that whenever two or more notes are performed simultaneously or whenever they overlap,
{{{
    their amplitudes are added. This can frequently result in "samples-out-of-range" or "clipping."
	--
	-p
	}}}
in the orchestra, ___ separates an opcode’s arguments.
{{{
    commas
	--
	-p
	}}}
Here in the score, ____ separates both the f-table arguments and i-statement parameter fields, (or pfields).
{{{
    any number of spaces or tabs
	--
	-p
	}}}
pfields
{{{
    i-statement parameter fields,
	--
	-p
	}}}
In all note-statements, the "meaning" of the first three p-fields (or columns) is
{{{
    reserved. They specify the instrument number,
    the start-time and the duration.
	--
	-p
	}}}
all other p-fields.
{{{
    You — the sound designer, determine the function of all other p-fields.
    Typically, p4 is reserved for amplitude and p5 is reserved for frequency.
	--
	-p
	}}}
more opcodes  tip =look up in the manual
{{{
    aroscil xamp,xcps, ifn[, iphs] arfoscilxamp,kcps, kcar, kmod, kndx, ifn[, iphs] arbuzz xamp,xcps, knh, ifn[, iphs] arpluck kamp,kcps, icps, ifn, imeth[, iparm1,iparm2] argrain xamp,xpitch,xdens,kampoff,kpitchoff,kgdur, igfn, iwfn, imgdur arloscilxamp,kcps, ifn[, ibas][, imod1, ibeg1, iend1][,imod2,ibeg2,iend2]
	--
	-p
	}}}
the air molecules would be compressed / rarefacted when *
{{{
	
	--
	-p
	}}}
9
{{{
	
	--
	-p
	}}}



__julia

    ----
process 8*5 (+do not echo result)
{{{
	8 * 5;
      (= w. a semicolon at the end)
	--
	ljul-p74
	}}}
show|work with last processed results (=at the command prompt) (*)
{{{
    julia> ans
    julia> ans + 10
	--
	ljul-p74
	}}}
bind a value (eg. 3) to a variable  (+setting its type)  **
{{{
	a = 3
      # =jl. uses type inferring(!)
	--
	ljul-p74
	}}}
4
{{{
	
	--
	ljul-p74
	}}}


___niminaction  (pagenums =+20p for mobile-pdf(!))

[Start]

    ----
Nim's Style Insensitivity (!)
{{{
    import strutils
    echo("hello".to_upper())
    echo("world".toUpper())
	  (=can call snake case w. camel case, and vice versa)
    = 'When comparing identifiers, Nim considers the case of the first character, but it doesn’t bother with the case of the rest of the identifier’s characters, ignoring the underscores as well.
    As a result, the identifiers toUpper and ToUpper aren’t equal because the case of the first character differs.
	--
	nimact-p8
	}}}
lowercase vs. uppercase for identifiers (**(!))
{{{
    by convention, type names should start with an uppercase letter and variable names should start with a lowercase letter.
	--
	nimact-p8
	}}}
exception: =types that start w. lowercase letter (!)
{{{
    primitive types such as int start with a lowercase letter (**)
	--
	nimact-p8
	}}}
types-ex. 1: define a type 'dog' (=obj. + age=int), +set an instance w. age 3 [**]
{{{
    type
      Dog = object
        age: int
      .
    let dog = Dog(age: 3)
      #="the type and var does not clash"
	--
	nimact-p8
	}}}
example generic function that can print both integers and float numbers (!)
{{{
proc showNumber(num: int | float) =
  echo(num)
  .
showNumber(3.14)
showNumber(42)
	--
	nimact-p9
	}}}
writing wrapper code to use existing C and C++ libraries
{{{
    using a tool called c2nim. (=)This tool converts C and C++ header files to Nim code, which wraps those files.
	--
	nimact-p10
	}}}
langs and platforms nim can be compiled to (*)
{{{
    Objective C and JavaScript. +Android, via C++
	--
	nimact-p10
	}}}
Switching between garbage collectors (!)
{{{
    specify the --gc:<gc_name> flag during compilation and replace <gc_name> with markandsweep, boehm, or none.
	--
	nimact-p11
	}}}
Nim connects to the C compilation process in order to compile the C source code that was generated by it. This means that the Nim compiler depends on an external C compiler, such as
{{{
    GCC or Clang.
	--
	nimact-p12
	}}}
(one of the advantages of nims compilation process)
{{{
    The result of the compilation is an executable that’s specific to the CPU architecture and OS it was compiled on.
	--
	nimact-p12
	}}}
    ----



    
    ----
about Keywords
{{{
        A keyword is a word with a special meaning associated with it when it’s used in a specific context.
    = Because of this, you may not use keywords as identifiers in your source code.
	--
	nimact-p23
	}}}
For a full list of keywords, consult the Nim manual, available at
{{{
    http://nim-lang.org/docs/manual.html#lexical-analysis-identifiers-keywords.
	--
	nimact-p23
	}}}
[splitting nim statements over more than one line]
{{{
    split after punctuation, plus indent next line
      .
    ok:
    echo("Output: ",
      5)
    echo(5 +
      5)
      .
    not ok:
    echo(5
      + 5)
    echo(5 +
    5)
	--
	nimact-p24
	}}}
recommended indentation in nim (*)
{{{
    two spaces. +The Nim compiler currently disallows tabs
	--
	nimact-p24
	}}}
comments in nim
{{{
    # Single-line comment
      .
    #[
    Multiline comment
    ]#
    ((can be used to comment out both text and code
      .
    when false:
      echo("Commented-out code")
    ((should only be used to comment out code.
	--
	nimact-p25
	}}}
when false: style comments
{{{
    = 'The compiler will still parse the code and ensure that it’s syntactically valid, but it won’t be included in the resulting program.
    (='when' is nim's compile-time if) nimact-p121
	--
	nimact-p25
	}}}
nim's notion of functions (!)
{{{
    procedures
	--
	nimact-p25
	}}}
    ----

    ----
case of type names (*!)
{{{
    user defined =starts with uppercase
    builtin =starts with lowercase
	--
	nimact-p25
	}}}
functionality for using libraries written in other programming languages (*)
{{{
    C:s foreign function interface (FFI).
    (+concerning types and FFI:) = 'Nim includes types that are native to C and C++, allowing libraries written in those languages to be used.
	--
	nimact-p25
	}}}
Most of the built-in types are defined in (=which module?  +It is included how?) (**!!)
{{{
    the system module,
      which is imported automatically into your source code.
	--
	nimact-p26
	}}}
When referring to these types in your code, (*) (= how you can refer to them?) (*)
{{{
    you can qualify them with the module name (for example, system.int), but doing so isn’t necessary.
	--
	nimact-p26
	}}}
list of the basic types defined in the system module. *
{{{
    table 2.1
      .
    int
    float
    string
    bool
    char
      (+sub(?)types, like uint (etc))
       = Table 2.2
	--
	nimact-p26
	}}}
pulling in modules (to be able to access contents) (*)
{{{
    import modulename
	--
	nimact-p26
	}}}
nim strings (!)
{{{
    "Nim is awesome"
	--
	nimact-p26
	}}}
bool
{{{
    true or false
	--
	nimact-p26
	}}}
char
{{{
    The character type stores a single ASCII character.
    Character literals are created by placing a character inside single quotes; for example, 'A'.
	--
	nimact-p26
	}}}
    ----

    ----
the integer type you should be using most in your Nim programs.
{{{
    int
    (= Generic signed two’s complement integer.
	--
	nimact-p26
	}}}
int8 int16 int32 int64
{{{
    Signed two’s complement integer.
    These types can be used if you want to be explicit about the size requirements of your data.
	--
	nimact-p26
	}}}
Generic unsigned integer.
{{{
    uint
	--
	nimact-p26
	}}}
uint8 uint16 uint32 uint64
{{{
	--
	nimact-p27
	}}}
An integer literal in Nim can be represented using decimal, ....  [+ASSIGNING VARS(**(!))]
{{{
    octal, hexadecimal, or binary notation.
    decimal = 42
    hex = 0x42
    octal = 0o42
    binary = 0b101010
	--
	nimact-p27
	}}}
assign variable and(!) explicitly specify type (**!)
{{{
      # int16
    let a: int16 = 42
      # Uses a type suffix to specify the type of the integer literal
    let b = 42'i8
	--
	nimact-p27
	}}}
    ----

    ----
assign variables with explicit type float
{{{
    Listing 2.5 Float literals
    let a = 1'f32
	--
	nimact-p28
	}}}
[type suffixes for floats that correspond to the available floating-point types:
{{{
    'f32 for float32 and 'f64 for float64.
	--
	nimact-p28
	}}}
(1019 in exponential notation)
{{{
    let b = 1.0e19
	--
	nimact-p28
	}}}
char represents   (+some vars w. chars)
{{{
    ASCII-chars (not Unicode)
      (= char is really just a number.
    Listing 2.7 Character literals
    let a = 'A'
    let b = '\109'
    let c = '\x79'
	--
	nimact-p28
	}}}
Unicode in nim
{{{
    The unicode module contains a Rune type that can hold any unicode character.
	--
	nimact-p28
	}}}
(Newline Escape Sequence
{{{
    The newline escape sequence \n isn’t allowed in a character literal as it may be composed of multiple characters on some platforms.
    On Windows, it’s \r\l (carriage return followed by line feed),whereas on Linux it’s just \l (line feed).
    Specify the character you want explicitly, such as '\r' to get a carriage return, or use a string.
      .
      .
    Table 2.3 Common
    character-escape
    sequences
    \r, \c Carriage return
    \l Line feed
    \t Tab
    \\ Backslash
    \' Apostrophe
    \" Quotation mark
	--
	nimact-p28,p29
	}}}
multiline strings in nim (+ignoring indent wh. displaying a string) (!)
{{{
    let multiLine = """foo
      bar
      baz
    """
    echo multiLine
      (=w. double-quotes)
      .
      . (=
    foo
      bar
      baz
      .
      .
    may contain any characters, including the doublequote character, without any escape sequences.
    ((exc. of course)  double-quote character three times.
      .
      .
    import strutils
    let multiLine = """foo
      bar
      baz
    """
    echo multiLine.unindent
      .
    This will produce the following
    output:

    foo
    bar
    baz
	--
	nimact-p29,p30
	}}}
    ----

    ----
keywords for defining variables and storage in nim (!)
{{{
    let, const and var.
	--
	nimact-p30
	}}}
let creates ____
{{{
    an immutable variable
      .
    let number = 10
    number = 4000
      .
      (=produces a compil. error)
    numbers.nim(2, 1) Error: 'number' cannot be assigned to
	--
	nimact-p30
	}}}
define a classic mutable variable
{{{
    var number = 10
    number = 4000
	--
	nimact-p31
	}}}
specify the type explicitly wh. setting a var. (+initvalues)
{{{
    var number: int
    # This will be initialized to 0.
	--
	nimact-p31
	}}}
initval.s for const- and let- values (*)  (='storage')
{{{
    Immutable variables must be assigned a value when they’re defined because their values can’t change.
	--
	nimact-p31
	}}}
'A variable’s initial value will always be binary zero.' (?? (=more ab. types))
{{{
    = 'This will manifest in different ways, depending on the type.
    For example, by default, integers will be 0 and strings will be nil.
	--
	nimact-p31
	}}}
te: reference type
{{{
     (= ??)
	--
	nimact-p31
	}}}
    ----

    ----
types for variables: var number = 10  (+changing val. to a val. of diff. type (**!!))
{{{
    var number = 10
    number = "error"
      .
    typeMismatch.nim(2, 10) Error: type mismatch: got (string) but expected 'int'
      .
    [= The type of a variable can’t change.] (!!)
	--
	nimact-p31
	}}}
The $ operator
{{{
    commonly used operator in Nim that converts its input to a string.
	--
	nimact-p31
	}}}
nim consts (=vs let-vars)  (+the Ex. defines the procedure(!))
{{{
    a Nim constant differs in one important way: its value must be computable at compile time.
      .
    proc fillString(): string =
      result = ""
      echo("Generating string")
      for i in 0 .. 4:
        result.add($i)
      .
    const count = fillString()
	--
	nimact-p31
	}}}
['I added the echo at the top of fillString’s body, in order to show you that it’s executed at compile time.
{{{
    Try compiling the example using Aporia or in a terminal by executing nim c file.nim.
    You’ll see "Generating string" amongst the output.
    Running the binary will never display that message because the result of the fillString procedure is embedded in it.
	--
	nimact-p32
	}}}
not all code can be executed at compile time.
{{{
    For example, if a compile-time procedure uses the FFI, (= tries to use)
	--
	nimact-p32
	}}}
The main benefit of using constants is
{{{
    efficiency
    The compiler can compute a value for you at compile time, saving time that would be otherwise spent during runtime.
	--
	nimact-p32
	}}}
specify multiple variable definitions under the same var, let, or const keyword. (*)
{{{
    add a new line after the keyword and indent the identifier on the next line:
      .
    var
      text = "hello"
      number: int = 10
      isTrue = false
	--
	nimact-p32
	}}}
variable name(s)  can contain  (=what char.s, etc) (!!)
{{{
    can contain any characters, as long as the name doesn’t begin with a number and doesn’t contain two consecutive underscores.
      .
    (can even contain unicode)
    var 火 = "Fire"
    let ogień = true
      .
      .
    + 'identifiers in Nim are case insensitive with the exception of the first letter of the identifier
    (+ '_' inside id.fiers is ignored)
	--
	nimact-p32
	}}}
create var named 'var' (!)
{{{
    var `var` = "Hello"
    echo(`var`)
	--
	nimact-p33
	}}}
“Style Guide for Nim Code” on GitHub: (
{{{
    (eg.  variables should use camelCase and types should use PascalCase.
    https://github.com/nim-lang/Nim/wiki/ Style-Guide-for-Nim-Code.
	--
	nimact-p33
	}}}
    ----

    ----
Procedures (= synonyms in other langs + definition in nim) (!)
{{{
    In other programming languages a procedure may be known as a function, method, or subroutine.
	--
	nimact-p33
	}}}
procedure defin. in nim (**(!!))
{{{
    proc keyword
    procedure’s name
    parameters
    optional return type
    =
    procedure body
      .
    proc myProc(name: string): string = "Hello " & name
    myProc("Dominik")
       [+compilation of this procedure will result in an error, because return value is implicitly discarded
	--
	nimact-p33,34
	}}}
'In most cases, ignoring the result of a procedure is a bug in your code, because
{{{
    the result could describe an error that occurred or give you a piece of vital information.
    You’ll likely want to do something with the result, such as store it in a variable or pass it to another procedure via a call.
	--
	nimact-p34
	}}}
dropping  the result of a procedure (!)
{{{
    # =use the discard keyword
    proc myProc(name: string): string = "Hello " & name
    discard myProc("Dominik")
	--
	nimact-p34
	}}}
definition and calling order for procedures (!)
{{{
    Procedures must be defined above the call site.
      .
    # eg. this fails
    myProc()
    proc myProc() = echo("Hello World")
      .
    For procedures that have a circular dependency, a forward declaration must be used:
    proc bar(): int
    proc foo(): float = bar().float
    proc bar(): int = foo().int
      .
    A forward declaration contains no procedure body, just the procedure’s name, parameters, and return type.
    + A future version of Nim will likely remove the need for forward declarations and allow procedures to be defined in any order.
	--
	nimact-p34
	}}}
(when a) procedure is said to return void.
{{{
    When a procedure returns no values, the return type can be omitted. In that case, the procedure is said to return void.
      .
    proc noReturn() = echo("Hello")
    proc noReturn2(): void = echo("Hello")
        note: It’s idiomatic to avoid writing the redundant void in procedure definitions.
      .
    +If your procedure takes no parameters, you can omit the parentheses:
    proc noReturn = echo("Hello")
	--
	nimact-p34,p35
	}}}
Returning Values From Procedures
{{{
    where the last expression of a procedure has a nonvoid value associated with it, that expression will be implicitly returned from that procedure.
       (+ on idiomatic to use expkicit return  for last implicitly returnin expr.)
      .
    + The return keyword is still necessary for early returns from a procedure.
    --
    Nim supports a lot of different methods of setting the return value, and you’re free to combine them.
	--
	nimact-p35;p36
	}}}
+= 'diff. Ex.s of returning values from procedures:'
{{{
    (= see Ex.s
	--
	nimact-p35
	}}}
the return values for procedures example: what the asserts are used for (!)
{{{
    The code block showing examples of returning values from procedures uses assert to show the output that you should expect when calling each of the defined procedures.
	--
	nimact-p35
	}}}
        ----

        ----
default return value (of a) procedure (and variables) (**)
{{{
    binary zero by default.
	--
	nimact-p36
	}}}
proc.s implicit result variable (!! (?)) (+Tip)(*)
{{{
    Every procedure with a return type has a result variable declared inside its body implicitly.
    This result variable is mutable and is of the same type as the procedure’s return type.
        It can be used just like any other variable; the resultVar and resultVar2 procedures are two examples.
    = 'You should make use of it whenever you can, instead of defining your own variable and returning it explicitly.
    ((+ 'The result variable comes with some restrictions when it’s combined with implicit returns.
	--
	nimact-p36
	}}}
nim concat. operator
{{{
    &
	--
	nimact-p36
	}}}
ask the compiler to infer the return type of your procedure for you (= like for variables(!!))  (+Tip|Best pract.(!))
{{{
    proc message(recipient: string): auto =
      "Hello " & recipient
      .
    assert message("Dom") == "Hello Dom"
      .
      .
    you should specify the type explicitly whenever possible. Doing so makes it easier for you and others to determine the return type of a procedure, without needing to understand the procedure’s body.
    (+ still a bit experimental in Nim.
	--
	nimact-p36
	}}}
Procedure Parameters
{{{
    proc max(a: int, b: int): int =
      if a > b: a else: b
      .
    assert max(5, 10) == 10
      .
      .
    (+if same type: only have to be specified once(!))
      .
    proc max(a, b: int): int =
      if a > b: a else: b
	--
	nimact-p36
	}}}
proc default parameters (*(*))
{{{
    proc genHello(name: string, surname = "Doe"): string =
      "Hello " & name & " " & surname
      .
    assert genHello("Peter") == "Hello Peter Doe"
    assert genHello("Peter", "Smith") == "Hello Peter Smith"
	--
	nimact-p36,p37
	}}}
A procedure taking a variable number of parameters (!)
{{{
    proc genHello(names: varargs[string]): string =
      result = ""
      for name in names:
        result.add("Hello " & name & "\n")
      .
    assert genHello("John", "Bob") == "Hello John\nHello Bob\n"
    
	--
	nimact-p37
	}}}
Procedure Overloading (!)
{{{
    =commonly used in Nim:
    Each of these procedures shares the same name but accept different parameters.
    Depending on the arguments passed to the procedure, the appropriate implementation is picked by the compiler.
    proc getUserCity(firstName, lastName: string): string =
      case firstName
      of "Damien": return "Tokyo"
      of "Alex": return "New York"
      else: return "Unknown"
      .
    proc getUserCity(userID: int): string =
      case userID
      of 1: return "Tokyo"
      of 2: return "New York"
      else: return "Unknown"
      .
    doAssert getUserCity("Damien", "Lundi") == "Tokyo"
    doAssert getUserCity(2) == "New York
	--
	nimact-p37,38
	}}}
anon. procedure (= like lambda?)  (+Ex. =using with filter to pick out even numbers (!))
{{{
    import sequtils
    let numbers = @[1, 2, 3, 4, 5, 6]
    let odd = filter(numbers, proc (x: int): bool = x mod 2 != 0)
    assert odd == @[1, 3, 5]
	--
	nimact-p38
	}}}
The filter procedure
{{{
    It takes two parameters: a sequence and an anonymous procedure. It then iterates through each item and uses the anonymous procedure it got to see whether it should filter the item out or keep it.
   (+returns a new sequence 
	--
	nimact-p38
	}}}
syntactic sugar for defining anonymous procedures and procedure types.
{{{
    import the future module. (The syntactic sugar is defined using macros,
    import sequtils, future
    let numbers = @[1, 2, 3, 4, 5, 6]
    let odd = filter(numbers, (x: int) -> bool => x mod 2 != 0)
    assert odd == @[1, 3, 5]
      .
    (+ can be shortened further using type inference: x => x mod 2 != 0. But keep in mind that this may not work in some cases.
	--
	nimact-p38,p39
	}}}
The -> symbol (*)
{{{
    - used to specify types.
    - can also be used on its own in place of procedure types. For example, you can use it when defining a procedure that takes another procedure as a parameter.
      .
    proc isValid(x: int, validator: proc (x: int): bool) =
      if validator(x): echo(x, " is valid")
      else: echo(x, " is NOT valid")
      .
    (+ can be re-written as follows)
    import future
    proc isValid(x: int, validator: (x: int) -> bool) =
      if validator(x): echo(x, " is valid")
      else: echo(x, " is NOT valid")
	--
	nimact-p39
	}}}
    ----

Collections (=arrays, seqs, sets)

    ----
The array type
{{{
    represents a list of a static number of items.
      similar to C arrays but offers more memory safety,
	--
	nimact-p39
	}}}
define an  array (that) contains three elements.  (+what happens to elements not given a value when the array is set *)
{{{
    var list: array[3, int]
    list[0] = 1
    list[1] = 42
    assert list[0] == 1
    assert list[1] == 42
    assert list[2] == 0
      .
    echo list.repr
    # yields [1,42,0]
    echo list[500]
    # compil.error: 'index out of bounds'
	--
	nimact-p40
	}}}
te: Arrays are (=value or reference types)
{{{
    value types, just like int, float, and many others, which means they’re allocated on the stack.
    This is similar to C arrays, but it differs completely from Java’s arrays, which are reference types and are stored on the heap.
	--
	nimact-p40
	}}}
bounds checking arrays (+arrays are static)
{{{
    In C, checks for index bounds aren’t made, so it’s possible to access memory that’s outside the bounds of the array.
    done in nim at compile time and runtime (as long as the --boundsChecks option is not turned off.
       (=compiling with the -d:release flag
	--
	nimact-p40
	}}}
Custom array ranges  (=other than '0 to __')
{{{
    var list: array[-10 .. -9, int]
    list[-10] = 1
    list[-9] = 2
	--
	nimact-p40
	}}}
assign a list of items to the array directly in the array constructor
{{{
    var list = ["Hi", "There"]
	--
	nimact-p40
	}}}
iterate over collection types
{{{
    var list = ["My", "name", "is", "Dominik"]
    for item in list:
      echo(item)
    # =Loops through each item
      .
    for i in list.low .. list.high:
      echo(list[i])
      .
    # =Loops through each index
	--
	nimact-p40
	}}}
Sequences **  (+= are defined using the ___ type)
{{{
    = dynamic-size arrays
      .
    Sequences are defined using the seq type:
    var list: seq[int] = @[]
    list[0] = 1
      .
    list.add(1)
      .
    assert list[0] == 1
    echo list[42]
      .
    Assigns 1 to the first item in the sequence. This will result in an index-out-of-bounds exception at runtime because there are currently no items in the sequence.
    Appends 1 as an item to the list sequence
    Attempts to access an item that doesn’t exist. An index-out-of-bounds exception will be raised.
	--
	nimact-p41
	}}}
seqs must be  initialized before they’re used, just like strings  (=because(??))
{{{
    Sequences are stored on the heap, and as such are garbage collected. This means that they need to be initialized before they’re used, just like strings.
    var list: seq[int]
    echo(list[0])
      .
    Accessing the items of an uninitialized sequence will result in a segmentation fault at runtime.
	--
	nimact-p41
	}}}
    ----

    ----
compile segfault.nim
{{{
    c -r segfault.nim
	--
	nimact-p41
	}}}
display a traceback that shows the procedure calls leading up to your program’s crash.
{{{
    As long as your program isn’t compiled in release mode, any crashes will display a traceback that shows the procedure calls leading up to your program’s crash.
	--
	nimact-p41
	}}}
what the segfault traceback info segfault.nim(2) means
{{{
    In this case, the 2 in the parentheses corresponds to line 2 in the source code, echo(list[0]). This hints that list is nil, and that it must be initialized.
	--
	nimact-p41
	}}}
the sequence constructor syntax (!)
{{{
    @[]
	--
	nimact-p41
	}}}
A sequence can be initialized in two ways: **
{{{
    using the sequence constructor syntax (@[]),
    using the newSeq procedure.
	--
	nimact-p41
	}}}
    ----

    ----
constructing a seq w. the sequence constructor syntax *
{{{
    you must be careful to specify the type of the sequence.
    var list = @[4, 8, 15, 16, 23, 42]
    (= the compiler knows that the sequence type is seq[int]
	--
	nimact-p41,p42
	}}}
the newSeq procedure (= Use cases, +built-in optimization) (!!)
{{{
    important optimization - you should use it when you know the size of the sequence ahead of time.
      .
    var list = newSeq[string](3)
    assert list[0] == nil
     # =The items will exist but will not be initialized.
    list[0] = "Foo"
     # =You can assign new values to them easily.
    list[1] = "Bar"
    list[2] = "Baz"
      .
    list.add("Lorem")
	--
	nimact-p42
	}}}
Iterating over a sequence (!)
{{{
    let list = @[4, 8, 15, 16, 23, 42]
    for i in 0 .. <list.len:
      stdout.write($list[i] & " ")
      .
    [[+ The range of iteration is inclusive, so you must subtract 1 from the length of the sequence in order to iterate fewer times. This is achieved by prefixing the length of the sequence with the < operator.
      .
    This outputs the following:
    4 8 15 16 23 42
	--
	nimact-p42
	}}}
You've already seen an example of manipulating sequences using the filter procedure. You can find more procedures that manipulate sequences in the ____ modules.
{{{
    system and sequtils
	--
	nimact-p42
	}}}
a set w. 16 int-values
{{{
    set[int16]
	--
	nimact-p42
	}}}
bass type for Nims sets
{{{
    A Nim set's base type must be an ordinal type, which is a type with values that can be counted.
    (+eg. char is an ordinal type but string is not)
      .
    [+ this restriction only applies to Nims builtin sets]
    = There's another set type in the sets module called HashSet that supports any type as its base type. But the built-in set type is more efficient and thus should be used whenever possible.
	--
	nimact-p42
	}}}
The set type is a value type and so (?)
{{{
    doesn't need to be initialized. (??)
      .
    var collection: set[int16]
    assert collection == {}
	--
	nimact-p43
	}}}
    ----

    ----
constructing a set (**!)
{{{
    constructed using {}
    let collection = {'a', 'x', 'r'}
	--
	nimact-p43
	}}}
Sets are useful for cases where (**)
{{{
    you want to check for the presence of a certain value in a collection -
    let collection = {'a', 'x', 'r'}
    assert 'a' in collection
	--
	nimact-p43
	}}}
sets can be used to perform some interesting checks (eg. check if a set contains any uppercase characters) **
{{{
    let collection = {'a', 'T', 'z'}
    let isAllLowerCase = {'A' .. 'Z'} * collection == {}
      # set constructors can contain ranges
      # *: the intersection operator
    assert(not isAllLowerCase)
	--
	nimact-p43
	}}}
Sets are often used in the standard library to ___  (+advantage, eg. compared to C)
{{{
    represent a collection of unique flags.
    In other languages such as C, flags may be represented by an integer, which is interpreted as a sequence of Boolean bits. Compared to sets, this approach is very unsafe and often leads to errors.
	--
	nimact-p43
	}}}
    ----


Control flow

    ----

{{{
    
	--
	nimact-p43
	}}}
2
{{{
    
	--
	nimact-p43
	}}}





___lilypond_01

    ----
(suggested simplest basic file)
{{{
    \version "2.22.0"
    {
    c' e' g' e'
    }
    Note: Notes and lyrics in LilyPond input must always be surrounded by { curly braces }.
    + 'LilyPond input is case sensitive. = ‘{ c d e }’ is valid
	--
	ly01-p6
	}}}
((why lilypond may run slow when run the first time
{{{
	--
	ly01-p6
	}}}
(compiling on mac
{{{
    (tip: 'Double click the LilyPond.app, an example file will open.
    save +Compile > Typeset.
	--
	ly01-p7--p10
	}}}
(compiling on win
{{{
	double-click app on desktop to show example file
    compile (dclick, rclick, drag-drop, cline
	--
	ly01-p11--p16
	}}}
cline compile
{{{
	--
	ly01-p16--p17
	}}}
    ----


___lilypond_02

    ----
1
{{{
	
	--
	ly02-p_
	}}}



__guile  (=-20pp)

    ----
Guile 'operation-modes' (*)
{{{
    Like a shell, Guile can run interactively - reading expressions from the user, evaluating them, and displaying the results
    - or as a script interpreter, reading and executing Scheme code from a file.
	--
	guile02-p23
	}}}
Guile also provides an object library, (=called) ____, that allows other applications to easily incorporate a complete Scheme interpreter. [!]
{{{
    libguile
	--
	guile02-p23
	}}}
can program applications which use Guile  w. other languages (??|**)
{{{
	= elisp, js (+py, ruby, lua ?)
	--
	guile02-p25
	}}}
the symbol 'a' (as in  a 1  after running a function)
{{{
    (begin (display 1) (newline) 'hooray)
    a 1
    ⇒ hooray
      .
    Some procedures produce some output besides returning a value.  (=this val. is denoted by the symbol 'a')
	--
	guile02-p28
	}}}
    ----

2 Hello Guile

    ----
extra example files
{{{
    the 'examples/' directory in the Guile source distribution (eg. /usr local)
	--
	guile02-p29
	}}}
ex: defining a factorial-function at the prompt
{{{
    (define (factorial n)  ; define a function
      (if (zero? n) 1 (* n (factorial (- n 1)))))
	--
	guile02-p29
	}}}
A simple Hello World-script (*!)
{{{
    #!/usr/local/bin/guile -s
    !#
    (display "Hello, world!")
    (newline)
	--
	guile02-p29
	}}}
4
{{{
	
	--
	guile02-p29
	}}}


 __mscore3

    ----
1
{{{
	
	--
	mscore3-p19
	}}}
2
{{{
	
	--
	mscore3-p19
	}}}

